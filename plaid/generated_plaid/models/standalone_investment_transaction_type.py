# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from plaid.generated_plaid.configuration import Configuration


class StandaloneInvestmentTransactionType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'buy': 'str',
        'sell': 'str',
        'cancel': 'str',
        'cash': 'str',
        'fee': 'str',
        'transfer': 'str'
    }

    attribute_map = {
        'buy': 'buy',
        'sell': 'sell',
        'cancel': 'cancel',
        'cash': 'cash',
        'fee': 'fee',
        'transfer': 'transfer'
    }

    def __init__(self, buy=None, sell=None, cancel=None, cash=None, fee=None, transfer=None, local_vars_configuration=None):  # noqa: E501
        """StandaloneInvestmentTransactionType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._buy = None
        self._sell = None
        self._cancel = None
        self._cash = None
        self._fee = None
        self._transfer = None
        self.discriminator = None

        if buy is not None:
            self.buy = buy
        if sell is not None:
            self.sell = sell
        if cancel is not None:
            self.cancel = cancel
        if cash is not None:
            self.cash = cash
        if fee is not None:
            self.fee = fee
        if transfer is not None:
            self.transfer = transfer

    @property
    def buy(self):
        """Gets the buy of this StandaloneInvestmentTransactionType.  # noqa: E501

        Buying an investment  # noqa: E501

        :return: The buy of this StandaloneInvestmentTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this StandaloneInvestmentTransactionType.

        Buying an investment  # noqa: E501

        :param buy: The buy of this StandaloneInvestmentTransactionType.  # noqa: E501
        :type buy: str
        """

        self._buy = buy

    @property
    def sell(self):
        """Gets the sell of this StandaloneInvestmentTransactionType.  # noqa: E501

        Selling an investment  # noqa: E501

        :return: The sell of this StandaloneInvestmentTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this StandaloneInvestmentTransactionType.

        Selling an investment  # noqa: E501

        :param sell: The sell of this StandaloneInvestmentTransactionType.  # noqa: E501
        :type sell: str
        """

        self._sell = sell

    @property
    def cancel(self):
        """Gets the cancel of this StandaloneInvestmentTransactionType.  # noqa: E501

        A cancellation of a pending transaction  # noqa: E501

        :return: The cancel of this StandaloneInvestmentTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._cancel

    @cancel.setter
    def cancel(self, cancel):
        """Sets the cancel of this StandaloneInvestmentTransactionType.

        A cancellation of a pending transaction  # noqa: E501

        :param cancel: The cancel of this StandaloneInvestmentTransactionType.  # noqa: E501
        :type cancel: str
        """

        self._cancel = cancel

    @property
    def cash(self):
        """Gets the cash of this StandaloneInvestmentTransactionType.  # noqa: E501

        Activity that modifies a cash position  # noqa: E501

        :return: The cash of this StandaloneInvestmentTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this StandaloneInvestmentTransactionType.

        Activity that modifies a cash position  # noqa: E501

        :param cash: The cash of this StandaloneInvestmentTransactionType.  # noqa: E501
        :type cash: str
        """

        self._cash = cash

    @property
    def fee(self):
        """Gets the fee of this StandaloneInvestmentTransactionType.  # noqa: E501

        Fees on the account, e.g. commission, bookkeeping, options-related.  # noqa: E501

        :return: The fee of this StandaloneInvestmentTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this StandaloneInvestmentTransactionType.

        Fees on the account, e.g. commission, bookkeeping, options-related.  # noqa: E501

        :param fee: The fee of this StandaloneInvestmentTransactionType.  # noqa: E501
        :type fee: str
        """

        self._fee = fee

    @property
    def transfer(self):
        """Gets the transfer of this StandaloneInvestmentTransactionType.  # noqa: E501

        Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer  # noqa: E501

        :return: The transfer of this StandaloneInvestmentTransactionType.  # noqa: E501
        :rtype: str
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this StandaloneInvestmentTransactionType.

        Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer  # noqa: E501

        :param transfer: The transfer of this StandaloneInvestmentTransactionType.  # noqa: E501
        :type transfer: str
        """

        self._transfer = transfer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandaloneInvestmentTransactionType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StandaloneInvestmentTransactionType):
            return True

        return self.to_dict() != other.to_dict()
