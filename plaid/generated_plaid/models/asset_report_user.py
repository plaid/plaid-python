# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from plaid.generated_plaid.configuration import Configuration


class AssetReportUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_user_id': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'ssn': 'str',
        'phone_number': 'str',
        'email': 'str'
    }

    attribute_map = {
        'client_user_id': 'client_user_id',
        'first_name': 'first_name',
        'middle_name': 'middle_name',
        'last_name': 'last_name',
        'ssn': 'ssn',
        'phone_number': 'phone_number',
        'email': 'email'
    }

    def __init__(self, client_user_id=None, first_name=None, middle_name=None, last_name=None, ssn=None, phone_number=None, email=None, local_vars_configuration=None):  # noqa: E501
        """AssetReportUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_user_id = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._ssn = None
        self._phone_number = None
        self._email = None
        self.discriminator = None

        if client_user_id is not None:
            self.client_user_id = client_user_id
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if ssn is not None:
            self.ssn = ssn
        if phone_number is not None:
            self.phone_number = phone_number
        if email is not None:
            self.email = email

    @property
    def client_user_id(self):
        """Gets the client_user_id of this AssetReportUser.  # noqa: E501

        An identifier you determine and submit for the user.  # noqa: E501

        :return: The client_user_id of this AssetReportUser.  # noqa: E501
        :rtype: str
        """
        return self._client_user_id

    @client_user_id.setter
    def client_user_id(self, client_user_id):
        """Sets the client_user_id of this AssetReportUser.

        An identifier you determine and submit for the user.  # noqa: E501

        :param client_user_id: The client_user_id of this AssetReportUser.  # noqa: E501
        :type client_user_id: str
        """

        self._client_user_id = client_user_id

    @property
    def first_name(self):
        """Gets the first_name of this AssetReportUser.  # noqa: E501

        The user's first name. Required for the Fannie Mae Day 1 Certainty™ program.  # noqa: E501

        :return: The first_name of this AssetReportUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AssetReportUser.

        The user's first name. Required for the Fannie Mae Day 1 Certainty™ program.  # noqa: E501

        :param first_name: The first_name of this AssetReportUser.  # noqa: E501
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this AssetReportUser.  # noqa: E501

        The user's middle name  # noqa: E501

        :return: The middle_name of this AssetReportUser.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this AssetReportUser.

        The user's middle name  # noqa: E501

        :param middle_name: The middle_name of this AssetReportUser.  # noqa: E501
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this AssetReportUser.  # noqa: E501

        The user's last name.  Required for the Fannie Mae Day 1 Certainty™ program.  # noqa: E501

        :return: The last_name of this AssetReportUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AssetReportUser.

        The user's last name.  Required for the Fannie Mae Day 1 Certainty™ program.  # noqa: E501

        :param last_name: The last_name of this AssetReportUser.  # noqa: E501
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def ssn(self):
        """Gets the ssn of this AssetReportUser.  # noqa: E501

        The user's Social Security Number. Required for the Fannie Mae Day 1 Certainty™ program.  Format: \"ddd-dd-dddd\"  # noqa: E501

        :return: The ssn of this AssetReportUser.  # noqa: E501
        :rtype: str
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this AssetReportUser.

        The user's Social Security Number. Required for the Fannie Mae Day 1 Certainty™ program.  Format: \"ddd-dd-dddd\"  # noqa: E501

        :param ssn: The ssn of this AssetReportUser.  # noqa: E501
        :type ssn: str
        """

        self._ssn = ssn

    @property
    def phone_number(self):
        """Gets the phone_number of this AssetReportUser.  # noqa: E501

        The user's phone number, in E.164 format: +{countrycode}{number}. For example: \"+14151234567\"  # noqa: E501

        :return: The phone_number of this AssetReportUser.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this AssetReportUser.

        The user's phone number, in E.164 format: +{countrycode}{number}. For example: \"+14151234567\"  # noqa: E501

        :param phone_number: The phone_number of this AssetReportUser.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this AssetReportUser.  # noqa: E501

        The user's email address.  # noqa: E501

        :return: The email of this AssetReportUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AssetReportUser.

        The user's email address.  # noqa: E501

        :param email: The email of this AssetReportUser.  # noqa: E501
        :type email: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetReportUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetReportUser):
            return True

        return self.to_dict() != other.to_dict()
