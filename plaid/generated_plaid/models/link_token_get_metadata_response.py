# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from plaid.generated_plaid.configuration import Configuration


class LinkTokenGetMetadataResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'initial_products': 'list[Products]',
        'webhook': 'str',
        'country_codes': 'list[CountryCode]',
        'language': 'str',
        'account_filters': 'AccountFiltersResponse',
        'redirect_uri': 'str',
        'client_name': 'str'
    }

    attribute_map = {
        'initial_products': 'initial_products',
        'webhook': 'webhook',
        'country_codes': 'country_codes',
        'language': 'language',
        'account_filters': 'account_filters',
        'redirect_uri': 'redirect_uri',
        'client_name': 'client_name'
    }

    def __init__(self, initial_products=None, webhook=None, country_codes=None, language=None, account_filters=None, redirect_uri=None, client_name=None, local_vars_configuration=None):  # noqa: E501
        """LinkTokenGetMetadataResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._initial_products = None
        self._webhook = None
        self._country_codes = None
        self._language = None
        self._account_filters = None
        self._redirect_uri = None
        self._client_name = None
        self.discriminator = None

        if initial_products is not None:
            self.initial_products = initial_products
        self.webhook = webhook
        if country_codes is not None:
            self.country_codes = country_codes
        if language is not None:
            self.language = language
        if account_filters is not None:
            self.account_filters = account_filters
        self.redirect_uri = redirect_uri
        if client_name is not None:
            self.client_name = client_name

    @property
    def initial_products(self):
        """Gets the initial_products of this LinkTokenGetMetadataResponse.  # noqa: E501

        The `products` specified in the `/link/token/create` call.  # noqa: E501

        :return: The initial_products of this LinkTokenGetMetadataResponse.  # noqa: E501
        :rtype: list[Products]
        """
        return self._initial_products

    @initial_products.setter
    def initial_products(self, initial_products):
        """Sets the initial_products of this LinkTokenGetMetadataResponse.

        The `products` specified in the `/link/token/create` call.  # noqa: E501

        :param initial_products: The initial_products of this LinkTokenGetMetadataResponse.  # noqa: E501
        :type initial_products: list[Products]
        """

        self._initial_products = initial_products

    @property
    def webhook(self):
        """Gets the webhook of this LinkTokenGetMetadataResponse.  # noqa: E501

        The `webhook` specified in the `/link/token/create` call.  # noqa: E501

        :return: The webhook of this LinkTokenGetMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this LinkTokenGetMetadataResponse.

        The `webhook` specified in the `/link/token/create` call.  # noqa: E501

        :param webhook: The webhook of this LinkTokenGetMetadataResponse.  # noqa: E501
        :type webhook: str
        """

        self._webhook = webhook

    @property
    def country_codes(self):
        """Gets the country_codes of this LinkTokenGetMetadataResponse.  # noqa: E501

        The `country_codes` specified in the `/link/token/create` call.  # noqa: E501

        :return: The country_codes of this LinkTokenGetMetadataResponse.  # noqa: E501
        :rtype: list[CountryCode]
        """
        return self._country_codes

    @country_codes.setter
    def country_codes(self, country_codes):
        """Sets the country_codes of this LinkTokenGetMetadataResponse.

        The `country_codes` specified in the `/link/token/create` call.  # noqa: E501

        :param country_codes: The country_codes of this LinkTokenGetMetadataResponse.  # noqa: E501
        :type country_codes: list[CountryCode]
        """

        self._country_codes = country_codes

    @property
    def language(self):
        """Gets the language of this LinkTokenGetMetadataResponse.  # noqa: E501

        The `language` specified in the `/link/token/create` call.  # noqa: E501

        :return: The language of this LinkTokenGetMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LinkTokenGetMetadataResponse.

        The `language` specified in the `/link/token/create` call.  # noqa: E501

        :param language: The language of this LinkTokenGetMetadataResponse.  # noqa: E501
        :type language: str
        """

        self._language = language

    @property
    def account_filters(self):
        """Gets the account_filters of this LinkTokenGetMetadataResponse.  # noqa: E501


        :return: The account_filters of this LinkTokenGetMetadataResponse.  # noqa: E501
        :rtype: AccountFiltersResponse
        """
        return self._account_filters

    @account_filters.setter
    def account_filters(self, account_filters):
        """Sets the account_filters of this LinkTokenGetMetadataResponse.


        :param account_filters: The account_filters of this LinkTokenGetMetadataResponse.  # noqa: E501
        :type account_filters: AccountFiltersResponse
        """

        self._account_filters = account_filters

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this LinkTokenGetMetadataResponse.  # noqa: E501

        The `redirect_uri` specified in the `/link/token/create` call.  # noqa: E501

        :return: The redirect_uri of this LinkTokenGetMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this LinkTokenGetMetadataResponse.

        The `redirect_uri` specified in the `/link/token/create` call.  # noqa: E501

        :param redirect_uri: The redirect_uri of this LinkTokenGetMetadataResponse.  # noqa: E501
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri

    @property
    def client_name(self):
        """Gets the client_name of this LinkTokenGetMetadataResponse.  # noqa: E501

        The `client_name` specified in the `/link/token/create` call.  # noqa: E501

        :return: The client_name of this LinkTokenGetMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this LinkTokenGetMetadataResponse.

        The `client_name` specified in the `/link/token/create` call.  # noqa: E501

        :param client_name: The client_name of this LinkTokenGetMetadataResponse.  # noqa: E501
        :type client_name: str
        """

        self._client_name = client_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkTokenGetMetadataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LinkTokenGetMetadataResponse):
            return True

        return self.to_dict() != other.to_dict()
