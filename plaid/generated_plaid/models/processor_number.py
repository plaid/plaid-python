# coding: utf-8

"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from plaid.generated_plaid.configuration import Configuration


class ProcessorNumber(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ach': 'NumbersACH',
        'eft': 'NumbersEFT',
        'international': 'NumbersInternational',
        'bacs': 'NumbersBACS'
    }

    attribute_map = {
        'ach': 'ach',
        'eft': 'eft',
        'international': 'international',
        'bacs': 'bacs'
    }

    def __init__(self, ach=None, eft=None, international=None, bacs=None, local_vars_configuration=None):  # noqa: E501
        """ProcessorNumber - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ach = None
        self._eft = None
        self._international = None
        self._bacs = None
        self.discriminator = None

        self.ach = ach
        self.eft = eft
        self.international = international
        self.bacs = bacs

    @property
    def ach(self):
        """Gets the ach of this ProcessorNumber.  # noqa: E501


        :return: The ach of this ProcessorNumber.  # noqa: E501
        :rtype: NumbersACH
        """
        return self._ach

    @ach.setter
    def ach(self, ach):
        """Sets the ach of this ProcessorNumber.


        :param ach: The ach of this ProcessorNumber.  # noqa: E501
        :type ach: NumbersACH
        """

        self._ach = ach

    @property
    def eft(self):
        """Gets the eft of this ProcessorNumber.  # noqa: E501


        :return: The eft of this ProcessorNumber.  # noqa: E501
        :rtype: NumbersEFT
        """
        return self._eft

    @eft.setter
    def eft(self, eft):
        """Sets the eft of this ProcessorNumber.


        :param eft: The eft of this ProcessorNumber.  # noqa: E501
        :type eft: NumbersEFT
        """

        self._eft = eft

    @property
    def international(self):
        """Gets the international of this ProcessorNumber.  # noqa: E501


        :return: The international of this ProcessorNumber.  # noqa: E501
        :rtype: NumbersInternational
        """
        return self._international

    @international.setter
    def international(self, international):
        """Sets the international of this ProcessorNumber.


        :param international: The international of this ProcessorNumber.  # noqa: E501
        :type international: NumbersInternational
        """

        self._international = international

    @property
    def bacs(self):
        """Gets the bacs of this ProcessorNumber.  # noqa: E501


        :return: The bacs of this ProcessorNumber.  # noqa: E501
        :rtype: NumbersBACS
        """
        return self._bacs

    @bacs.setter
    def bacs(self, bacs):
        """Sets the bacs of this ProcessorNumber.


        :param bacs: The bacs of this ProcessorNumber.  # noqa: E501
        :type bacs: NumbersBACS
        """

        self._bacs = bacs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessorNumber):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProcessorNumber):
            return True

        return self.to_dict() != other.to_dict()
