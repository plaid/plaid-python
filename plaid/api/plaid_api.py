"""
    The Plaid API

    The Plaid REST API. Please see https://plaid.com/docs/api for more details.  # noqa: E501

    The version of the OpenAPI document: 2020-09-14_1.517.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plaid.api_client import ApiClient, Endpoint as _Endpoint
from plaid.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plaid.model.accounts_balance_get_request import AccountsBalanceGetRequest
from plaid.model.accounts_get_request import AccountsGetRequest
from plaid.model.accounts_get_response import AccountsGetResponse
from plaid.model.application_get_request import ApplicationGetRequest
from plaid.model.application_get_response import ApplicationGetResponse
from plaid.model.asset_report_audit_copy_create_request import AssetReportAuditCopyCreateRequest
from plaid.model.asset_report_audit_copy_create_response import AssetReportAuditCopyCreateResponse
from plaid.model.asset_report_audit_copy_get_request import AssetReportAuditCopyGetRequest
from plaid.model.asset_report_audit_copy_remove_request import AssetReportAuditCopyRemoveRequest
from plaid.model.asset_report_audit_copy_remove_response import AssetReportAuditCopyRemoveResponse
from plaid.model.asset_report_create_request import AssetReportCreateRequest
from plaid.model.asset_report_create_response import AssetReportCreateResponse
from plaid.model.asset_report_filter_request import AssetReportFilterRequest
from plaid.model.asset_report_filter_response import AssetReportFilterResponse
from plaid.model.asset_report_freddie_get_request import AssetReportFreddieGetRequest
from plaid.model.asset_report_freddie_get_response import AssetReportFreddieGetResponse
from plaid.model.asset_report_get_request import AssetReportGetRequest
from plaid.model.asset_report_get_response import AssetReportGetResponse
from plaid.model.asset_report_pdf_get_request import AssetReportPDFGetRequest
from plaid.model.asset_report_refresh_request import AssetReportRefreshRequest
from plaid.model.asset_report_refresh_response import AssetReportRefreshResponse
from plaid.model.asset_report_remove_request import AssetReportRemoveRequest
from plaid.model.asset_report_remove_response import AssetReportRemoveResponse
from plaid.model.auth_get_request import AuthGetRequest
from plaid.model.auth_get_response import AuthGetResponse
from plaid.model.bank_transfer_balance_get_request import BankTransferBalanceGetRequest
from plaid.model.bank_transfer_balance_get_response import BankTransferBalanceGetResponse
from plaid.model.bank_transfer_cancel_request import BankTransferCancelRequest
from plaid.model.bank_transfer_cancel_response import BankTransferCancelResponse
from plaid.model.bank_transfer_create_request import BankTransferCreateRequest
from plaid.model.bank_transfer_create_response import BankTransferCreateResponse
from plaid.model.bank_transfer_event_list_request import BankTransferEventListRequest
from plaid.model.bank_transfer_event_list_response import BankTransferEventListResponse
from plaid.model.bank_transfer_event_sync_request import BankTransferEventSyncRequest
from plaid.model.bank_transfer_event_sync_response import BankTransferEventSyncResponse
from plaid.model.bank_transfer_get_request import BankTransferGetRequest
from plaid.model.bank_transfer_get_response import BankTransferGetResponse
from plaid.model.bank_transfer_list_request import BankTransferListRequest
from plaid.model.bank_transfer_list_response import BankTransferListResponse
from plaid.model.bank_transfer_migrate_account_request import BankTransferMigrateAccountRequest
from plaid.model.bank_transfer_migrate_account_response import BankTransferMigrateAccountResponse
from plaid.model.bank_transfer_sweep_get_request import BankTransferSweepGetRequest
from plaid.model.bank_transfer_sweep_get_response import BankTransferSweepGetResponse
from plaid.model.bank_transfer_sweep_list_request import BankTransferSweepListRequest
from plaid.model.bank_transfer_sweep_list_response import BankTransferSweepListResponse
from plaid.model.base_report_create_request import BaseReportCreateRequest
from plaid.model.base_report_create_response import BaseReportCreateResponse
from plaid.model.base_report_get_request import BaseReportGetRequest
from plaid.model.base_report_get_response import BaseReportGetResponse
from plaid.model.beacon_account_risk_evaluate_request import BeaconAccountRiskEvaluateRequest
from plaid.model.beacon_account_risk_evaluate_response import BeaconAccountRiskEvaluateResponse
from plaid.model.beacon_duplicate_get_request import BeaconDuplicateGetRequest
from plaid.model.beacon_duplicate_get_response import BeaconDuplicateGetResponse
from plaid.model.beacon_report_create_request import BeaconReportCreateRequest
from plaid.model.beacon_report_create_response import BeaconReportCreateResponse
from plaid.model.beacon_report_get_request import BeaconReportGetRequest
from plaid.model.beacon_report_get_response import BeaconReportGetResponse
from plaid.model.beacon_report_list_request import BeaconReportListRequest
from plaid.model.beacon_report_list_response import BeaconReportListResponse
from plaid.model.beacon_report_syndication_get_request import BeaconReportSyndicationGetRequest
from plaid.model.beacon_report_syndication_get_response import BeaconReportSyndicationGetResponse
from plaid.model.beacon_report_syndication_list_request import BeaconReportSyndicationListRequest
from plaid.model.beacon_report_syndication_list_response import BeaconReportSyndicationListResponse
from plaid.model.beacon_user_create_request import BeaconUserCreateRequest
from plaid.model.beacon_user_create_response import BeaconUserCreateResponse
from plaid.model.beacon_user_get_request import BeaconUserGetRequest
from plaid.model.beacon_user_get_response import BeaconUserGetResponse
from plaid.model.beacon_user_history_list_request import BeaconUserHistoryListRequest
from plaid.model.beacon_user_history_list_response import BeaconUserHistoryListResponse
from plaid.model.beacon_user_review_request import BeaconUserReviewRequest
from plaid.model.beacon_user_update_request import BeaconUserUpdateRequest
from plaid.model.beacon_user_update_response import BeaconUserUpdateResponse
from plaid.model.cra_loans_register_request import CRALoansRegisterRequest
from plaid.model.categories_get_response import CategoriesGetResponse
from plaid.model.consumer_report_pdf_get_request import ConsumerReportPDFGetRequest
from plaid.model.cra_bank_income_create_request import CraBankIncomeCreateRequest
from plaid.model.cra_bank_income_create_response import CraBankIncomeCreateResponse
from plaid.model.cra_bank_income_get_request import CraBankIncomeGetRequest
from plaid.model.cra_bank_income_get_response import CraBankIncomeGetResponse
from plaid.model.cra_loan_unregister_response import CraLoanUnregisterResponse
from plaid.model.cra_loans_applications_register_request import CraLoansApplicationsRegisterRequest
from plaid.model.cra_loans_applications_register_response import CraLoansApplicationsRegisterResponse
from plaid.model.cra_loans_register_response import CraLoansRegisterResponse
from plaid.model.cra_loans_unregister_request import CraLoansUnregisterRequest
from plaid.model.cra_loans_update_request import CraLoansUpdateRequest
from plaid.model.cra_loans_update_response import CraLoansUpdateResponse
from plaid.model.cra_partner_insights_get_request import CraPartnerInsightsGetRequest
from plaid.model.cra_partner_insights_get_response import CraPartnerInsightsGetResponse
from plaid.model.credit_audit_copy_token_create_request import CreditAuditCopyTokenCreateRequest
from plaid.model.credit_audit_copy_token_create_response import CreditAuditCopyTokenCreateResponse
from plaid.model.credit_audit_copy_token_remove_request import CreditAuditCopyTokenRemoveRequest
from plaid.model.credit_audit_copy_token_remove_response import CreditAuditCopyTokenRemoveResponse
from plaid.model.credit_audit_copy_token_update_request import CreditAuditCopyTokenUpdateRequest
from plaid.model.credit_audit_copy_token_update_response import CreditAuditCopyTokenUpdateResponse
from plaid.model.credit_bank_employment_get_request import CreditBankEmploymentGetRequest
from plaid.model.credit_bank_employment_get_response import CreditBankEmploymentGetResponse
from plaid.model.credit_bank_income_get_request import CreditBankIncomeGetRequest
from plaid.model.credit_bank_income_get_response import CreditBankIncomeGetResponse
from plaid.model.credit_bank_income_pdf_get_request import CreditBankIncomePDFGetRequest
from plaid.model.credit_bank_income_refresh_request import CreditBankIncomeRefreshRequest
from plaid.model.credit_bank_income_refresh_response import CreditBankIncomeRefreshResponse
from plaid.model.credit_bank_income_webhook_update_request import CreditBankIncomeWebhookUpdateRequest
from plaid.model.credit_bank_income_webhook_update_response import CreditBankIncomeWebhookUpdateResponse
from plaid.model.credit_bank_statements_uploads_get_request import CreditBankStatementsUploadsGetRequest
from plaid.model.credit_bank_statements_uploads_get_response import CreditBankStatementsUploadsGetResponse
from plaid.model.credit_employment_get_request import CreditEmploymentGetRequest
from plaid.model.credit_employment_get_response import CreditEmploymentGetResponse
from plaid.model.credit_freddie_mac_reports_get_request import CreditFreddieMacReportsGetRequest
from plaid.model.credit_freddie_mac_reports_get_response import CreditFreddieMacReportsGetResponse
from plaid.model.credit_payroll_income_get_request import CreditPayrollIncomeGetRequest
from plaid.model.credit_payroll_income_get_response import CreditPayrollIncomeGetResponse
from plaid.model.credit_payroll_income_parsing_config_update_request import CreditPayrollIncomeParsingConfigUpdateRequest
from plaid.model.credit_payroll_income_parsing_config_update_response import CreditPayrollIncomeParsingConfigUpdateResponse
from plaid.model.credit_payroll_income_precheck_request import CreditPayrollIncomePrecheckRequest
from plaid.model.credit_payroll_income_precheck_response import CreditPayrollIncomePrecheckResponse
from plaid.model.credit_payroll_income_refresh_request import CreditPayrollIncomeRefreshRequest
from plaid.model.credit_payroll_income_refresh_response import CreditPayrollIncomeRefreshResponse
from plaid.model.credit_payroll_income_risk_signals_get_request import CreditPayrollIncomeRiskSignalsGetRequest
from plaid.model.credit_payroll_income_risk_signals_get_response import CreditPayrollIncomeRiskSignalsGetResponse
from plaid.model.credit_relay_create_request import CreditRelayCreateRequest
from plaid.model.credit_relay_create_response import CreditRelayCreateResponse
from plaid.model.credit_relay_get_request import CreditRelayGetRequest
from plaid.model.credit_relay_pdf_get_request import CreditRelayPDFGetRequest
from plaid.model.credit_relay_refresh_request import CreditRelayRefreshRequest
from plaid.model.credit_relay_refresh_response import CreditRelayRefreshResponse
from plaid.model.credit_relay_remove_request import CreditRelayRemoveRequest
from plaid.model.credit_relay_remove_response import CreditRelayRemoveResponse
from plaid.model.credit_sessions_get_request import CreditSessionsGetRequest
from plaid.model.credit_sessions_get_response import CreditSessionsGetResponse
from plaid.model.dashboard_user_get_request import DashboardUserGetRequest
from plaid.model.dashboard_user_get_response import DashboardUserGetResponse
from plaid.model.dashboard_user_list_request import DashboardUserListRequest
from plaid.model.dashboard_user_list_response import DashboardUserListResponse
from plaid.model.deposit_switch_alt_create_request import DepositSwitchAltCreateRequest
from plaid.model.deposit_switch_alt_create_response import DepositSwitchAltCreateResponse
from plaid.model.deposit_switch_create_request import DepositSwitchCreateRequest
from plaid.model.deposit_switch_create_response import DepositSwitchCreateResponse
from plaid.model.deposit_switch_get_request import DepositSwitchGetRequest
from plaid.model.deposit_switch_get_response import DepositSwitchGetResponse
from plaid.model.deposit_switch_token_create_request import DepositSwitchTokenCreateRequest
from plaid.model.deposit_switch_token_create_response import DepositSwitchTokenCreateResponse
from plaid.model.employers_search_request import EmployersSearchRequest
from plaid.model.employers_search_response import EmployersSearchResponse
from plaid.model.employment_verification_get_request import EmploymentVerificationGetRequest
from plaid.model.employment_verification_get_response import EmploymentVerificationGetResponse
from plaid.model.fdx_notification import FDXNotification
from plaid.model.identity_documents_uploads_get_request import IdentityDocumentsUploadsGetRequest
from plaid.model.identity_documents_uploads_get_response import IdentityDocumentsUploadsGetResponse
from plaid.model.identity_get_request import IdentityGetRequest
from plaid.model.identity_get_response import IdentityGetResponse
from plaid.model.identity_match_request import IdentityMatchRequest
from plaid.model.identity_match_response import IdentityMatchResponse
from plaid.model.identity_refresh_request import IdentityRefreshRequest
from plaid.model.identity_refresh_response import IdentityRefreshResponse
from plaid.model.identity_verification_autofill_create_request import IdentityVerificationAutofillCreateRequest
from plaid.model.identity_verification_autofill_create_response import IdentityVerificationAutofillCreateResponse
from plaid.model.identity_verification_create_request import IdentityVerificationCreateRequest
from plaid.model.identity_verification_create_response import IdentityVerificationCreateResponse
from plaid.model.identity_verification_get_request import IdentityVerificationGetRequest
from plaid.model.identity_verification_get_response import IdentityVerificationGetResponse
from plaid.model.identity_verification_list_request import IdentityVerificationListRequest
from plaid.model.identity_verification_list_response import IdentityVerificationListResponse
from plaid.model.identity_verification_retry_request import IdentityVerificationRetryRequest
from plaid.model.identity_verification_retry_response import IdentityVerificationRetryResponse
from plaid.model.income_verification_create_request import IncomeVerificationCreateRequest
from plaid.model.income_verification_create_response import IncomeVerificationCreateResponse
from plaid.model.income_verification_documents_download_request import IncomeVerificationDocumentsDownloadRequest
from plaid.model.income_verification_paystubs_get_request import IncomeVerificationPaystubsGetRequest
from plaid.model.income_verification_paystubs_get_response import IncomeVerificationPaystubsGetResponse
from plaid.model.income_verification_precheck_request import IncomeVerificationPrecheckRequest
from plaid.model.income_verification_precheck_response import IncomeVerificationPrecheckResponse
from plaid.model.income_verification_taxforms_get_request import IncomeVerificationTaxformsGetRequest
from plaid.model.income_verification_taxforms_get_response import IncomeVerificationTaxformsGetResponse
from plaid.model.institutions_get_by_id_request import InstitutionsGetByIdRequest
from plaid.model.institutions_get_by_id_response import InstitutionsGetByIdResponse
from plaid.model.institutions_get_request import InstitutionsGetRequest
from plaid.model.institutions_get_response import InstitutionsGetResponse
from plaid.model.institutions_search_request import InstitutionsSearchRequest
from plaid.model.institutions_search_response import InstitutionsSearchResponse
from plaid.model.investments_auth_get_request import InvestmentsAuthGetRequest
from plaid.model.investments_auth_get_response import InvestmentsAuthGetResponse
from plaid.model.investments_holdings_get_request import InvestmentsHoldingsGetRequest
from plaid.model.investments_holdings_get_response import InvestmentsHoldingsGetResponse
from plaid.model.investments_refresh_request import InvestmentsRefreshRequest
from plaid.model.investments_refresh_response import InvestmentsRefreshResponse
from plaid.model.investments_transactions_get_request import InvestmentsTransactionsGetRequest
from plaid.model.investments_transactions_get_response import InvestmentsTransactionsGetResponse
from plaid.model.item_access_token_invalidate_request import ItemAccessTokenInvalidateRequest
from plaid.model.item_access_token_invalidate_response import ItemAccessTokenInvalidateResponse
from plaid.model.item_activity_list_request import ItemActivityListRequest
from plaid.model.item_activity_list_response import ItemActivityListResponse
from plaid.model.item_application_list_request import ItemApplicationListRequest
from plaid.model.item_application_list_response import ItemApplicationListResponse
from plaid.model.item_application_scopes_update_request import ItemApplicationScopesUpdateRequest
from plaid.model.item_application_scopes_update_response import ItemApplicationScopesUpdateResponse
from plaid.model.item_application_unlink_request import ItemApplicationUnlinkRequest
from plaid.model.item_application_unlink_response import ItemApplicationUnlinkResponse
from plaid.model.item_get_request import ItemGetRequest
from plaid.model.item_get_response import ItemGetResponse
from plaid.model.item_import_request import ItemImportRequest
from plaid.model.item_import_response import ItemImportResponse
from plaid.model.item_public_token_create_request import ItemPublicTokenCreateRequest
from plaid.model.item_public_token_create_response import ItemPublicTokenCreateResponse
from plaid.model.item_public_token_exchange_request import ItemPublicTokenExchangeRequest
from plaid.model.item_public_token_exchange_response import ItemPublicTokenExchangeResponse
from plaid.model.item_remove_request import ItemRemoveRequest
from plaid.model.item_remove_response import ItemRemoveResponse
from plaid.model.item_webhook_update_request import ItemWebhookUpdateRequest
from plaid.model.item_webhook_update_response import ItemWebhookUpdateResponse
from plaid.model.liabilities_get_request import LiabilitiesGetRequest
from plaid.model.liabilities_get_response import LiabilitiesGetResponse
from plaid.model.link_delivery_create_request import LinkDeliveryCreateRequest
from plaid.model.link_delivery_create_response import LinkDeliveryCreateResponse
from plaid.model.link_delivery_get_request import LinkDeliveryGetRequest
from plaid.model.link_delivery_get_response import LinkDeliveryGetResponse
from plaid.model.link_o_auth_correlation_id_exchange_request import LinkOAuthCorrelationIdExchangeRequest
from plaid.model.link_o_auth_correlation_id_exchange_response import LinkOAuthCorrelationIdExchangeResponse
from plaid.model.link_profile_eligibility_check_request import LinkProfileEligibilityCheckRequest
from plaid.model.link_profile_eligibility_check_response import LinkProfileEligibilityCheckResponse
from plaid.model.link_token_create_request import LinkTokenCreateRequest
from plaid.model.link_token_create_response import LinkTokenCreateResponse
from plaid.model.link_token_get_request import LinkTokenGetRequest
from plaid.model.link_token_get_response import LinkTokenGetResponse
from plaid.model.partner_customer_create_request import PartnerCustomerCreateRequest
from plaid.model.partner_customer_create_response import PartnerCustomerCreateResponse
from plaid.model.partner_customer_enable_request import PartnerCustomerEnableRequest
from plaid.model.partner_customer_enable_response import PartnerCustomerEnableResponse
from plaid.model.partner_customer_get_request import PartnerCustomerGetRequest
from plaid.model.partner_customer_get_response import PartnerCustomerGetResponse
from plaid.model.partner_customer_o_auth_institutions_get_request import PartnerCustomerOAuthInstitutionsGetRequest
from plaid.model.partner_customer_o_auth_institutions_get_response import PartnerCustomerOAuthInstitutionsGetResponse
from plaid.model.partner_customer_remove_request import PartnerCustomerRemoveRequest
from plaid.model.partner_customer_remove_response import PartnerCustomerRemoveResponse
from plaid.model.payment_initiation_consent_create_request import PaymentInitiationConsentCreateRequest
from plaid.model.payment_initiation_consent_create_response import PaymentInitiationConsentCreateResponse
from plaid.model.payment_initiation_consent_get_request import PaymentInitiationConsentGetRequest
from plaid.model.payment_initiation_consent_get_response import PaymentInitiationConsentGetResponse
from plaid.model.payment_initiation_consent_payment_execute_request import PaymentInitiationConsentPaymentExecuteRequest
from plaid.model.payment_initiation_consent_payment_execute_response import PaymentInitiationConsentPaymentExecuteResponse
from plaid.model.payment_initiation_consent_revoke_request import PaymentInitiationConsentRevokeRequest
from plaid.model.payment_initiation_consent_revoke_response import PaymentInitiationConsentRevokeResponse
from plaid.model.payment_initiation_payment_create_request import PaymentInitiationPaymentCreateRequest
from plaid.model.payment_initiation_payment_create_response import PaymentInitiationPaymentCreateResponse
from plaid.model.payment_initiation_payment_get_request import PaymentInitiationPaymentGetRequest
from plaid.model.payment_initiation_payment_get_response import PaymentInitiationPaymentGetResponse
from plaid.model.payment_initiation_payment_list_request import PaymentInitiationPaymentListRequest
from plaid.model.payment_initiation_payment_list_response import PaymentInitiationPaymentListResponse
from plaid.model.payment_initiation_payment_reverse_request import PaymentInitiationPaymentReverseRequest
from plaid.model.payment_initiation_payment_reverse_response import PaymentInitiationPaymentReverseResponse
from plaid.model.payment_initiation_payment_token_create_request import PaymentInitiationPaymentTokenCreateRequest
from plaid.model.payment_initiation_payment_token_create_response import PaymentInitiationPaymentTokenCreateResponse
from plaid.model.payment_initiation_recipient_create_request import PaymentInitiationRecipientCreateRequest
from plaid.model.payment_initiation_recipient_create_response import PaymentInitiationRecipientCreateResponse
from plaid.model.payment_initiation_recipient_get_request import PaymentInitiationRecipientGetRequest
from plaid.model.payment_initiation_recipient_get_response import PaymentInitiationRecipientGetResponse
from plaid.model.payment_initiation_recipient_list_request import PaymentInitiationRecipientListRequest
from plaid.model.payment_initiation_recipient_list_response import PaymentInitiationRecipientListResponse
from plaid.model.payment_profile_create_request import PaymentProfileCreateRequest
from plaid.model.payment_profile_create_response import PaymentProfileCreateResponse
from plaid.model.payment_profile_get_request import PaymentProfileGetRequest
from plaid.model.payment_profile_get_response import PaymentProfileGetResponse
from plaid.model.payment_profile_remove_request import PaymentProfileRemoveRequest
from plaid.model.payment_profile_remove_response import PaymentProfileRemoveResponse
from plaid.model.plaid_error import PlaidError
from plaid.model.processor_account_get_request import ProcessorAccountGetRequest
from plaid.model.processor_account_get_response import ProcessorAccountGetResponse
from plaid.model.processor_apex_processor_token_create_request import ProcessorApexProcessorTokenCreateRequest
from plaid.model.processor_auth_get_request import ProcessorAuthGetRequest
from plaid.model.processor_auth_get_response import ProcessorAuthGetResponse
from plaid.model.processor_balance_get_request import ProcessorBalanceGetRequest
from plaid.model.processor_balance_get_response import ProcessorBalanceGetResponse
from plaid.model.processor_bank_transfer_create_request import ProcessorBankTransferCreateRequest
from plaid.model.processor_bank_transfer_create_response import ProcessorBankTransferCreateResponse
from plaid.model.processor_identity_get_request import ProcessorIdentityGetRequest
from plaid.model.processor_identity_get_response import ProcessorIdentityGetResponse
from plaid.model.processor_identity_match_request import ProcessorIdentityMatchRequest
from plaid.model.processor_identity_match_response import ProcessorIdentityMatchResponse
from plaid.model.processor_liabilities_get_request import ProcessorLiabilitiesGetRequest
from plaid.model.processor_liabilities_get_response import ProcessorLiabilitiesGetResponse
from plaid.model.processor_signal_decision_report_request import ProcessorSignalDecisionReportRequest
from plaid.model.processor_signal_decision_report_response import ProcessorSignalDecisionReportResponse
from plaid.model.processor_signal_evaluate_request import ProcessorSignalEvaluateRequest
from plaid.model.processor_signal_evaluate_response import ProcessorSignalEvaluateResponse
from plaid.model.processor_signal_prepare_request import ProcessorSignalPrepareRequest
from plaid.model.processor_signal_prepare_response import ProcessorSignalPrepareResponse
from plaid.model.processor_signal_return_report_request import ProcessorSignalReturnReportRequest
from plaid.model.processor_signal_return_report_response import ProcessorSignalReturnReportResponse
from plaid.model.processor_stripe_bank_account_token_create_request import ProcessorStripeBankAccountTokenCreateRequest
from plaid.model.processor_stripe_bank_account_token_create_response import ProcessorStripeBankAccountTokenCreateResponse
from plaid.model.processor_token_create_request import ProcessorTokenCreateRequest
from plaid.model.processor_token_create_response import ProcessorTokenCreateResponse
from plaid.model.processor_token_permissions_get_request import ProcessorTokenPermissionsGetRequest
from plaid.model.processor_token_permissions_get_response import ProcessorTokenPermissionsGetResponse
from plaid.model.processor_token_permissions_set_request import ProcessorTokenPermissionsSetRequest
from plaid.model.processor_token_permissions_set_response import ProcessorTokenPermissionsSetResponse
from plaid.model.processor_token_webhook_update_request import ProcessorTokenWebhookUpdateRequest
from plaid.model.processor_token_webhook_update_response import ProcessorTokenWebhookUpdateResponse
from plaid.model.processor_transactions_get_request import ProcessorTransactionsGetRequest
from plaid.model.processor_transactions_get_response import ProcessorTransactionsGetResponse
from plaid.model.processor_transactions_recurring_get_request import ProcessorTransactionsRecurringGetRequest
from plaid.model.processor_transactions_recurring_get_response import ProcessorTransactionsRecurringGetResponse
from plaid.model.processor_transactions_refresh_request import ProcessorTransactionsRefreshRequest
from plaid.model.processor_transactions_refresh_response import ProcessorTransactionsRefreshResponse
from plaid.model.processor_transactions_sync_request import ProcessorTransactionsSyncRequest
from plaid.model.processor_transactions_sync_response import ProcessorTransactionsSyncResponse
from plaid.model.profile_get_request import ProfileGetRequest
from plaid.model.profile_get_response import ProfileGetResponse
from plaid.model.sandbox_bank_income_fire_webhook_request import SandboxBankIncomeFireWebhookRequest
from plaid.model.sandbox_bank_income_fire_webhook_response import SandboxBankIncomeFireWebhookResponse
from plaid.model.sandbox_bank_transfer_fire_webhook_request import SandboxBankTransferFireWebhookRequest
from plaid.model.sandbox_bank_transfer_fire_webhook_response import SandboxBankTransferFireWebhookResponse
from plaid.model.sandbox_bank_transfer_simulate_request import SandboxBankTransferSimulateRequest
from plaid.model.sandbox_bank_transfer_simulate_response import SandboxBankTransferSimulateResponse
from plaid.model.sandbox_income_fire_webhook_request import SandboxIncomeFireWebhookRequest
from plaid.model.sandbox_income_fire_webhook_response import SandboxIncomeFireWebhookResponse
from plaid.model.sandbox_item_fire_webhook_request import SandboxItemFireWebhookRequest
from plaid.model.sandbox_item_fire_webhook_response import SandboxItemFireWebhookResponse
from plaid.model.sandbox_item_reset_login_request import SandboxItemResetLoginRequest
from plaid.model.sandbox_item_reset_login_response import SandboxItemResetLoginResponse
from plaid.model.sandbox_item_set_verification_status_request import SandboxItemSetVerificationStatusRequest
from plaid.model.sandbox_item_set_verification_status_response import SandboxItemSetVerificationStatusResponse
from plaid.model.sandbox_oauth_select_accounts_request import SandboxOauthSelectAccountsRequest
from plaid.model.sandbox_oauth_select_accounts_response import SandboxOauthSelectAccountsResponse
from plaid.model.sandbox_payment_profile_reset_login_request import SandboxPaymentProfileResetLoginRequest
from plaid.model.sandbox_payment_profile_reset_login_response import SandboxPaymentProfileResetLoginResponse
from plaid.model.sandbox_processor_token_create_request import SandboxProcessorTokenCreateRequest
from plaid.model.sandbox_processor_token_create_response import SandboxProcessorTokenCreateResponse
from plaid.model.sandbox_public_token_create_request import SandboxPublicTokenCreateRequest
from plaid.model.sandbox_public_token_create_response import SandboxPublicTokenCreateResponse
from plaid.model.sandbox_transfer_fire_webhook_request import SandboxTransferFireWebhookRequest
from plaid.model.sandbox_transfer_fire_webhook_response import SandboxTransferFireWebhookResponse
from plaid.model.sandbox_transfer_ledger_deposit_simulate_request import SandboxTransferLedgerDepositSimulateRequest
from plaid.model.sandbox_transfer_ledger_deposit_simulate_response import SandboxTransferLedgerDepositSimulateResponse
from plaid.model.sandbox_transfer_ledger_simulate_available_request import SandboxTransferLedgerSimulateAvailableRequest
from plaid.model.sandbox_transfer_ledger_simulate_available_response import SandboxTransferLedgerSimulateAvailableResponse
from plaid.model.sandbox_transfer_ledger_withdraw_simulate_request import SandboxTransferLedgerWithdrawSimulateRequest
from plaid.model.sandbox_transfer_ledger_withdraw_simulate_response import SandboxTransferLedgerWithdrawSimulateResponse
from plaid.model.sandbox_transfer_refund_simulate_request import SandboxTransferRefundSimulateRequest
from plaid.model.sandbox_transfer_refund_simulate_response import SandboxTransferRefundSimulateResponse
from plaid.model.sandbox_transfer_repayment_simulate_request import SandboxTransferRepaymentSimulateRequest
from plaid.model.sandbox_transfer_repayment_simulate_response import SandboxTransferRepaymentSimulateResponse
from plaid.model.sandbox_transfer_simulate_request import SandboxTransferSimulateRequest
from plaid.model.sandbox_transfer_simulate_response import SandboxTransferSimulateResponse
from plaid.model.sandbox_transfer_sweep_simulate_request import SandboxTransferSweepSimulateRequest
from plaid.model.sandbox_transfer_sweep_simulate_response import SandboxTransferSweepSimulateResponse
from plaid.model.sandbox_transfer_test_clock_advance_request import SandboxTransferTestClockAdvanceRequest
from plaid.model.sandbox_transfer_test_clock_advance_response import SandboxTransferTestClockAdvanceResponse
from plaid.model.sandbox_transfer_test_clock_create_request import SandboxTransferTestClockCreateRequest
from plaid.model.sandbox_transfer_test_clock_create_response import SandboxTransferTestClockCreateResponse
from plaid.model.sandbox_transfer_test_clock_get_request import SandboxTransferTestClockGetRequest
from plaid.model.sandbox_transfer_test_clock_get_response import SandboxTransferTestClockGetResponse
from plaid.model.sandbox_transfer_test_clock_list_request import SandboxTransferTestClockListRequest
from plaid.model.sandbox_transfer_test_clock_list_response import SandboxTransferTestClockListResponse
from plaid.model.signal_decision_report_request import SignalDecisionReportRequest
from plaid.model.signal_decision_report_response import SignalDecisionReportResponse
from plaid.model.signal_evaluate_request import SignalEvaluateRequest
from plaid.model.signal_evaluate_response import SignalEvaluateResponse
from plaid.model.signal_prepare_request import SignalPrepareRequest
from plaid.model.signal_prepare_response import SignalPrepareResponse
from plaid.model.signal_return_report_request import SignalReturnReportRequest
from plaid.model.signal_return_report_response import SignalReturnReportResponse
from plaid.model.statements_download_request import StatementsDownloadRequest
from plaid.model.statements_list_request import StatementsListRequest
from plaid.model.statements_list_response import StatementsListResponse
from plaid.model.statements_refresh_request import StatementsRefreshRequest
from plaid.model.statements_refresh_response import StatementsRefreshResponse
from plaid.model.transactions_enhance_get_request import TransactionsEnhanceGetRequest
from plaid.model.transactions_enhance_get_response import TransactionsEnhanceGetResponse
from plaid.model.transactions_enrich_request import TransactionsEnrichRequest
from plaid.model.transactions_enrich_response import TransactionsEnrichResponse
from plaid.model.transactions_get_request import TransactionsGetRequest
from plaid.model.transactions_get_response import TransactionsGetResponse
from plaid.model.transactions_recurring_get_request import TransactionsRecurringGetRequest
from plaid.model.transactions_recurring_get_response import TransactionsRecurringGetResponse
from plaid.model.transactions_refresh_request import TransactionsRefreshRequest
from plaid.model.transactions_refresh_response import TransactionsRefreshResponse
from plaid.model.transactions_rules_create_request import TransactionsRulesCreateRequest
from plaid.model.transactions_rules_create_response import TransactionsRulesCreateResponse
from plaid.model.transactions_rules_list_request import TransactionsRulesListRequest
from plaid.model.transactions_rules_list_response import TransactionsRulesListResponse
from plaid.model.transactions_rules_remove_request import TransactionsRulesRemoveRequest
from plaid.model.transactions_rules_remove_response import TransactionsRulesRemoveResponse
from plaid.model.transactions_sync_request import TransactionsSyncRequest
from plaid.model.transactions_sync_response import TransactionsSyncResponse
from plaid.model.transactions_user_insights_get_request import TransactionsUserInsightsGetRequest
from plaid.model.transactions_user_insights_get_response import TransactionsUserInsightsGetResponse
from plaid.model.transfer_authorization_cancel_request import TransferAuthorizationCancelRequest
from plaid.model.transfer_authorization_cancel_response import TransferAuthorizationCancelResponse
from plaid.model.transfer_authorization_create_request import TransferAuthorizationCreateRequest
from plaid.model.transfer_authorization_create_response import TransferAuthorizationCreateResponse
from plaid.model.transfer_balance_get_request import TransferBalanceGetRequest
from plaid.model.transfer_balance_get_response import TransferBalanceGetResponse
from plaid.model.transfer_cancel_request import TransferCancelRequest
from plaid.model.transfer_cancel_response import TransferCancelResponse
from plaid.model.transfer_capabilities_get_request import TransferCapabilitiesGetRequest
from plaid.model.transfer_capabilities_get_response import TransferCapabilitiesGetResponse
from plaid.model.transfer_configuration_get_request import TransferConfigurationGetRequest
from plaid.model.transfer_configuration_get_response import TransferConfigurationGetResponse
from plaid.model.transfer_create_request import TransferCreateRequest
from plaid.model.transfer_create_response import TransferCreateResponse
from plaid.model.transfer_diligence_document_upload_request import TransferDiligenceDocumentUploadRequest
from plaid.model.transfer_diligence_document_upload_response import TransferDiligenceDocumentUploadResponse
from plaid.model.transfer_diligence_submit_request import TransferDiligenceSubmitRequest
from plaid.model.transfer_diligence_submit_response import TransferDiligenceSubmitResponse
from plaid.model.transfer_event_list_request import TransferEventListRequest
from plaid.model.transfer_event_list_response import TransferEventListResponse
from plaid.model.transfer_event_sync_request import TransferEventSyncRequest
from plaid.model.transfer_event_sync_response import TransferEventSyncResponse
from plaid.model.transfer_get_request import TransferGetRequest
from plaid.model.transfer_get_response import TransferGetResponse
from plaid.model.transfer_intent_create_request import TransferIntentCreateRequest
from plaid.model.transfer_intent_create_response import TransferIntentCreateResponse
from plaid.model.transfer_intent_get_request import TransferIntentGetRequest
from plaid.model.transfer_intent_get_response import TransferIntentGetResponse
from plaid.model.transfer_ledger_deposit_request import TransferLedgerDepositRequest
from plaid.model.transfer_ledger_deposit_response import TransferLedgerDepositResponse
from plaid.model.transfer_ledger_distribute_request import TransferLedgerDistributeRequest
from plaid.model.transfer_ledger_distribute_response import TransferLedgerDistributeResponse
from plaid.model.transfer_ledger_get_request import TransferLedgerGetRequest
from plaid.model.transfer_ledger_get_response import TransferLedgerGetResponse
from plaid.model.transfer_ledger_withdraw_request import TransferLedgerWithdrawRequest
from plaid.model.transfer_ledger_withdraw_response import TransferLedgerWithdrawResponse
from plaid.model.transfer_list_request import TransferListRequest
from plaid.model.transfer_list_response import TransferListResponse
from plaid.model.transfer_metrics_get_request import TransferMetricsGetRequest
from plaid.model.transfer_metrics_get_response import TransferMetricsGetResponse
from plaid.model.transfer_migrate_account_request import TransferMigrateAccountRequest
from plaid.model.transfer_migrate_account_response import TransferMigrateAccountResponse
from plaid.model.transfer_originator_create_request import TransferOriginatorCreateRequest
from plaid.model.transfer_originator_create_response import TransferOriginatorCreateResponse
from plaid.model.transfer_originator_funding_account_update_request import TransferOriginatorFundingAccountUpdateRequest
from plaid.model.transfer_originator_funding_account_update_response import TransferOriginatorFundingAccountUpdateResponse
from plaid.model.transfer_originator_get_request import TransferOriginatorGetRequest
from plaid.model.transfer_originator_get_response import TransferOriginatorGetResponse
from plaid.model.transfer_originator_list_request import TransferOriginatorListRequest
from plaid.model.transfer_originator_list_response import TransferOriginatorListResponse
from plaid.model.transfer_questionnaire_create_request import TransferQuestionnaireCreateRequest
from plaid.model.transfer_questionnaire_create_response import TransferQuestionnaireCreateResponse
from plaid.model.transfer_recurring_cancel_request import TransferRecurringCancelRequest
from plaid.model.transfer_recurring_cancel_response import TransferRecurringCancelResponse
from plaid.model.transfer_recurring_create_request import TransferRecurringCreateRequest
from plaid.model.transfer_recurring_create_response import TransferRecurringCreateResponse
from plaid.model.transfer_recurring_get_request import TransferRecurringGetRequest
from plaid.model.transfer_recurring_get_response import TransferRecurringGetResponse
from plaid.model.transfer_recurring_list_request import TransferRecurringListRequest
from plaid.model.transfer_recurring_list_response import TransferRecurringListResponse
from plaid.model.transfer_refund_cancel_request import TransferRefundCancelRequest
from plaid.model.transfer_refund_cancel_response import TransferRefundCancelResponse
from plaid.model.transfer_refund_create_request import TransferRefundCreateRequest
from plaid.model.transfer_refund_create_response import TransferRefundCreateResponse
from plaid.model.transfer_refund_get_request import TransferRefundGetRequest
from plaid.model.transfer_refund_get_response import TransferRefundGetResponse
from plaid.model.transfer_repayment_list_request import TransferRepaymentListRequest
from plaid.model.transfer_repayment_list_response import TransferRepaymentListResponse
from plaid.model.transfer_repayment_return_list_request import TransferRepaymentReturnListRequest
from plaid.model.transfer_repayment_return_list_response import TransferRepaymentReturnListResponse
from plaid.model.transfer_sweep_get_request import TransferSweepGetRequest
from plaid.model.transfer_sweep_get_response import TransferSweepGetResponse
from plaid.model.transfer_sweep_list_request import TransferSweepListRequest
from plaid.model.transfer_sweep_list_response import TransferSweepListResponse
from plaid.model.user_create_request import UserCreateRequest
from plaid.model.user_create_response import UserCreateResponse
from plaid.model.user_update_request import UserUpdateRequest
from plaid.model.user_update_response import UserUpdateResponse
from plaid.model.wallet_create_request import WalletCreateRequest
from plaid.model.wallet_create_response import WalletCreateResponse
from plaid.model.wallet_get_request import WalletGetRequest
from plaid.model.wallet_get_response import WalletGetResponse
from plaid.model.wallet_list_request import WalletListRequest
from plaid.model.wallet_list_response import WalletListResponse
from plaid.model.wallet_transaction_execute_request import WalletTransactionExecuteRequest
from plaid.model.wallet_transaction_execute_response import WalletTransactionExecuteResponse
from plaid.model.wallet_transaction_get_request import WalletTransactionGetRequest
from plaid.model.wallet_transaction_get_response import WalletTransactionGetResponse
from plaid.model.wallet_transaction_list_request import WalletTransactionListRequest
from plaid.model.wallet_transaction_list_response import WalletTransactionListResponse
from plaid.model.watchlist_screening_entity_create_request import WatchlistScreeningEntityCreateRequest
from plaid.model.watchlist_screening_entity_create_response import WatchlistScreeningEntityCreateResponse
from plaid.model.watchlist_screening_entity_get_request import WatchlistScreeningEntityGetRequest
from plaid.model.watchlist_screening_entity_get_response import WatchlistScreeningEntityGetResponse
from plaid.model.watchlist_screening_entity_history_list_request import WatchlistScreeningEntityHistoryListRequest
from plaid.model.watchlist_screening_entity_history_list_response import WatchlistScreeningEntityHistoryListResponse
from plaid.model.watchlist_screening_entity_hit_list_request import WatchlistScreeningEntityHitListRequest
from plaid.model.watchlist_screening_entity_hit_list_response import WatchlistScreeningEntityHitListResponse
from plaid.model.watchlist_screening_entity_list_request import WatchlistScreeningEntityListRequest
from plaid.model.watchlist_screening_entity_list_response import WatchlistScreeningEntityListResponse
from plaid.model.watchlist_screening_entity_program_get_request import WatchlistScreeningEntityProgramGetRequest
from plaid.model.watchlist_screening_entity_program_get_response import WatchlistScreeningEntityProgramGetResponse
from plaid.model.watchlist_screening_entity_program_list_request import WatchlistScreeningEntityProgramListRequest
from plaid.model.watchlist_screening_entity_program_list_response import WatchlistScreeningEntityProgramListResponse
from plaid.model.watchlist_screening_entity_review_create_request import WatchlistScreeningEntityReviewCreateRequest
from plaid.model.watchlist_screening_entity_review_create_response import WatchlistScreeningEntityReviewCreateResponse
from plaid.model.watchlist_screening_entity_review_list_request import WatchlistScreeningEntityReviewListRequest
from plaid.model.watchlist_screening_entity_review_list_response import WatchlistScreeningEntityReviewListResponse
from plaid.model.watchlist_screening_entity_update_request import WatchlistScreeningEntityUpdateRequest
from plaid.model.watchlist_screening_entity_update_response import WatchlistScreeningEntityUpdateResponse
from plaid.model.watchlist_screening_individual_create_request import WatchlistScreeningIndividualCreateRequest
from plaid.model.watchlist_screening_individual_create_response import WatchlistScreeningIndividualCreateResponse
from plaid.model.watchlist_screening_individual_get_request import WatchlistScreeningIndividualGetRequest
from plaid.model.watchlist_screening_individual_get_response import WatchlistScreeningIndividualGetResponse
from plaid.model.watchlist_screening_individual_history_list_request import WatchlistScreeningIndividualHistoryListRequest
from plaid.model.watchlist_screening_individual_history_list_response import WatchlistScreeningIndividualHistoryListResponse
from plaid.model.watchlist_screening_individual_hit_list_request import WatchlistScreeningIndividualHitListRequest
from plaid.model.watchlist_screening_individual_hit_list_response import WatchlistScreeningIndividualHitListResponse
from plaid.model.watchlist_screening_individual_list_request import WatchlistScreeningIndividualListRequest
from plaid.model.watchlist_screening_individual_list_response import WatchlistScreeningIndividualListResponse
from plaid.model.watchlist_screening_individual_program_get_request import WatchlistScreeningIndividualProgramGetRequest
from plaid.model.watchlist_screening_individual_program_get_response import WatchlistScreeningIndividualProgramGetResponse
from plaid.model.watchlist_screening_individual_program_list_request import WatchlistScreeningIndividualProgramListRequest
from plaid.model.watchlist_screening_individual_program_list_response import WatchlistScreeningIndividualProgramListResponse
from plaid.model.watchlist_screening_individual_review_create_request import WatchlistScreeningIndividualReviewCreateRequest
from plaid.model.watchlist_screening_individual_review_create_response import WatchlistScreeningIndividualReviewCreateResponse
from plaid.model.watchlist_screening_individual_review_list_request import WatchlistScreeningIndividualReviewListRequest
from plaid.model.watchlist_screening_individual_review_list_response import WatchlistScreeningIndividualReviewListResponse
from plaid.model.watchlist_screening_individual_update_request import WatchlistScreeningIndividualUpdateRequest
from plaid.model.watchlist_screening_individual_update_response import WatchlistScreeningIndividualUpdateResponse
from plaid.model.webhook_verification_key_get_request import WebhookVerificationKeyGetRequest
from plaid.model.webhook_verification_key_get_response import WebhookVerificationKeyGetResponse


class PlaidApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.accounts_balance_get_endpoint = _Endpoint(
            settings={
                'response_type': (AccountsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/accounts/balance/get',
                'operation_id': 'accounts_balance_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'accounts_balance_get_request',
                ],
                'required': [
                    'accounts_balance_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accounts_balance_get_request':
                        (AccountsBalanceGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'accounts_balance_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.accounts_get_endpoint = _Endpoint(
            settings={
                'response_type': (AccountsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/accounts/get',
                'operation_id': 'accounts_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'accounts_get_request',
                ],
                'required': [
                    'accounts_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'accounts_get_request':
                        (AccountsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'accounts_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.application_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApplicationGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/application/get',
                'operation_id': 'application_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'application_get_request',
                ],
                'required': [
                    'application_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application_get_request':
                        (ApplicationGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'application_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_report_audit_copy_create_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportAuditCopyCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/asset_report/audit_copy/create',
                'operation_id': 'asset_report_audit_copy_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_audit_copy_create_request',
                ],
                'required': [
                    'asset_report_audit_copy_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_audit_copy_create_request':
                        (AssetReportAuditCopyCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_audit_copy_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_report_audit_copy_get_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/asset_report/audit_copy/get',
                'operation_id': 'asset_report_audit_copy_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_audit_copy_get_request',
                ],
                'required': [
                    'asset_report_audit_copy_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_audit_copy_get_request':
                        (AssetReportAuditCopyGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_audit_copy_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_report_audit_copy_remove_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportAuditCopyRemoveResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/asset_report/audit_copy/remove',
                'operation_id': 'asset_report_audit_copy_remove',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_audit_copy_remove_request',
                ],
                'required': [
                    'asset_report_audit_copy_remove_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_audit_copy_remove_request':
                        (AssetReportAuditCopyRemoveRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_audit_copy_remove_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_report_create_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/asset_report/create',
                'operation_id': 'asset_report_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_create_request',
                ],
                'required': [
                    'asset_report_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_create_request':
                        (AssetReportCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_report_filter_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportFilterResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/asset_report/filter',
                'operation_id': 'asset_report_filter',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_filter_request',
                ],
                'required': [
                    'asset_report_filter_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_filter_request':
                        (AssetReportFilterRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_filter_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_report_get_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/asset_report/get',
                'operation_id': 'asset_report_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_get_request',
                ],
                'required': [
                    'asset_report_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_get_request':
                        (AssetReportGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_report_pdf_get_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/asset_report/pdf/get',
                'operation_id': 'asset_report_pdf_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_pdf_get_request',
                ],
                'required': [
                    'asset_report_pdf_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_pdf_get_request':
                        (AssetReportPDFGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_pdf_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_report_refresh_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportRefreshResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/asset_report/refresh',
                'operation_id': 'asset_report_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_refresh_request',
                ],
                'required': [
                    'asset_report_refresh_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_refresh_request':
                        (AssetReportRefreshRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_refresh_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.asset_report_remove_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportRemoveResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/asset_report/remove',
                'operation_id': 'asset_report_remove',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_remove_request',
                ],
                'required': [
                    'asset_report_remove_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_remove_request':
                        (AssetReportRemoveRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_remove_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.auth_get_endpoint = _Endpoint(
            settings={
                'response_type': (AuthGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/auth/get',
                'operation_id': 'auth_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'auth_get_request',
                ],
                'required': [
                    'auth_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auth_get_request':
                        (AuthGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'auth_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_balance_get_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferBalanceGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/balance/get',
                'operation_id': 'bank_transfer_balance_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_balance_get_request',
                ],
                'required': [
                    'bank_transfer_balance_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_balance_get_request':
                        (BankTransferBalanceGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_balance_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_cancel_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferCancelResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/cancel',
                'operation_id': 'bank_transfer_cancel',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_cancel_request',
                ],
                'required': [
                    'bank_transfer_cancel_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_cancel_request':
                        (BankTransferCancelRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_cancel_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_create_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/create',
                'operation_id': 'bank_transfer_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_create_request',
                ],
                'required': [
                    'bank_transfer_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_create_request':
                        (BankTransferCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_event_list_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferEventListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/event/list',
                'operation_id': 'bank_transfer_event_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_event_list_request',
                ],
                'required': [
                    'bank_transfer_event_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_event_list_request':
                        (BankTransferEventListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_event_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_event_sync_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferEventSyncResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/event/sync',
                'operation_id': 'bank_transfer_event_sync',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_event_sync_request',
                ],
                'required': [
                    'bank_transfer_event_sync_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_event_sync_request':
                        (BankTransferEventSyncRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_event_sync_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_get_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/get',
                'operation_id': 'bank_transfer_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_get_request',
                ],
                'required': [
                    'bank_transfer_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_get_request':
                        (BankTransferGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_list_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/list',
                'operation_id': 'bank_transfer_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_list_request',
                ],
                'required': [
                    'bank_transfer_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_list_request':
                        (BankTransferListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_migrate_account_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferMigrateAccountResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/migrate_account',
                'operation_id': 'bank_transfer_migrate_account',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_migrate_account_request',
                ],
                'required': [
                    'bank_transfer_migrate_account_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_migrate_account_request':
                        (BankTransferMigrateAccountRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_migrate_account_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_sweep_get_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferSweepGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/sweep/get',
                'operation_id': 'bank_transfer_sweep_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_sweep_get_request',
                ],
                'required': [
                    'bank_transfer_sweep_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_sweep_get_request':
                        (BankTransferSweepGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_sweep_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bank_transfer_sweep_list_endpoint = _Endpoint(
            settings={
                'response_type': (BankTransferSweepListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/bank_transfer/sweep/list',
                'operation_id': 'bank_transfer_sweep_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_transfer_sweep_list_request',
                ],
                'required': [
                    'bank_transfer_sweep_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_transfer_sweep_list_request':
                        (BankTransferSweepListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'bank_transfer_sweep_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.base_report_create_endpoint = _Endpoint(
            settings={
                'response_type': (BaseReportCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/cra/base_report/create',
                'operation_id': 'base_report_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'base_report_create_request',
                ],
                'required': [
                    'base_report_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'base_report_create_request':
                        (BaseReportCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'base_report_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.base_report_get_endpoint = _Endpoint(
            settings={
                'response_type': (BaseReportGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/cra/base_report/get',
                'operation_id': 'base_report_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'base_report_get_request',
                ],
                'required': [
                    'base_report_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'base_report_get_request':
                        (BaseReportGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'base_report_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_account_risk_evaluate_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconAccountRiskEvaluateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/account_risk/v1/evaluate',
                'operation_id': 'beacon_account_risk_evaluate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_account_risk_evaluate_request',
                ],
                'required': [
                    'beacon_account_risk_evaluate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_account_risk_evaluate_request':
                        (BeaconAccountRiskEvaluateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_account_risk_evaluate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_duplicate_get_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconDuplicateGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/duplicate/get',
                'operation_id': 'beacon_duplicate_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_duplicate_get_request',
                ],
                'required': [
                    'beacon_duplicate_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_duplicate_get_request':
                        (BeaconDuplicateGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_duplicate_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_report_create_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconReportCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/report/create',
                'operation_id': 'beacon_report_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_report_create_request',
                ],
                'required': [
                    'beacon_report_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_report_create_request':
                        (BeaconReportCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_report_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_report_get_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconReportGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/report/get',
                'operation_id': 'beacon_report_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_report_get_request',
                ],
                'required': [
                    'beacon_report_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_report_get_request':
                        (BeaconReportGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_report_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_report_list_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconReportListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/report/list',
                'operation_id': 'beacon_report_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_report_list_request',
                ],
                'required': [
                    'beacon_report_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_report_list_request':
                        (BeaconReportListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_report_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_report_syndication_get_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconReportSyndicationGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/report_syndication/get',
                'operation_id': 'beacon_report_syndication_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_report_syndication_get_request',
                ],
                'required': [
                    'beacon_report_syndication_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_report_syndication_get_request':
                        (BeaconReportSyndicationGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_report_syndication_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_report_syndication_list_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconReportSyndicationListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/report_syndication/list',
                'operation_id': 'beacon_report_syndication_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_report_syndication_list_request',
                ],
                'required': [
                    'beacon_report_syndication_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_report_syndication_list_request':
                        (BeaconReportSyndicationListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_report_syndication_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_user_create_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconUserCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/user/create',
                'operation_id': 'beacon_user_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_user_create_request',
                ],
                'required': [
                    'beacon_user_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_user_create_request':
                        (BeaconUserCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_user_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_user_get_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconUserGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/user/get',
                'operation_id': 'beacon_user_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_user_get_request',
                ],
                'required': [
                    'beacon_user_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_user_get_request':
                        (BeaconUserGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_user_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_user_history_list_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconUserHistoryListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/user/history/list',
                'operation_id': 'beacon_user_history_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_user_history_list_request',
                ],
                'required': [
                    'beacon_user_history_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_user_history_list_request':
                        (BeaconUserHistoryListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_user_history_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_user_review_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconUserGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/user/review',
                'operation_id': 'beacon_user_review',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_user_review_request',
                ],
                'required': [
                    'beacon_user_review_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_user_review_request':
                        (BeaconUserReviewRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_user_review_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.beacon_user_update_endpoint = _Endpoint(
            settings={
                'response_type': (BeaconUserUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beacon/user/update',
                'operation_id': 'beacon_user_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'beacon_user_update_request',
                ],
                'required': [
                    'beacon_user_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beacon_user_update_request':
                        (BeaconUserUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'beacon_user_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.categories_get_endpoint = _Endpoint(
            settings={
                'response_type': (CategoriesGetResponse,),
                'auth': [],
                'endpoint_path': '/categories/get',
                'operation_id': 'categories_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.consumer_report_pdf_get_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/consumer_report/pdf/get',
                'operation_id': 'consumer_report_pdf_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'consumer_report_pdf_get_request',
                ],
                'required': [
                    'consumer_report_pdf_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consumer_report_pdf_get_request':
                        (ConsumerReportPDFGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'consumer_report_pdf_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.cra_bank_income_create_endpoint = _Endpoint(
            settings={
                'response_type': (CraBankIncomeCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/cra/bank_income/create',
                'operation_id': 'cra_bank_income_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cra_bank_income_create_request',
                ],
                'required': [
                    'cra_bank_income_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cra_bank_income_create_request':
                        (CraBankIncomeCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cra_bank_income_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.cra_bank_income_get_endpoint = _Endpoint(
            settings={
                'response_type': (CraBankIncomeGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/cra/bank_income/get',
                'operation_id': 'cra_bank_income_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cra_bank_income_get_request',
                ],
                'required': [
                    'cra_bank_income_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cra_bank_income_get_request':
                        (CraBankIncomeGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cra_bank_income_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.cra_loans_applications_register_endpoint = _Endpoint(
            settings={
                'response_type': (CraLoansApplicationsRegisterResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/cra/loans/applications/register',
                'operation_id': 'cra_loans_applications_register',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cra_loans_applications_register_request',
                ],
                'required': [
                    'cra_loans_applications_register_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cra_loans_applications_register_request':
                        (CraLoansApplicationsRegisterRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cra_loans_applications_register_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.cra_loans_register_endpoint = _Endpoint(
            settings={
                'response_type': (CraLoansRegisterResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/cra/loans/register',
                'operation_id': 'cra_loans_register',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cra_loans_register_request',
                ],
                'required': [
                    'cra_loans_register_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cra_loans_register_request':
                        (CRALoansRegisterRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cra_loans_register_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.cra_loans_unregister_endpoint = _Endpoint(
            settings={
                'response_type': (CraLoanUnregisterResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/cra/loans/unregister',
                'operation_id': 'cra_loans_unregister',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cra_loans_unregister_request',
                ],
                'required': [
                    'cra_loans_unregister_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cra_loans_unregister_request':
                        (CraLoansUnregisterRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cra_loans_unregister_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.cra_loans_update_endpoint = _Endpoint(
            settings={
                'response_type': (CraLoansUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/cra/loans/update',
                'operation_id': 'cra_loans_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cra_loans_update_request',
                ],
                'required': [
                    'cra_loans_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cra_loans_update_request':
                        (CraLoansUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cra_loans_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.cra_partner_insights_get_endpoint = _Endpoint(
            settings={
                'response_type': (CraPartnerInsightsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/cra/partner_insights/get',
                'operation_id': 'cra_partner_insights_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cra_partner_insights_get_request',
                ],
                'required': [
                    'cra_partner_insights_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cra_partner_insights_get_request':
                        (CraPartnerInsightsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cra_partner_insights_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_payment_token_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationPaymentTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/payment/token/create',
                'operation_id': 'create_payment_token',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_payment_token_create_request',
                ],
                'required': [
                    'payment_initiation_payment_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_payment_token_create_request':
                        (PaymentInitiationPaymentTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_payment_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_asset_report_freddie_mac_get_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportFreddieGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/asset_report/freddie_mac/get',
                'operation_id': 'credit_asset_report_freddie_mac_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_report_freddie_get_request',
                ],
                'required': [
                    'asset_report_freddie_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_report_freddie_get_request':
                        (AssetReportFreddieGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'asset_report_freddie_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_audit_copy_token_create_endpoint = _Endpoint(
            settings={
                'response_type': (CreditAuditCopyTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/audit_copy_token/create',
                'operation_id': 'credit_audit_copy_token_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_audit_copy_token_create_request',
                ],
                'required': [
                    'credit_audit_copy_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_audit_copy_token_create_request':
                        (CreditAuditCopyTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_audit_copy_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_audit_copy_token_update_endpoint = _Endpoint(
            settings={
                'response_type': (CreditAuditCopyTokenUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/audit_copy_token/update',
                'operation_id': 'credit_audit_copy_token_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_audit_copy_token_update_request',
                ],
                'required': [
                    'credit_audit_copy_token_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_audit_copy_token_update_request':
                        (CreditAuditCopyTokenUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_audit_copy_token_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_bank_employment_get_endpoint = _Endpoint(
            settings={
                'response_type': (CreditBankEmploymentGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beta/credit/v1/bank_employment/get',
                'operation_id': 'credit_bank_employment_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_bank_employment_get_request',
                ],
                'required': [
                    'credit_bank_employment_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_bank_employment_get_request':
                        (CreditBankEmploymentGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_bank_employment_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_bank_income_get_endpoint = _Endpoint(
            settings={
                'response_type': (CreditBankIncomeGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/bank_income/get',
                'operation_id': 'credit_bank_income_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_bank_income_get_request',
                ],
                'required': [
                    'credit_bank_income_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_bank_income_get_request':
                        (CreditBankIncomeGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_bank_income_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_bank_income_pdf_get_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/bank_income/pdf/get',
                'operation_id': 'credit_bank_income_pdf_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_bank_income_pdf_get_request',
                ],
                'required': [
                    'credit_bank_income_pdf_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_bank_income_pdf_get_request':
                        (CreditBankIncomePDFGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_bank_income_pdf_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_bank_income_refresh_endpoint = _Endpoint(
            settings={
                'response_type': (CreditBankIncomeRefreshResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/bank_income/refresh',
                'operation_id': 'credit_bank_income_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_bank_income_refresh_request',
                ],
                'required': [
                    'credit_bank_income_refresh_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_bank_income_refresh_request':
                        (CreditBankIncomeRefreshRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_bank_income_refresh_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_bank_income_webhook_update_endpoint = _Endpoint(
            settings={
                'response_type': (CreditBankIncomeWebhookUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/bank_income/webhook/update',
                'operation_id': 'credit_bank_income_webhook_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_bank_income_webhook_update_request',
                ],
                'required': [
                    'credit_bank_income_webhook_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_bank_income_webhook_update_request':
                        (CreditBankIncomeWebhookUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_bank_income_webhook_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_bank_statements_uploads_get_endpoint = _Endpoint(
            settings={
                'response_type': (CreditBankStatementsUploadsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/bank_statements/uploads/get',
                'operation_id': 'credit_bank_statements_uploads_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_bank_statements_uploads_get_request',
                ],
                'required': [
                    'credit_bank_statements_uploads_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_bank_statements_uploads_get_request':
                        (CreditBankStatementsUploadsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_bank_statements_uploads_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_employment_get_endpoint = _Endpoint(
            settings={
                'response_type': (CreditEmploymentGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/employment/get',
                'operation_id': 'credit_employment_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_employment_get_request',
                ],
                'required': [
                    'credit_employment_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_employment_get_request':
                        (CreditEmploymentGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_employment_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_freddie_mac_reports_get_endpoint = _Endpoint(
            settings={
                'response_type': (CreditFreddieMacReportsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/freddie_mac/reports/get',
                'operation_id': 'credit_freddie_mac_reports_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_freddie_mac_reports_get_request',
                ],
                'required': [
                    'credit_freddie_mac_reports_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_freddie_mac_reports_get_request':
                        (CreditFreddieMacReportsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_freddie_mac_reports_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_payroll_income_get_endpoint = _Endpoint(
            settings={
                'response_type': (CreditPayrollIncomeGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/payroll_income/get',
                'operation_id': 'credit_payroll_income_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_payroll_income_get_request',
                ],
                'required': [
                    'credit_payroll_income_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_payroll_income_get_request':
                        (CreditPayrollIncomeGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_payroll_income_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_payroll_income_parsing_config_update_endpoint = _Endpoint(
            settings={
                'response_type': (CreditPayrollIncomeParsingConfigUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/payroll_income/parsing_config/update',
                'operation_id': 'credit_payroll_income_parsing_config_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_payroll_income_parsing_config_update_request',
                ],
                'required': [
                    'credit_payroll_income_parsing_config_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_payroll_income_parsing_config_update_request':
                        (CreditPayrollIncomeParsingConfigUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_payroll_income_parsing_config_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_payroll_income_precheck_endpoint = _Endpoint(
            settings={
                'response_type': (CreditPayrollIncomePrecheckResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/payroll_income/precheck',
                'operation_id': 'credit_payroll_income_precheck',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_payroll_income_precheck_request',
                ],
                'required': [
                    'credit_payroll_income_precheck_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_payroll_income_precheck_request':
                        (CreditPayrollIncomePrecheckRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_payroll_income_precheck_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_payroll_income_refresh_endpoint = _Endpoint(
            settings={
                'response_type': (CreditPayrollIncomeRefreshResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/payroll_income/refresh',
                'operation_id': 'credit_payroll_income_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_payroll_income_refresh_request',
                ],
                'required': [
                    'credit_payroll_income_refresh_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_payroll_income_refresh_request':
                        (CreditPayrollIncomeRefreshRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_payroll_income_refresh_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_payroll_income_risk_signals_get_endpoint = _Endpoint(
            settings={
                'response_type': (CreditPayrollIncomeRiskSignalsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/payroll_income/risk_signals/get',
                'operation_id': 'credit_payroll_income_risk_signals_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_payroll_income_risk_signals_get_request',
                ],
                'required': [
                    'credit_payroll_income_risk_signals_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_payroll_income_risk_signals_get_request':
                        (CreditPayrollIncomeRiskSignalsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_payroll_income_risk_signals_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_relay_create_endpoint = _Endpoint(
            settings={
                'response_type': (CreditRelayCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/relay/create',
                'operation_id': 'credit_relay_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_relay_create_request',
                ],
                'required': [
                    'credit_relay_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_relay_create_request':
                        (CreditRelayCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_relay_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_relay_get_endpoint = _Endpoint(
            settings={
                'response_type': (AssetReportGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/relay/get',
                'operation_id': 'credit_relay_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_relay_get_request',
                ],
                'required': [
                    'credit_relay_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_relay_get_request':
                        (CreditRelayGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_relay_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_relay_pdf_get_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/relay/pdf/get',
                'operation_id': 'credit_relay_pdf_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_relay_pdf_get_request',
                ],
                'required': [
                    'credit_relay_pdf_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_relay_pdf_get_request':
                        (CreditRelayPDFGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_relay_pdf_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_relay_refresh_endpoint = _Endpoint(
            settings={
                'response_type': (CreditRelayRefreshResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/relay/refresh',
                'operation_id': 'credit_relay_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_relay_refresh_request',
                ],
                'required': [
                    'credit_relay_refresh_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_relay_refresh_request':
                        (CreditRelayRefreshRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_relay_refresh_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_relay_remove_endpoint = _Endpoint(
            settings={
                'response_type': (CreditRelayRemoveResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/relay/remove',
                'operation_id': 'credit_relay_remove',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_relay_remove_request',
                ],
                'required': [
                    'credit_relay_remove_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_relay_remove_request':
                        (CreditRelayRemoveRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_relay_remove_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_report_audit_copy_remove_endpoint = _Endpoint(
            settings={
                'response_type': (CreditAuditCopyTokenRemoveResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/audit_copy_token/remove',
                'operation_id': 'credit_report_audit_copy_remove',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_audit_copy_token_remove_request',
                ],
                'required': [
                    'credit_audit_copy_token_remove_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_audit_copy_token_remove_request':
                        (CreditAuditCopyTokenRemoveRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_audit_copy_token_remove_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.credit_sessions_get_endpoint = _Endpoint(
            settings={
                'response_type': (CreditSessionsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/credit/sessions/get',
                'operation_id': 'credit_sessions_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'credit_sessions_get_request',
                ],
                'required': [
                    'credit_sessions_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'credit_sessions_get_request':
                        (CreditSessionsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'credit_sessions_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.dashboard_user_get_endpoint = _Endpoint(
            settings={
                'response_type': (DashboardUserGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/dashboard_user/get',
                'operation_id': 'dashboard_user_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dashboard_user_get_request',
                ],
                'required': [
                    'dashboard_user_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dashboard_user_get_request':
                        (DashboardUserGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'dashboard_user_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.dashboard_user_list_endpoint = _Endpoint(
            settings={
                'response_type': (DashboardUserListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/dashboard_user/list',
                'operation_id': 'dashboard_user_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dashboard_user_list_request',
                ],
                'required': [
                    'dashboard_user_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dashboard_user_list_request':
                        (DashboardUserListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'dashboard_user_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.deposit_switch_alt_create_endpoint = _Endpoint(
            settings={
                'response_type': (DepositSwitchAltCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/deposit_switch/alt/create',
                'operation_id': 'deposit_switch_alt_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deposit_switch_alt_create_request',
                ],
                'required': [
                    'deposit_switch_alt_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deposit_switch_alt_create_request':
                        (DepositSwitchAltCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'deposit_switch_alt_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.deposit_switch_create_endpoint = _Endpoint(
            settings={
                'response_type': (DepositSwitchCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/deposit_switch/create',
                'operation_id': 'deposit_switch_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deposit_switch_create_request',
                ],
                'required': [
                    'deposit_switch_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deposit_switch_create_request':
                        (DepositSwitchCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'deposit_switch_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.deposit_switch_get_endpoint = _Endpoint(
            settings={
                'response_type': (DepositSwitchGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/deposit_switch/get',
                'operation_id': 'deposit_switch_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deposit_switch_get_request',
                ],
                'required': [
                    'deposit_switch_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deposit_switch_get_request':
                        (DepositSwitchGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'deposit_switch_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.deposit_switch_token_create_endpoint = _Endpoint(
            settings={
                'response_type': (DepositSwitchTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/deposit_switch/token/create',
                'operation_id': 'deposit_switch_token_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'deposit_switch_token_create_request',
                ],
                'required': [
                    'deposit_switch_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'deposit_switch_token_create_request':
                        (DepositSwitchTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'deposit_switch_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.employers_search_endpoint = _Endpoint(
            settings={
                'response_type': (EmployersSearchResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/employers/search',
                'operation_id': 'employers_search',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'employers_search_request',
                ],
                'required': [
                    'employers_search_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'employers_search_request':
                        (EmployersSearchRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'employers_search_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.employment_verification_get_endpoint = _Endpoint(
            settings={
                'response_type': (EmploymentVerificationGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/employment/verification/get',
                'operation_id': 'employment_verification_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'employment_verification_get_request',
                ],
                'required': [
                    'employment_verification_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'employment_verification_get_request':
                        (EmploymentVerificationGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'employment_verification_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.fdx_notifications_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/fdx/notifications',
                'operation_id': 'fdx_notifications',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fdx_notification',
                ],
                'required': [
                    'fdx_notification',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fdx_notification':
                        (FDXNotification,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'fdx_notification': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.identity_documents_uploads_get_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityDocumentsUploadsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/identity/documents/uploads/get',
                'operation_id': 'identity_documents_uploads_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_documents_uploads_get_request',
                ],
                'required': [
                    'identity_documents_uploads_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_documents_uploads_get_request':
                        (IdentityDocumentsUploadsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'identity_documents_uploads_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.identity_get_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/identity/get',
                'operation_id': 'identity_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_get_request',
                ],
                'required': [
                    'identity_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_get_request':
                        (IdentityGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'identity_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.identity_match_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityMatchResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/identity/match',
                'operation_id': 'identity_match',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_match_request',
                ],
                'required': [
                    'identity_match_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_match_request':
                        (IdentityMatchRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'identity_match_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.identity_refresh_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityRefreshResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/identity/refresh',
                'operation_id': 'identity_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_refresh_request',
                ],
                'required': [
                    'identity_refresh_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_refresh_request':
                        (IdentityRefreshRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'identity_refresh_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.identity_verification_autofill_create_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityVerificationAutofillCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/identity_verification/autofill/create',
                'operation_id': 'identity_verification_autofill_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_verification_autofill_create_request',
                ],
                'required': [
                    'identity_verification_autofill_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_verification_autofill_create_request':
                        (IdentityVerificationAutofillCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'identity_verification_autofill_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.identity_verification_create_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityVerificationCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/identity_verification/create',
                'operation_id': 'identity_verification_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_verification_create_request',
                ],
                'required': [
                    'identity_verification_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_verification_create_request':
                        (IdentityVerificationCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'identity_verification_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.identity_verification_get_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityVerificationGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/identity_verification/get',
                'operation_id': 'identity_verification_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_verification_get_request',
                ],
                'required': [
                    'identity_verification_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_verification_get_request':
                        (IdentityVerificationGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'identity_verification_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.identity_verification_list_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityVerificationListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/identity_verification/list',
                'operation_id': 'identity_verification_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_verification_list_request',
                ],
                'required': [
                    'identity_verification_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_verification_list_request':
                        (IdentityVerificationListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'identity_verification_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.identity_verification_retry_endpoint = _Endpoint(
            settings={
                'response_type': (IdentityVerificationRetryResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/identity_verification/retry',
                'operation_id': 'identity_verification_retry',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'identity_verification_retry_request',
                ],
                'required': [
                    'identity_verification_retry_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identity_verification_retry_request':
                        (IdentityVerificationRetryRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'identity_verification_retry_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.income_verification_create_endpoint = _Endpoint(
            settings={
                'response_type': (IncomeVerificationCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/income/verification/create',
                'operation_id': 'income_verification_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'income_verification_create_request',
                ],
                'required': [
                    'income_verification_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'income_verification_create_request':
                        (IncomeVerificationCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'income_verification_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.income_verification_documents_download_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/income/verification/documents/download',
                'operation_id': 'income_verification_documents_download',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'income_verification_documents_download_request',
                ],
                'required': [
                    'income_verification_documents_download_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'income_verification_documents_download_request':
                        (IncomeVerificationDocumentsDownloadRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'income_verification_documents_download_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/zip'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.income_verification_paystubs_get_endpoint = _Endpoint(
            settings={
                'response_type': (IncomeVerificationPaystubsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/income/verification/paystubs/get',
                'operation_id': 'income_verification_paystubs_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'income_verification_paystubs_get_request',
                ],
                'required': [
                    'income_verification_paystubs_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'income_verification_paystubs_get_request':
                        (IncomeVerificationPaystubsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'income_verification_paystubs_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.income_verification_precheck_endpoint = _Endpoint(
            settings={
                'response_type': (IncomeVerificationPrecheckResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/income/verification/precheck',
                'operation_id': 'income_verification_precheck',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'income_verification_precheck_request',
                ],
                'required': [
                    'income_verification_precheck_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'income_verification_precheck_request':
                        (IncomeVerificationPrecheckRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'income_verification_precheck_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.income_verification_taxforms_get_endpoint = _Endpoint(
            settings={
                'response_type': (IncomeVerificationTaxformsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/income/verification/taxforms/get',
                'operation_id': 'income_verification_taxforms_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'income_verification_taxforms_get_request',
                ],
                'required': [
                    'income_verification_taxforms_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'income_verification_taxforms_get_request':
                        (IncomeVerificationTaxformsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'income_verification_taxforms_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.institutions_get_endpoint = _Endpoint(
            settings={
                'response_type': (InstitutionsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/institutions/get',
                'operation_id': 'institutions_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'institutions_get_request',
                ],
                'required': [
                    'institutions_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'institutions_get_request':
                        (InstitutionsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'institutions_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.institutions_get_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (InstitutionsGetByIdResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/institutions/get_by_id',
                'operation_id': 'institutions_get_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'institutions_get_by_id_request',
                ],
                'required': [
                    'institutions_get_by_id_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'institutions_get_by_id_request':
                        (InstitutionsGetByIdRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'institutions_get_by_id_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.institutions_search_endpoint = _Endpoint(
            settings={
                'response_type': (InstitutionsSearchResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/institutions/search',
                'operation_id': 'institutions_search',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'institutions_search_request',
                ],
                'required': [
                    'institutions_search_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'institutions_search_request':
                        (InstitutionsSearchRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'institutions_search_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.investments_auth_get_endpoint = _Endpoint(
            settings={
                'response_type': (InvestmentsAuthGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/investments/auth/get',
                'operation_id': 'investments_auth_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'investments_auth_get_request',
                ],
                'required': [
                    'investments_auth_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'investments_auth_get_request':
                        (InvestmentsAuthGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'investments_auth_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.investments_holdings_get_endpoint = _Endpoint(
            settings={
                'response_type': (InvestmentsHoldingsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/investments/holdings/get',
                'operation_id': 'investments_holdings_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'investments_holdings_get_request',
                ],
                'required': [
                    'investments_holdings_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'investments_holdings_get_request':
                        (InvestmentsHoldingsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'investments_holdings_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.investments_refresh_endpoint = _Endpoint(
            settings={
                'response_type': (InvestmentsRefreshResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/investments/refresh',
                'operation_id': 'investments_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'investments_refresh_request',
                ],
                'required': [
                    'investments_refresh_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'investments_refresh_request':
                        (InvestmentsRefreshRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'investments_refresh_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.investments_transactions_get_endpoint = _Endpoint(
            settings={
                'response_type': (InvestmentsTransactionsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/investments/transactions/get',
                'operation_id': 'investments_transactions_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'investments_transactions_get_request',
                ],
                'required': [
                    'investments_transactions_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'investments_transactions_get_request':
                        (InvestmentsTransactionsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'investments_transactions_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_access_token_invalidate_endpoint = _Endpoint(
            settings={
                'response_type': (ItemAccessTokenInvalidateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/access_token/invalidate',
                'operation_id': 'item_access_token_invalidate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_access_token_invalidate_request',
                ],
                'required': [
                    'item_access_token_invalidate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_access_token_invalidate_request':
                        (ItemAccessTokenInvalidateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_access_token_invalidate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_activity_list_endpoint = _Endpoint(
            settings={
                'response_type': (ItemActivityListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/activity/list',
                'operation_id': 'item_activity_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_activity_list_request',
                ],
                'required': [
                    'item_activity_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_activity_list_request':
                        (ItemActivityListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_activity_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_application_list_endpoint = _Endpoint(
            settings={
                'response_type': (ItemApplicationListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/application/list',
                'operation_id': 'item_application_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_application_list_request',
                ],
                'required': [
                    'item_application_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_application_list_request':
                        (ItemApplicationListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_application_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_application_scopes_update_endpoint = _Endpoint(
            settings={
                'response_type': (ItemApplicationScopesUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/application/scopes/update',
                'operation_id': 'item_application_scopes_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_application_scopes_update_request',
                ],
                'required': [
                    'item_application_scopes_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_application_scopes_update_request':
                        (ItemApplicationScopesUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_application_scopes_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_application_unlink_endpoint = _Endpoint(
            settings={
                'response_type': (ItemApplicationUnlinkResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/application/unlink',
                'operation_id': 'item_application_unlink',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_application_unlink_request',
                ],
                'required': [
                    'item_application_unlink_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_application_unlink_request':
                        (ItemApplicationUnlinkRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_application_unlink_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_create_public_token_endpoint = _Endpoint(
            settings={
                'response_type': (ItemPublicTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/public_token/create',
                'operation_id': 'item_create_public_token',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_public_token_create_request',
                ],
                'required': [
                    'item_public_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_public_token_create_request':
                        (ItemPublicTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_public_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_get_endpoint = _Endpoint(
            settings={
                'response_type': (ItemGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/get',
                'operation_id': 'item_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_get_request',
                ],
                'required': [
                    'item_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_get_request':
                        (ItemGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_import_endpoint = _Endpoint(
            settings={
                'response_type': (ItemImportResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/import',
                'operation_id': 'item_import',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_import_request',
                ],
                'required': [
                    'item_import_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_import_request':
                        (ItemImportRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_import_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_public_token_exchange_endpoint = _Endpoint(
            settings={
                'response_type': (ItemPublicTokenExchangeResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/public_token/exchange',
                'operation_id': 'item_public_token_exchange',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_public_token_exchange_request',
                ],
                'required': [
                    'item_public_token_exchange_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_public_token_exchange_request':
                        (ItemPublicTokenExchangeRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_public_token_exchange_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_remove_endpoint = _Endpoint(
            settings={
                'response_type': (ItemRemoveResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/remove',
                'operation_id': 'item_remove',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_remove_request',
                ],
                'required': [
                    'item_remove_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_remove_request':
                        (ItemRemoveRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_remove_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.item_webhook_update_endpoint = _Endpoint(
            settings={
                'response_type': (ItemWebhookUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/item/webhook/update',
                'operation_id': 'item_webhook_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_webhook_update_request',
                ],
                'required': [
                    'item_webhook_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_webhook_update_request':
                        (ItemWebhookUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'item_webhook_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.liabilities_get_endpoint = _Endpoint(
            settings={
                'response_type': (LiabilitiesGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/liabilities/get',
                'operation_id': 'liabilities_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'liabilities_get_request',
                ],
                'required': [
                    'liabilities_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'liabilities_get_request':
                        (LiabilitiesGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'liabilities_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.link_delivery_create_endpoint = _Endpoint(
            settings={
                'response_type': (LinkDeliveryCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/link_delivery/create',
                'operation_id': 'link_delivery_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'link_delivery_create_request',
                ],
                'required': [
                    'link_delivery_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'link_delivery_create_request':
                        (LinkDeliveryCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'link_delivery_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.link_delivery_get_endpoint = _Endpoint(
            settings={
                'response_type': (LinkDeliveryGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/link_delivery/get',
                'operation_id': 'link_delivery_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'link_delivery_get_request',
                ],
                'required': [
                    'link_delivery_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'link_delivery_get_request':
                        (LinkDeliveryGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'link_delivery_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.link_oauth_correlation_id_exchange_endpoint = _Endpoint(
            settings={
                'response_type': (LinkOAuthCorrelationIdExchangeResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/link/oauth/correlation_id/exchange',
                'operation_id': 'link_oauth_correlation_id_exchange',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'link_o_auth_correlation_id_exchange_request',
                ],
                'required': [
                    'link_o_auth_correlation_id_exchange_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'link_o_auth_correlation_id_exchange_request':
                        (LinkOAuthCorrelationIdExchangeRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'link_o_auth_correlation_id_exchange_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.link_profile_eligibility_check_endpoint = _Endpoint(
            settings={
                'response_type': (LinkProfileEligibilityCheckResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/link/profile/eligibility/check',
                'operation_id': 'link_profile_eligibility_check',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'link_profile_eligibility_check_request',
                ],
                'required': [
                    'link_profile_eligibility_check_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'link_profile_eligibility_check_request':
                        (LinkProfileEligibilityCheckRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'link_profile_eligibility_check_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.link_token_create_endpoint = _Endpoint(
            settings={
                'response_type': (LinkTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/link/token/create',
                'operation_id': 'link_token_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'link_token_create_request',
                ],
                'required': [
                    'link_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'link_token_create_request':
                        (LinkTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'link_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.link_token_get_endpoint = _Endpoint(
            settings={
                'response_type': (LinkTokenGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/link/token/get',
                'operation_id': 'link_token_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'link_token_get_request',
                ],
                'required': [
                    'link_token_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'link_token_get_request':
                        (LinkTokenGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'link_token_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.partner_customer_create_endpoint = _Endpoint(
            settings={
                'response_type': (PartnerCustomerCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/partner/customer/create',
                'operation_id': 'partner_customer_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'partner_customer_create_request',
                ],
                'required': [
                    'partner_customer_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'partner_customer_create_request':
                        (PartnerCustomerCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'partner_customer_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.partner_customer_enable_endpoint = _Endpoint(
            settings={
                'response_type': (PartnerCustomerEnableResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/partner/customer/enable',
                'operation_id': 'partner_customer_enable',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'partner_customer_enable_request',
                ],
                'required': [
                    'partner_customer_enable_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'partner_customer_enable_request':
                        (PartnerCustomerEnableRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'partner_customer_enable_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.partner_customer_get_endpoint = _Endpoint(
            settings={
                'response_type': (PartnerCustomerGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/partner/customer/get',
                'operation_id': 'partner_customer_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'partner_customer_get_request',
                ],
                'required': [
                    'partner_customer_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'partner_customer_get_request':
                        (PartnerCustomerGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'partner_customer_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.partner_customer_oauth_institutions_get_endpoint = _Endpoint(
            settings={
                'response_type': (PartnerCustomerOAuthInstitutionsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/partner/customer/oauth_institutions/get',
                'operation_id': 'partner_customer_oauth_institutions_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'partner_customer_o_auth_institutions_get_request',
                ],
                'required': [
                    'partner_customer_o_auth_institutions_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'partner_customer_o_auth_institutions_get_request':
                        (PartnerCustomerOAuthInstitutionsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'partner_customer_o_auth_institutions_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.partner_customer_remove_endpoint = _Endpoint(
            settings={
                'response_type': (PartnerCustomerRemoveResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/partner/customer/remove',
                'operation_id': 'partner_customer_remove',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'partner_customer_remove_request',
                ],
                'required': [
                    'partner_customer_remove_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'partner_customer_remove_request':
                        (PartnerCustomerRemoveRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'partner_customer_remove_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_consent_create_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationConsentCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/consent/create',
                'operation_id': 'payment_initiation_consent_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_consent_create_request',
                ],
                'required': [
                    'payment_initiation_consent_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_consent_create_request':
                        (PaymentInitiationConsentCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_consent_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_consent_get_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationConsentGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/consent/get',
                'operation_id': 'payment_initiation_consent_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_consent_get_request',
                ],
                'required': [
                    'payment_initiation_consent_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_consent_get_request':
                        (PaymentInitiationConsentGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_consent_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_consent_payment_execute_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationConsentPaymentExecuteResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/consent/payment/execute',
                'operation_id': 'payment_initiation_consent_payment_execute',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_consent_payment_execute_request',
                ],
                'required': [
                    'payment_initiation_consent_payment_execute_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_consent_payment_execute_request':
                        (PaymentInitiationConsentPaymentExecuteRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_consent_payment_execute_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_consent_revoke_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationConsentRevokeResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/consent/revoke',
                'operation_id': 'payment_initiation_consent_revoke',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_consent_revoke_request',
                ],
                'required': [
                    'payment_initiation_consent_revoke_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_consent_revoke_request':
                        (PaymentInitiationConsentRevokeRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_consent_revoke_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_payment_create_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationPaymentCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/payment/create',
                'operation_id': 'payment_initiation_payment_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_payment_create_request',
                ],
                'required': [
                    'payment_initiation_payment_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_payment_create_request':
                        (PaymentInitiationPaymentCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_payment_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_payment_get_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationPaymentGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/payment/get',
                'operation_id': 'payment_initiation_payment_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_payment_get_request',
                ],
                'required': [
                    'payment_initiation_payment_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_payment_get_request':
                        (PaymentInitiationPaymentGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_payment_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_payment_list_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationPaymentListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/payment/list',
                'operation_id': 'payment_initiation_payment_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_payment_list_request',
                ],
                'required': [
                    'payment_initiation_payment_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_payment_list_request':
                        (PaymentInitiationPaymentListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_payment_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_payment_reverse_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationPaymentReverseResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/payment/reverse',
                'operation_id': 'payment_initiation_payment_reverse',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_payment_reverse_request',
                ],
                'required': [
                    'payment_initiation_payment_reverse_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_payment_reverse_request':
                        (PaymentInitiationPaymentReverseRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_payment_reverse_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_recipient_create_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationRecipientCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/recipient/create',
                'operation_id': 'payment_initiation_recipient_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_recipient_create_request',
                ],
                'required': [
                    'payment_initiation_recipient_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_recipient_create_request':
                        (PaymentInitiationRecipientCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_recipient_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_recipient_get_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationRecipientGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/recipient/get',
                'operation_id': 'payment_initiation_recipient_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_recipient_get_request',
                ],
                'required': [
                    'payment_initiation_recipient_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_recipient_get_request':
                        (PaymentInitiationRecipientGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_recipient_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_initiation_recipient_list_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentInitiationRecipientListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_initiation/recipient/list',
                'operation_id': 'payment_initiation_recipient_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_initiation_recipient_list_request',
                ],
                'required': [
                    'payment_initiation_recipient_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_initiation_recipient_list_request':
                        (PaymentInitiationRecipientListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_initiation_recipient_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_profile_create_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentProfileCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_profile/create',
                'operation_id': 'payment_profile_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_profile_create_request',
                ],
                'required': [
                    'payment_profile_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_profile_create_request':
                        (PaymentProfileCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_profile_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_profile_get_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentProfileGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_profile/get',
                'operation_id': 'payment_profile_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_profile_get_request',
                ],
                'required': [
                    'payment_profile_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_profile_get_request':
                        (PaymentProfileGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_profile_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.payment_profile_remove_endpoint = _Endpoint(
            settings={
                'response_type': (PaymentProfileRemoveResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/payment_profile/remove',
                'operation_id': 'payment_profile_remove',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_profile_remove_request',
                ],
                'required': [
                    'payment_profile_remove_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_profile_remove_request':
                        (PaymentProfileRemoveRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'payment_profile_remove_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_account_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorAccountGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/account/get',
                'operation_id': 'processor_account_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_account_get_request',
                ],
                'required': [
                    'processor_account_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_account_get_request':
                        (ProcessorAccountGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_account_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_apex_processor_token_create_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/apex/processor_token/create',
                'operation_id': 'processor_apex_processor_token_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_apex_processor_token_create_request',
                ],
                'required': [
                    'processor_apex_processor_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_apex_processor_token_create_request':
                        (ProcessorApexProcessorTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_apex_processor_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_auth_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorAuthGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/auth/get',
                'operation_id': 'processor_auth_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_auth_get_request',
                ],
                'required': [
                    'processor_auth_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_auth_get_request':
                        (ProcessorAuthGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_auth_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_balance_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorBalanceGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/balance/get',
                'operation_id': 'processor_balance_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_balance_get_request',
                ],
                'required': [
                    'processor_balance_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_balance_get_request':
                        (ProcessorBalanceGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_balance_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_bank_transfer_create_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorBankTransferCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/bank_transfer/create',
                'operation_id': 'processor_bank_transfer_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_bank_transfer_create_request',
                ],
                'required': [
                    'processor_bank_transfer_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_bank_transfer_create_request':
                        (ProcessorBankTransferCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_bank_transfer_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_identity_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorIdentityGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/identity/get',
                'operation_id': 'processor_identity_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_identity_get_request',
                ],
                'required': [
                    'processor_identity_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_identity_get_request':
                        (ProcessorIdentityGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_identity_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_identity_match_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorIdentityMatchResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/identity/match',
                'operation_id': 'processor_identity_match',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_identity_match_request',
                ],
                'required': [
                    'processor_identity_match_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_identity_match_request':
                        (ProcessorIdentityMatchRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_identity_match_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_liabilities_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorLiabilitiesGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/liabilities/get',
                'operation_id': 'processor_liabilities_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_liabilities_get_request',
                ],
                'required': [
                    'processor_liabilities_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_liabilities_get_request':
                        (ProcessorLiabilitiesGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_liabilities_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_signal_decision_report_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorSignalDecisionReportResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/signal/decision/report',
                'operation_id': 'processor_signal_decision_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_signal_decision_report_request',
                ],
                'required': [
                    'processor_signal_decision_report_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_signal_decision_report_request':
                        (ProcessorSignalDecisionReportRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_signal_decision_report_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_signal_evaluate_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorSignalEvaluateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/signal/evaluate',
                'operation_id': 'processor_signal_evaluate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_signal_evaluate_request',
                ],
                'required': [
                    'processor_signal_evaluate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_signal_evaluate_request':
                        (ProcessorSignalEvaluateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_signal_evaluate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_signal_prepare_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorSignalPrepareResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/signal/prepare',
                'operation_id': 'processor_signal_prepare',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_signal_prepare_request',
                ],
                'required': [
                    'processor_signal_prepare_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_signal_prepare_request':
                        (ProcessorSignalPrepareRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_signal_prepare_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_signal_return_report_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorSignalReturnReportResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/signal/return/report',
                'operation_id': 'processor_signal_return_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_signal_return_report_request',
                ],
                'required': [
                    'processor_signal_return_report_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_signal_return_report_request':
                        (ProcessorSignalReturnReportRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_signal_return_report_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_stripe_bank_account_token_create_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorStripeBankAccountTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/stripe/bank_account_token/create',
                'operation_id': 'processor_stripe_bank_account_token_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_stripe_bank_account_token_create_request',
                ],
                'required': [
                    'processor_stripe_bank_account_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_stripe_bank_account_token_create_request':
                        (ProcessorStripeBankAccountTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_stripe_bank_account_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_token_create_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/token/create',
                'operation_id': 'processor_token_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_token_create_request',
                ],
                'required': [
                    'processor_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_token_create_request':
                        (ProcessorTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_token_permissions_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorTokenPermissionsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/token/permissions/get',
                'operation_id': 'processor_token_permissions_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_token_permissions_get_request',
                ],
                'required': [
                    'processor_token_permissions_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_token_permissions_get_request':
                        (ProcessorTokenPermissionsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_token_permissions_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_token_permissions_set_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorTokenPermissionsSetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/token/permissions/set',
                'operation_id': 'processor_token_permissions_set',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_token_permissions_set_request',
                ],
                'required': [
                    'processor_token_permissions_set_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_token_permissions_set_request':
                        (ProcessorTokenPermissionsSetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_token_permissions_set_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_token_webhook_update_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorTokenWebhookUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/token/webhook/update',
                'operation_id': 'processor_token_webhook_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_token_webhook_update_request',
                ],
                'required': [
                    'processor_token_webhook_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_token_webhook_update_request':
                        (ProcessorTokenWebhookUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_token_webhook_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_transactions_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorTransactionsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/transactions/get',
                'operation_id': 'processor_transactions_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_transactions_get_request',
                ],
                'required': [
                    'processor_transactions_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_transactions_get_request':
                        (ProcessorTransactionsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_transactions_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_transactions_recurring_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorTransactionsRecurringGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/transactions/recurring/get',
                'operation_id': 'processor_transactions_recurring_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_transactions_recurring_get_request',
                ],
                'required': [
                    'processor_transactions_recurring_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_transactions_recurring_get_request':
                        (ProcessorTransactionsRecurringGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_transactions_recurring_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_transactions_refresh_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorTransactionsRefreshResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/transactions/refresh',
                'operation_id': 'processor_transactions_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_transactions_refresh_request',
                ],
                'required': [
                    'processor_transactions_refresh_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_transactions_refresh_request':
                        (ProcessorTransactionsRefreshRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_transactions_refresh_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.processor_transactions_sync_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorTransactionsSyncResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/processor/transactions/sync',
                'operation_id': 'processor_transactions_sync',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'processor_transactions_sync_request',
                ],
                'required': [
                    'processor_transactions_sync_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'processor_transactions_sync_request':
                        (ProcessorTransactionsSyncRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'processor_transactions_sync_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.profile_get_endpoint = _Endpoint(
            settings={
                'response_type': (ProfileGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/profile/get',
                'operation_id': 'profile_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'profile_get_request',
                ],
                'required': [
                    'profile_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'profile_get_request':
                        (ProfileGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'profile_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_bank_income_fire_webhook_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxBankIncomeFireWebhookResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/bank_income/fire_webhook',
                'operation_id': 'sandbox_bank_income_fire_webhook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_bank_income_fire_webhook_request',
                ],
                'required': [
                    'sandbox_bank_income_fire_webhook_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_bank_income_fire_webhook_request':
                        (SandboxBankIncomeFireWebhookRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_bank_income_fire_webhook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_bank_transfer_fire_webhook_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxBankTransferFireWebhookResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/bank_transfer/fire_webhook',
                'operation_id': 'sandbox_bank_transfer_fire_webhook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_bank_transfer_fire_webhook_request',
                ],
                'required': [
                    'sandbox_bank_transfer_fire_webhook_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_bank_transfer_fire_webhook_request':
                        (SandboxBankTransferFireWebhookRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_bank_transfer_fire_webhook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_bank_transfer_simulate_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxBankTransferSimulateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/bank_transfer/simulate',
                'operation_id': 'sandbox_bank_transfer_simulate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_bank_transfer_simulate_request',
                ],
                'required': [
                    'sandbox_bank_transfer_simulate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_bank_transfer_simulate_request':
                        (SandboxBankTransferSimulateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_bank_transfer_simulate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_income_fire_webhook_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxIncomeFireWebhookResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/income/fire_webhook',
                'operation_id': 'sandbox_income_fire_webhook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_income_fire_webhook_request',
                ],
                'required': [
                    'sandbox_income_fire_webhook_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_income_fire_webhook_request':
                        (SandboxIncomeFireWebhookRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_income_fire_webhook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_item_fire_webhook_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxItemFireWebhookResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/item/fire_webhook',
                'operation_id': 'sandbox_item_fire_webhook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_item_fire_webhook_request',
                ],
                'required': [
                    'sandbox_item_fire_webhook_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_item_fire_webhook_request':
                        (SandboxItemFireWebhookRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_item_fire_webhook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_item_reset_login_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxItemResetLoginResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/item/reset_login',
                'operation_id': 'sandbox_item_reset_login',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_item_reset_login_request',
                ],
                'required': [
                    'sandbox_item_reset_login_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_item_reset_login_request':
                        (SandboxItemResetLoginRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_item_reset_login_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_item_set_verification_status_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxItemSetVerificationStatusResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/item/set_verification_status',
                'operation_id': 'sandbox_item_set_verification_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_item_set_verification_status_request',
                ],
                'required': [
                    'sandbox_item_set_verification_status_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_item_set_verification_status_request':
                        (SandboxItemSetVerificationStatusRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_item_set_verification_status_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_oauth_select_accounts_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxOauthSelectAccountsResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/oauth/select_accounts',
                'operation_id': 'sandbox_oauth_select_accounts',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_oauth_select_accounts_request',
                ],
                'required': [
                    'sandbox_oauth_select_accounts_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_oauth_select_accounts_request':
                        (SandboxOauthSelectAccountsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_oauth_select_accounts_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_payment_profile_reset_login_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxPaymentProfileResetLoginResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/payment_profile/reset_login',
                'operation_id': 'sandbox_payment_profile_reset_login',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_payment_profile_reset_login_request',
                ],
                'required': [
                    'sandbox_payment_profile_reset_login_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_payment_profile_reset_login_request':
                        (SandboxPaymentProfileResetLoginRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_payment_profile_reset_login_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_processor_token_create_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxProcessorTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/processor_token/create',
                'operation_id': 'sandbox_processor_token_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_processor_token_create_request',
                ],
                'required': [
                    'sandbox_processor_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_processor_token_create_request':
                        (SandboxProcessorTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_processor_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_public_token_create_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxPublicTokenCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/public_token/create',
                'operation_id': 'sandbox_public_token_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_public_token_create_request',
                ],
                'required': [
                    'sandbox_public_token_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_public_token_create_request':
                        (SandboxPublicTokenCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_public_token_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_fire_webhook_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferFireWebhookResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/fire_webhook',
                'operation_id': 'sandbox_transfer_fire_webhook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_fire_webhook_request',
                ],
                'required': [
                    'sandbox_transfer_fire_webhook_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_fire_webhook_request':
                        (SandboxTransferFireWebhookRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_fire_webhook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_ledger_deposit_simulate_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferLedgerDepositSimulateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/ledger/deposit/simulate',
                'operation_id': 'sandbox_transfer_ledger_deposit_simulate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_ledger_deposit_simulate_request',
                ],
                'required': [
                    'sandbox_transfer_ledger_deposit_simulate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_ledger_deposit_simulate_request':
                        (SandboxTransferLedgerDepositSimulateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_ledger_deposit_simulate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_ledger_simulate_available_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferLedgerSimulateAvailableResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/ledger/simulate_available',
                'operation_id': 'sandbox_transfer_ledger_simulate_available',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_ledger_simulate_available_request',
                ],
                'required': [
                    'sandbox_transfer_ledger_simulate_available_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_ledger_simulate_available_request':
                        (SandboxTransferLedgerSimulateAvailableRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_ledger_simulate_available_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_ledger_withdraw_simulate_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferLedgerWithdrawSimulateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/ledger/withdraw/simulate',
                'operation_id': 'sandbox_transfer_ledger_withdraw_simulate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_ledger_withdraw_simulate_request',
                ],
                'required': [
                    'sandbox_transfer_ledger_withdraw_simulate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_ledger_withdraw_simulate_request':
                        (SandboxTransferLedgerWithdrawSimulateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_ledger_withdraw_simulate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_refund_simulate_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferRefundSimulateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/refund/simulate',
                'operation_id': 'sandbox_transfer_refund_simulate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_refund_simulate_request',
                ],
                'required': [
                    'sandbox_transfer_refund_simulate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_refund_simulate_request':
                        (SandboxTransferRefundSimulateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_refund_simulate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_repayment_simulate_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferRepaymentSimulateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/repayment/simulate',
                'operation_id': 'sandbox_transfer_repayment_simulate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_repayment_simulate_request',
                ],
                'required': [
                    'sandbox_transfer_repayment_simulate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_repayment_simulate_request':
                        (SandboxTransferRepaymentSimulateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_repayment_simulate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_simulate_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferSimulateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/simulate',
                'operation_id': 'sandbox_transfer_simulate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_simulate_request',
                ],
                'required': [
                    'sandbox_transfer_simulate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_simulate_request':
                        (SandboxTransferSimulateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_simulate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_sweep_simulate_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferSweepSimulateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/sweep/simulate',
                'operation_id': 'sandbox_transfer_sweep_simulate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_sweep_simulate_request',
                ],
                'required': [
                    'sandbox_transfer_sweep_simulate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_sweep_simulate_request':
                        (SandboxTransferSweepSimulateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_sweep_simulate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_test_clock_advance_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferTestClockAdvanceResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/test_clock/advance',
                'operation_id': 'sandbox_transfer_test_clock_advance',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_test_clock_advance_request',
                ],
                'required': [
                    'sandbox_transfer_test_clock_advance_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_test_clock_advance_request':
                        (SandboxTransferTestClockAdvanceRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_test_clock_advance_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_test_clock_create_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferTestClockCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/test_clock/create',
                'operation_id': 'sandbox_transfer_test_clock_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_test_clock_create_request',
                ],
                'required': [
                    'sandbox_transfer_test_clock_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_test_clock_create_request':
                        (SandboxTransferTestClockCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_test_clock_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_test_clock_get_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferTestClockGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/test_clock/get',
                'operation_id': 'sandbox_transfer_test_clock_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_test_clock_get_request',
                ],
                'required': [
                    'sandbox_transfer_test_clock_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_test_clock_get_request':
                        (SandboxTransferTestClockGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_test_clock_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.sandbox_transfer_test_clock_list_endpoint = _Endpoint(
            settings={
                'response_type': (SandboxTransferTestClockListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/sandbox/transfer/test_clock/list',
                'operation_id': 'sandbox_transfer_test_clock_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sandbox_transfer_test_clock_list_request',
                ],
                'required': [
                    'sandbox_transfer_test_clock_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sandbox_transfer_test_clock_list_request':
                        (SandboxTransferTestClockListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sandbox_transfer_test_clock_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.signal_decision_report_endpoint = _Endpoint(
            settings={
                'response_type': (SignalDecisionReportResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/signal/decision/report',
                'operation_id': 'signal_decision_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'signal_decision_report_request',
                ],
                'required': [
                    'signal_decision_report_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'signal_decision_report_request':
                        (SignalDecisionReportRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'signal_decision_report_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.signal_evaluate_endpoint = _Endpoint(
            settings={
                'response_type': (SignalEvaluateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/signal/evaluate',
                'operation_id': 'signal_evaluate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'signal_evaluate_request',
                ],
                'required': [
                    'signal_evaluate_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'signal_evaluate_request':
                        (SignalEvaluateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'signal_evaluate_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.signal_prepare_endpoint = _Endpoint(
            settings={
                'response_type': (SignalPrepareResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/signal/prepare',
                'operation_id': 'signal_prepare',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'signal_prepare_request',
                ],
                'required': [
                    'signal_prepare_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'signal_prepare_request':
                        (SignalPrepareRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'signal_prepare_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.signal_return_report_endpoint = _Endpoint(
            settings={
                'response_type': (SignalReturnReportResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/signal/return/report',
                'operation_id': 'signal_return_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'signal_return_report_request',
                ],
                'required': [
                    'signal_return_report_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'signal_return_report_request':
                        (SignalReturnReportRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'signal_return_report_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.statements_download_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/statements/download',
                'operation_id': 'statements_download',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'statements_download_request',
                ],
                'required': [
                    'statements_download_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'statements_download_request':
                        (StatementsDownloadRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'statements_download_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.statements_list_endpoint = _Endpoint(
            settings={
                'response_type': (StatementsListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/statements/list',
                'operation_id': 'statements_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'statements_list_request',
                ],
                'required': [
                    'statements_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'statements_list_request':
                        (StatementsListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'statements_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.statements_refresh_endpoint = _Endpoint(
            settings={
                'response_type': (StatementsRefreshResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/statements/refresh',
                'operation_id': 'statements_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'statements_refresh_request',
                ],
                'required': [
                    'statements_refresh_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'statements_refresh_request':
                        (StatementsRefreshRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'statements_refresh_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_enhance_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsEnhanceGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beta/transactions/v1/enhance',
                'operation_id': 'transactions_enhance',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_enhance_get_request',
                ],
                'required': [
                    'transactions_enhance_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_enhance_get_request':
                        (TransactionsEnhanceGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_enhance_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_enrich_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsEnrichResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transactions/enrich',
                'operation_id': 'transactions_enrich',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_enrich_request',
                ],
                'required': [
                    'transactions_enrich_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_enrich_request':
                        (TransactionsEnrichRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_enrich_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transactions/get',
                'operation_id': 'transactions_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_get_request',
                ],
                'required': [
                    'transactions_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_get_request':
                        (TransactionsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_recurring_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsRecurringGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transactions/recurring/get',
                'operation_id': 'transactions_recurring_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_recurring_get_request',
                ],
                'required': [
                    'transactions_recurring_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_recurring_get_request':
                        (TransactionsRecurringGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_recurring_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_refresh_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsRefreshResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transactions/refresh',
                'operation_id': 'transactions_refresh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_refresh_request',
                ],
                'required': [
                    'transactions_refresh_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_refresh_request':
                        (TransactionsRefreshRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_refresh_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_rules_create_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsRulesCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beta/transactions/rules/v1/create',
                'operation_id': 'transactions_rules_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_rules_create_request',
                ],
                'required': [
                    'transactions_rules_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_rules_create_request':
                        (TransactionsRulesCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_rules_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_rules_list_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsRulesListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beta/transactions/rules/v1/list',
                'operation_id': 'transactions_rules_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_rules_list_request',
                ],
                'required': [
                    'transactions_rules_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_rules_list_request':
                        (TransactionsRulesListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_rules_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_rules_remove_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsRulesRemoveResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beta/transactions/rules/v1/remove',
                'operation_id': 'transactions_rules_remove',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_rules_remove_request',
                ],
                'required': [
                    'transactions_rules_remove_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_rules_remove_request':
                        (TransactionsRulesRemoveRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_rules_remove_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_sync_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsSyncResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transactions/sync',
                'operation_id': 'transactions_sync',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_sync_request',
                ],
                'required': [
                    'transactions_sync_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_sync_request':
                        (TransactionsSyncRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_sync_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transactions_user_insights_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsUserInsightsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/beta/transactions/user_insights/v1/get',
                'operation_id': 'transactions_user_insights_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transactions_user_insights_get_request',
                ],
                'required': [
                    'transactions_user_insights_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transactions_user_insights_get_request':
                        (TransactionsUserInsightsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transactions_user_insights_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_authorization_cancel_endpoint = _Endpoint(
            settings={
                'response_type': (TransferAuthorizationCancelResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/authorization/cancel',
                'operation_id': 'transfer_authorization_cancel',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_authorization_cancel_request',
                ],
                'required': [
                    'transfer_authorization_cancel_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_authorization_cancel_request':
                        (TransferAuthorizationCancelRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_authorization_cancel_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_authorization_create_endpoint = _Endpoint(
            settings={
                'response_type': (TransferAuthorizationCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/authorization/create',
                'operation_id': 'transfer_authorization_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_authorization_create_request',
                ],
                'required': [
                    'transfer_authorization_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_authorization_create_request':
                        (TransferAuthorizationCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_authorization_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_balance_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferBalanceGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/balance/get',
                'operation_id': 'transfer_balance_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_balance_get_request',
                ],
                'required': [
                    'transfer_balance_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_balance_get_request':
                        (TransferBalanceGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_balance_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_cancel_endpoint = _Endpoint(
            settings={
                'response_type': (TransferCancelResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/cancel',
                'operation_id': 'transfer_cancel',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_cancel_request',
                ],
                'required': [
                    'transfer_cancel_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_cancel_request':
                        (TransferCancelRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_cancel_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_capabilities_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferCapabilitiesGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/capabilities/get',
                'operation_id': 'transfer_capabilities_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_capabilities_get_request',
                ],
                'required': [
                    'transfer_capabilities_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_capabilities_get_request':
                        (TransferCapabilitiesGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_capabilities_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_configuration_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferConfigurationGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/configuration/get',
                'operation_id': 'transfer_configuration_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_configuration_get_request',
                ],
                'required': [
                    'transfer_configuration_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_configuration_get_request':
                        (TransferConfigurationGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_configuration_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_create_endpoint = _Endpoint(
            settings={
                'response_type': (TransferCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/create',
                'operation_id': 'transfer_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_create_request',
                ],
                'required': [
                    'transfer_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_create_request':
                        (TransferCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_diligence_document_upload_endpoint = _Endpoint(
            settings={
                'response_type': (TransferDiligenceDocumentUploadResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/diligence/document/upload',
                'operation_id': 'transfer_diligence_document_upload',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_diligence_document_upload_request',
                ],
                'required': [
                    'transfer_diligence_document_upload_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_diligence_document_upload_request':
                        (TransferDiligenceDocumentUploadRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_diligence_document_upload_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_diligence_submit_endpoint = _Endpoint(
            settings={
                'response_type': (TransferDiligenceSubmitResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/diligence/submit',
                'operation_id': 'transfer_diligence_submit',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_diligence_submit_request',
                ],
                'required': [
                    'transfer_diligence_submit_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_diligence_submit_request':
                        (TransferDiligenceSubmitRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_diligence_submit_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_event_list_endpoint = _Endpoint(
            settings={
                'response_type': (TransferEventListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/event/list',
                'operation_id': 'transfer_event_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_event_list_request',
                ],
                'required': [
                    'transfer_event_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_event_list_request':
                        (TransferEventListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_event_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_event_sync_endpoint = _Endpoint(
            settings={
                'response_type': (TransferEventSyncResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/event/sync',
                'operation_id': 'transfer_event_sync',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_event_sync_request',
                ],
                'required': [
                    'transfer_event_sync_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_event_sync_request':
                        (TransferEventSyncRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_event_sync_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/get',
                'operation_id': 'transfer_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_get_request',
                ],
                'required': [
                    'transfer_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_get_request':
                        (TransferGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_intent_create_endpoint = _Endpoint(
            settings={
                'response_type': (TransferIntentCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/intent/create',
                'operation_id': 'transfer_intent_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_intent_create_request',
                ],
                'required': [
                    'transfer_intent_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_intent_create_request':
                        (TransferIntentCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_intent_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_intent_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferIntentGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/intent/get',
                'operation_id': 'transfer_intent_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_intent_get_request',
                ],
                'required': [
                    'transfer_intent_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_intent_get_request':
                        (TransferIntentGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_intent_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_ledger_deposit_endpoint = _Endpoint(
            settings={
                'response_type': (TransferLedgerDepositResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/ledger/deposit',
                'operation_id': 'transfer_ledger_deposit',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_ledger_deposit_request',
                ],
                'required': [
                    'transfer_ledger_deposit_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_ledger_deposit_request':
                        (TransferLedgerDepositRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_ledger_deposit_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_ledger_distribute_endpoint = _Endpoint(
            settings={
                'response_type': (TransferLedgerDistributeResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/ledger/distribute',
                'operation_id': 'transfer_ledger_distribute',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_ledger_distribute_request',
                ],
                'required': [
                    'transfer_ledger_distribute_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_ledger_distribute_request':
                        (TransferLedgerDistributeRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_ledger_distribute_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_ledger_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferLedgerGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/ledger/get',
                'operation_id': 'transfer_ledger_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_ledger_get_request',
                ],
                'required': [
                    'transfer_ledger_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_ledger_get_request':
                        (TransferLedgerGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_ledger_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_ledger_withdraw_endpoint = _Endpoint(
            settings={
                'response_type': (TransferLedgerWithdrawResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/ledger/withdraw',
                'operation_id': 'transfer_ledger_withdraw',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_ledger_withdraw_request',
                ],
                'required': [
                    'transfer_ledger_withdraw_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_ledger_withdraw_request':
                        (TransferLedgerWithdrawRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_ledger_withdraw_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_list_endpoint = _Endpoint(
            settings={
                'response_type': (TransferListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/list',
                'operation_id': 'transfer_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_list_request',
                ],
                'required': [
                    'transfer_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_list_request':
                        (TransferListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_metrics_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferMetricsGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/metrics/get',
                'operation_id': 'transfer_metrics_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_metrics_get_request',
                ],
                'required': [
                    'transfer_metrics_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_metrics_get_request':
                        (TransferMetricsGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_metrics_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_migrate_account_endpoint = _Endpoint(
            settings={
                'response_type': (TransferMigrateAccountResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/migrate_account',
                'operation_id': 'transfer_migrate_account',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_migrate_account_request',
                ],
                'required': [
                    'transfer_migrate_account_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_migrate_account_request':
                        (TransferMigrateAccountRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_migrate_account_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_originator_create_endpoint = _Endpoint(
            settings={
                'response_type': (TransferOriginatorCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/originator/create',
                'operation_id': 'transfer_originator_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_originator_create_request',
                ],
                'required': [
                    'transfer_originator_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_originator_create_request':
                        (TransferOriginatorCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_originator_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_originator_funding_account_update_endpoint = _Endpoint(
            settings={
                'response_type': (TransferOriginatorFundingAccountUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/originator/funding_account/update',
                'operation_id': 'transfer_originator_funding_account_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_originator_funding_account_update_request',
                ],
                'required': [
                    'transfer_originator_funding_account_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_originator_funding_account_update_request':
                        (TransferOriginatorFundingAccountUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_originator_funding_account_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_originator_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferOriginatorGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/originator/get',
                'operation_id': 'transfer_originator_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_originator_get_request',
                ],
                'required': [
                    'transfer_originator_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_originator_get_request':
                        (TransferOriginatorGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_originator_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'examples'
                ]
            },
            api_client=api_client
        )
        self.transfer_originator_list_endpoint = _Endpoint(
            settings={
                'response_type': (TransferOriginatorListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/originator/list',
                'operation_id': 'transfer_originator_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_originator_list_request',
                ],
                'required': [
                    'transfer_originator_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_originator_list_request':
                        (TransferOriginatorListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_originator_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_questionnaire_create_endpoint = _Endpoint(
            settings={
                'response_type': (TransferQuestionnaireCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/questionnaire/create',
                'operation_id': 'transfer_questionnaire_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_questionnaire_create_request',
                ],
                'required': [
                    'transfer_questionnaire_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_questionnaire_create_request':
                        (TransferQuestionnaireCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_questionnaire_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_recurring_cancel_endpoint = _Endpoint(
            settings={
                'response_type': (TransferRecurringCancelResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/recurring/cancel',
                'operation_id': 'transfer_recurring_cancel',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_recurring_cancel_request',
                ],
                'required': [
                    'transfer_recurring_cancel_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_recurring_cancel_request':
                        (TransferRecurringCancelRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_recurring_cancel_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_recurring_create_endpoint = _Endpoint(
            settings={
                'response_type': (TransferRecurringCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/recurring/create',
                'operation_id': 'transfer_recurring_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_recurring_create_request',
                ],
                'required': [
                    'transfer_recurring_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_recurring_create_request':
                        (TransferRecurringCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_recurring_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_recurring_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferRecurringGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/recurring/get',
                'operation_id': 'transfer_recurring_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_recurring_get_request',
                ],
                'required': [
                    'transfer_recurring_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_recurring_get_request':
                        (TransferRecurringGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_recurring_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_recurring_list_endpoint = _Endpoint(
            settings={
                'response_type': (TransferRecurringListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/recurring/list',
                'operation_id': 'transfer_recurring_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_recurring_list_request',
                ],
                'required': [
                    'transfer_recurring_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_recurring_list_request':
                        (TransferRecurringListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_recurring_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_refund_cancel_endpoint = _Endpoint(
            settings={
                'response_type': (TransferRefundCancelResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/refund/cancel',
                'operation_id': 'transfer_refund_cancel',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_refund_cancel_request',
                ],
                'required': [
                    'transfer_refund_cancel_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_refund_cancel_request':
                        (TransferRefundCancelRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_refund_cancel_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_refund_create_endpoint = _Endpoint(
            settings={
                'response_type': (TransferRefundCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/refund/create',
                'operation_id': 'transfer_refund_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_refund_create_request',
                ],
                'required': [
                    'transfer_refund_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_refund_create_request':
                        (TransferRefundCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_refund_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_refund_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferRefundGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/refund/get',
                'operation_id': 'transfer_refund_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_refund_get_request',
                ],
                'required': [
                    'transfer_refund_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_refund_get_request':
                        (TransferRefundGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_refund_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_repayment_list_endpoint = _Endpoint(
            settings={
                'response_type': (TransferRepaymentListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/repayment/list',
                'operation_id': 'transfer_repayment_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_repayment_list_request',
                ],
                'required': [
                    'transfer_repayment_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_repayment_list_request':
                        (TransferRepaymentListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_repayment_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_repayment_return_list_endpoint = _Endpoint(
            settings={
                'response_type': (TransferRepaymentReturnListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/repayment/return/list',
                'operation_id': 'transfer_repayment_return_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_repayment_return_list_request',
                ],
                'required': [
                    'transfer_repayment_return_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_repayment_return_list_request':
                        (TransferRepaymentReturnListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_repayment_return_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_sweep_get_endpoint = _Endpoint(
            settings={
                'response_type': (TransferSweepGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/sweep/get',
                'operation_id': 'transfer_sweep_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_sweep_get_request',
                ],
                'required': [
                    'transfer_sweep_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_sweep_get_request':
                        (TransferSweepGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_sweep_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.transfer_sweep_list_endpoint = _Endpoint(
            settings={
                'response_type': (TransferSweepListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/transfer/sweep/list',
                'operation_id': 'transfer_sweep_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transfer_sweep_list_request',
                ],
                'required': [
                    'transfer_sweep_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transfer_sweep_list_request':
                        (TransferSweepListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'transfer_sweep_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.user_create_endpoint = _Endpoint(
            settings={
                'response_type': (UserCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/user/create',
                'operation_id': 'user_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_create_request',
                ],
                'required': [
                    'user_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_create_request':
                        (UserCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'user_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.user_update_endpoint = _Endpoint(
            settings={
                'response_type': (UserUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/user/update',
                'operation_id': 'user_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_update_request',
                ],
                'required': [
                    'user_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_update_request':
                        (UserUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'user_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.wallet_create_endpoint = _Endpoint(
            settings={
                'response_type': (WalletCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/wallet/create',
                'operation_id': 'wallet_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'wallet_create_request',
                ],
                'required': [
                    'wallet_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'wallet_create_request':
                        (WalletCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'wallet_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.wallet_get_endpoint = _Endpoint(
            settings={
                'response_type': (WalletGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/wallet/get',
                'operation_id': 'wallet_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'wallet_get_request',
                ],
                'required': [
                    'wallet_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'wallet_get_request':
                        (WalletGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'wallet_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.wallet_list_endpoint = _Endpoint(
            settings={
                'response_type': (WalletListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/wallet/list',
                'operation_id': 'wallet_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'wallet_list_request',
                ],
                'required': [
                    'wallet_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'wallet_list_request':
                        (WalletListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'wallet_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.wallet_transaction_execute_endpoint = _Endpoint(
            settings={
                'response_type': (WalletTransactionExecuteResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/wallet/transaction/execute',
                'operation_id': 'wallet_transaction_execute',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'wallet_transaction_execute_request',
                ],
                'required': [
                    'wallet_transaction_execute_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'wallet_transaction_execute_request':
                        (WalletTransactionExecuteRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'wallet_transaction_execute_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.wallet_transaction_get_endpoint = _Endpoint(
            settings={
                'response_type': (WalletTransactionGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/wallet/transaction/get',
                'operation_id': 'wallet_transaction_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'wallet_transaction_get_request',
                ],
                'required': [
                    'wallet_transaction_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'wallet_transaction_get_request':
                        (WalletTransactionGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'wallet_transaction_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.wallet_transaction_list_endpoint = _Endpoint(
            settings={
                'response_type': (WalletTransactionListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/wallet/transaction/list',
                'operation_id': 'wallet_transaction_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'wallet_transaction_list_request',
                ],
                'required': [
                    'wallet_transaction_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'wallet_transaction_list_request':
                        (WalletTransactionListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'wallet_transaction_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_create_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/create',
                'operation_id': 'watchlist_screening_entity_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_create_request',
                ],
                'required': [
                    'watchlist_screening_entity_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_create_request':
                        (WatchlistScreeningEntityCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_get_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/get',
                'operation_id': 'watchlist_screening_entity_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_get_request',
                ],
                'required': [
                    'watchlist_screening_entity_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_get_request':
                        (WatchlistScreeningEntityGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_history_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityHistoryListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/history/list',
                'operation_id': 'watchlist_screening_entity_history_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_history_list_request',
                ],
                'required': [
                    'watchlist_screening_entity_history_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_history_list_request':
                        (WatchlistScreeningEntityHistoryListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_history_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_hit_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityHitListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/hit/list',
                'operation_id': 'watchlist_screening_entity_hit_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_hit_list_request',
                ],
                'required': [
                    'watchlist_screening_entity_hit_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_hit_list_request':
                        (WatchlistScreeningEntityHitListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_hit_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/list',
                'operation_id': 'watchlist_screening_entity_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_list_request',
                ],
                'required': [
                    'watchlist_screening_entity_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_list_request':
                        (WatchlistScreeningEntityListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_program_get_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityProgramGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/program/get',
                'operation_id': 'watchlist_screening_entity_program_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_program_get_request',
                ],
                'required': [
                    'watchlist_screening_entity_program_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_program_get_request':
                        (WatchlistScreeningEntityProgramGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_program_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_program_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityProgramListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/program/list',
                'operation_id': 'watchlist_screening_entity_program_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_program_list_request',
                ],
                'required': [
                    'watchlist_screening_entity_program_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_program_list_request':
                        (WatchlistScreeningEntityProgramListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_program_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_review_create_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityReviewCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/review/create',
                'operation_id': 'watchlist_screening_entity_review_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_review_create_request',
                ],
                'required': [
                    'watchlist_screening_entity_review_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_review_create_request':
                        (WatchlistScreeningEntityReviewCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_review_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_review_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityReviewListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/review/list',
                'operation_id': 'watchlist_screening_entity_review_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_review_list_request',
                ],
                'required': [
                    'watchlist_screening_entity_review_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_review_list_request':
                        (WatchlistScreeningEntityReviewListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_review_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_entity_update_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningEntityUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/entity/update',
                'operation_id': 'watchlist_screening_entity_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_entity_update_request',
                ],
                'required': [
                    'watchlist_screening_entity_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_entity_update_request':
                        (WatchlistScreeningEntityUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_entity_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_create_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/create',
                'operation_id': 'watchlist_screening_individual_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_create_request',
                ],
                'required': [
                    'watchlist_screening_individual_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_create_request':
                        (WatchlistScreeningIndividualCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_get_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/get',
                'operation_id': 'watchlist_screening_individual_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_get_request',
                ],
                'required': [
                    'watchlist_screening_individual_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_get_request':
                        (WatchlistScreeningIndividualGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_history_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualHistoryListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/history/list',
                'operation_id': 'watchlist_screening_individual_history_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_history_list_request',
                ],
                'required': [
                    'watchlist_screening_individual_history_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_history_list_request':
                        (WatchlistScreeningIndividualHistoryListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_history_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_hit_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualHitListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/hit/list',
                'operation_id': 'watchlist_screening_individual_hit_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_hit_list_request',
                ],
                'required': [
                    'watchlist_screening_individual_hit_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_hit_list_request':
                        (WatchlistScreeningIndividualHitListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_hit_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/list',
                'operation_id': 'watchlist_screening_individual_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_list_request',
                ],
                'required': [
                    'watchlist_screening_individual_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_list_request':
                        (WatchlistScreeningIndividualListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_program_get_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualProgramGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/program/get',
                'operation_id': 'watchlist_screening_individual_program_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_program_get_request',
                ],
                'required': [
                    'watchlist_screening_individual_program_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_program_get_request':
                        (WatchlistScreeningIndividualProgramGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_program_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_program_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualProgramListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/program/list',
                'operation_id': 'watchlist_screening_individual_program_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_program_list_request',
                ],
                'required': [
                    'watchlist_screening_individual_program_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_program_list_request':
                        (WatchlistScreeningIndividualProgramListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_program_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_review_create_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualReviewCreateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/review/create',
                'operation_id': 'watchlist_screening_individual_review_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_review_create_request',
                ],
                'required': [
                    'watchlist_screening_individual_review_create_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_review_create_request':
                        (WatchlistScreeningIndividualReviewCreateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_review_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_review_list_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualReviewListResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/review/list',
                'operation_id': 'watchlist_screening_individual_review_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_review_list_request',
                ],
                'required': [
                    'watchlist_screening_individual_review_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_review_list_request':
                        (WatchlistScreeningIndividualReviewListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_review_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.watchlist_screening_individual_update_endpoint = _Endpoint(
            settings={
                'response_type': (WatchlistScreeningIndividualUpdateResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/watchlist_screening/individual/update',
                'operation_id': 'watchlist_screening_individual_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'watchlist_screening_individual_update_request',
                ],
                'required': [
                    'watchlist_screening_individual_update_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'watchlist_screening_individual_update_request':
                        (WatchlistScreeningIndividualUpdateRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'watchlist_screening_individual_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.webhook_verification_key_get_endpoint = _Endpoint(
            settings={
                'response_type': (WebhookVerificationKeyGetResponse,),
                'auth': [
                    'clientId',
                    'plaidVersion',
                    'secret'
                ],
                'endpoint_path': '/webhook_verification_key/get',
                'operation_id': 'webhook_verification_key_get',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'webhook_verification_key_get_request',
                ],
                'required': [
                    'webhook_verification_key_get_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'webhook_verification_key_get_request':
                        (WebhookVerificationKeyGetRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'webhook_verification_key_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def accounts_balance_get(
        self,
        accounts_balance_get_request,
        **kwargs
    ):
        """Retrieve real-time balance data  # noqa: E501

        The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.accounts_balance_get(accounts_balance_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            accounts_balance_get_request (AccountsBalanceGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AccountsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accounts_balance_get_request'] = \
            accounts_balance_get_request
        return self.accounts_balance_get_endpoint.call_with_http_info(**kwargs)

    def accounts_get(
        self,
        accounts_get_request,
        **kwargs
    ):
        """Retrieve accounts  # noqa: E501

        The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link's [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.accounts_get(accounts_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            accounts_get_request (AccountsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AccountsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['accounts_get_request'] = \
            accounts_get_request
        return self.accounts_get_endpoint.call_with_http_info(**kwargs)

    def application_get(
        self,
        application_get_request,
        **kwargs
    ):
        """Retrieve information about a Plaid application  # noqa: E501

        Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_get(application_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            application_get_request (ApplicationGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApplicationGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['application_get_request'] = \
            application_get_request
        return self.application_get_endpoint.call_with_http_info(**kwargs)

    def asset_report_audit_copy_create(
        self,
        asset_report_audit_copy_create_request,
        **kwargs
    ):
        """Create Asset Report Audit Copy  # noqa: E501

        Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_report_audit_copy_create(asset_report_audit_copy_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_audit_copy_create_request (AssetReportAuditCopyCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportAuditCopyCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_audit_copy_create_request'] = \
            asset_report_audit_copy_create_request
        return self.asset_report_audit_copy_create_endpoint.call_with_http_info(**kwargs)

    def asset_report_audit_copy_get(
        self,
        asset_report_audit_copy_get_request,
        **kwargs
    ):
        """Retrieve an Asset Report Audit Copy  # noqa: E501

        `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_report_audit_copy_get(asset_report_audit_copy_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_audit_copy_get_request (AssetReportAuditCopyGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_audit_copy_get_request'] = \
            asset_report_audit_copy_get_request
        return self.asset_report_audit_copy_get_endpoint.call_with_http_info(**kwargs)

    def asset_report_audit_copy_remove(
        self,
        asset_report_audit_copy_remove_request,
        **kwargs
    ):
        """Remove Asset Report Audit Copy  # noqa: E501

        The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_report_audit_copy_remove(asset_report_audit_copy_remove_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_audit_copy_remove_request (AssetReportAuditCopyRemoveRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportAuditCopyRemoveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_audit_copy_remove_request'] = \
            asset_report_audit_copy_remove_request
        return self.asset_report_audit_copy_remove_endpoint.call_with_http_info(**kwargs)

    def asset_report_create(
        self,
        asset_report_create_request,
        **kwargs
    ):
        """Create an Asset Report  # noqa: E501

        The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_report_create(asset_report_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_create_request (AssetReportCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_create_request'] = \
            asset_report_create_request
        return self.asset_report_create_endpoint.call_with_http_info(**kwargs)

    def asset_report_filter(
        self,
        asset_report_filter_request,
        **kwargs
    ):
        """Filter Asset Report  # noqa: E501

        By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_report_filter(asset_report_filter_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_filter_request (AssetReportFilterRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportFilterResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_filter_request'] = \
            asset_report_filter_request
        return self.asset_report_filter_endpoint.call_with_http_info(**kwargs)

    def asset_report_get(
        self,
        asset_report_get_request,
        **kwargs
    ):
        """Retrieve an Asset Report  # noqa: E501

        The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_report_get(asset_report_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_get_request (AssetReportGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_get_request'] = \
            asset_report_get_request
        return self.asset_report_get_endpoint.call_with_http_info(**kwargs)

    def asset_report_pdf_get(
        self,
        asset_report_pdf_get_request,
        **kwargs
    ):
        """Retrieve a PDF Asset Report  # noqa: E501

        The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_report_pdf_get(asset_report_pdf_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_pdf_get_request (AssetReportPDFGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_pdf_get_request'] = \
            asset_report_pdf_get_request
        return self.asset_report_pdf_get_endpoint.call_with_http_info(**kwargs)

    def asset_report_refresh(
        self,
        asset_report_refresh_request,
        **kwargs
    ):
        """Refresh an Asset Report  # noqa: E501

        An Asset Report is an immutable snapshot of a user's assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_report_refresh(asset_report_refresh_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_refresh_request (AssetReportRefreshRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportRefreshResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_refresh_request'] = \
            asset_report_refresh_request
        return self.asset_report_refresh_endpoint.call_with_http_info(**kwargs)

    def asset_report_remove(
        self,
        asset_report_remove_request,
        **kwargs
    ):
        """Delete an Asset Report  # noqa: E501

        The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.asset_report_remove(asset_report_remove_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_remove_request (AssetReportRemoveRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportRemoveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_remove_request'] = \
            asset_report_remove_request
        return self.asset_report_remove_endpoint.call_with_http_info(**kwargs)

    def auth_get(
        self,
        auth_get_request,
        **kwargs
    ):
        """Retrieve auth data  # noqa: E501

        The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_get(auth_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            auth_get_request (AuthGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AuthGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['auth_get_request'] = \
            auth_get_request
        return self.auth_get_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_balance_get(
        self,
        bank_transfer_balance_get_request,
        **kwargs
    ):
        """Get balance of your Bank Transfer account  # noqa: E501

        Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_balance_get(bank_transfer_balance_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_balance_get_request (BankTransferBalanceGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferBalanceGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_balance_get_request'] = \
            bank_transfer_balance_get_request
        return self.bank_transfer_balance_get_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_cancel(
        self,
        bank_transfer_cancel_request,
        **kwargs
    ):
        """Cancel a bank transfer  # noqa: E501

        Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_cancel(bank_transfer_cancel_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_cancel_request (BankTransferCancelRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferCancelResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_cancel_request'] = \
            bank_transfer_cancel_request
        return self.bank_transfer_cancel_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_create(
        self,
        bank_transfer_create_request,
        **kwargs
    ):
        """Create a bank transfer  # noqa: E501

        Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_create(bank_transfer_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_create_request (BankTransferCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_create_request'] = \
            bank_transfer_create_request
        return self.bank_transfer_create_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_event_list(
        self,
        bank_transfer_event_list_request,
        **kwargs
    ):
        """List bank transfer events  # noqa: E501

        Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_event_list(bank_transfer_event_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_event_list_request (BankTransferEventListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferEventListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_event_list_request'] = \
            bank_transfer_event_list_request
        return self.bank_transfer_event_list_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_event_sync(
        self,
        bank_transfer_event_sync_request,
        **kwargs
    ):
        """Sync bank transfer events  # noqa: E501

        `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_event_sync(bank_transfer_event_sync_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_event_sync_request (BankTransferEventSyncRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferEventSyncResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_event_sync_request'] = \
            bank_transfer_event_sync_request
        return self.bank_transfer_event_sync_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_get(
        self,
        bank_transfer_get_request,
        **kwargs
    ):
        """Retrieve a bank transfer  # noqa: E501

        The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_get(bank_transfer_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_get_request (BankTransferGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_get_request'] = \
            bank_transfer_get_request
        return self.bank_transfer_get_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_list(
        self,
        bank_transfer_list_request,
        **kwargs
    ):
        """List bank transfers  # noqa: E501

        Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_list(bank_transfer_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_list_request (BankTransferListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_list_request'] = \
            bank_transfer_list_request
        return self.bank_transfer_list_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_migrate_account(
        self,
        bank_transfer_migrate_account_request,
        **kwargs
    ):
        """Migrate account into Bank Transfers  # noqa: E501

        As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_migrate_account(bank_transfer_migrate_account_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_migrate_account_request (BankTransferMigrateAccountRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferMigrateAccountResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_migrate_account_request'] = \
            bank_transfer_migrate_account_request
        return self.bank_transfer_migrate_account_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_sweep_get(
        self,
        bank_transfer_sweep_get_request,
        **kwargs
    ):
        """Retrieve a sweep  # noqa: E501

        The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_sweep_get(bank_transfer_sweep_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_sweep_get_request (BankTransferSweepGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferSweepGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_sweep_get_request'] = \
            bank_transfer_sweep_get_request
        return self.bank_transfer_sweep_get_endpoint.call_with_http_info(**kwargs)

    def bank_transfer_sweep_list(
        self,
        bank_transfer_sweep_list_request,
        **kwargs
    ):
        """List sweeps  # noqa: E501

        The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bank_transfer_sweep_list(bank_transfer_sweep_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            bank_transfer_sweep_list_request (BankTransferSweepListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BankTransferSweepListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bank_transfer_sweep_list_request'] = \
            bank_transfer_sweep_list_request
        return self.bank_transfer_sweep_list_endpoint.call_with_http_info(**kwargs)

    def base_report_create(
        self,
        base_report_create_request,
        **kwargs
    ):
        """Create a Base Report  # noqa: E501

        This endpoint allows the customer to create a Base Report by passing in a user token. The Base Report will be generated based on the most recently linked item from the user token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.base_report_create(base_report_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            base_report_create_request (BaseReportCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseReportCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['base_report_create_request'] = \
            base_report_create_request
        return self.base_report_create_endpoint.call_with_http_info(**kwargs)

    def base_report_get(
        self,
        base_report_get_request,
        **kwargs
    ):
        """Retrieve a Base Report  # noqa: E501

        This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/link/token/create`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.base_report_get(base_report_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            base_report_get_request (BaseReportGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseReportGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['base_report_get_request'] = \
            base_report_get_request
        return self.base_report_get_endpoint.call_with_http_info(**kwargs)

    def beacon_account_risk_evaluate(
        self,
        beacon_account_risk_evaluate_request,
        **kwargs
    ):
        """Evaluate risk of a bank account  # noqa: E501

        Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_account_risk_evaluate(beacon_account_risk_evaluate_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_account_risk_evaluate_request (BeaconAccountRiskEvaluateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconAccountRiskEvaluateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_account_risk_evaluate_request'] = \
            beacon_account_risk_evaluate_request
        return self.beacon_account_risk_evaluate_endpoint.call_with_http_info(**kwargs)

    def beacon_duplicate_get(
        self,
        beacon_duplicate_get_request,
        **kwargs
    ):
        """Get a Beacon Duplicate  # noqa: E501

        Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_duplicate_get(beacon_duplicate_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_duplicate_get_request (BeaconDuplicateGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconDuplicateGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_duplicate_get_request'] = \
            beacon_duplicate_get_request
        return self.beacon_duplicate_get_endpoint.call_with_http_info(**kwargs)

    def beacon_report_create(
        self,
        beacon_report_create_request,
        **kwargs
    ):
        """Create a Beacon Report  # noqa: E501

        Create a fraud report for a given Beacon User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_report_create(beacon_report_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_report_create_request (BeaconReportCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconReportCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_report_create_request'] = \
            beacon_report_create_request
        return self.beacon_report_create_endpoint.call_with_http_info(**kwargs)

    def beacon_report_get(
        self,
        beacon_report_get_request,
        **kwargs
    ):
        """Get a Beacon Report  # noqa: E501

        Returns a Beacon report for a given Beacon report id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_report_get(beacon_report_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_report_get_request (BeaconReportGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconReportGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_report_get_request'] = \
            beacon_report_get_request
        return self.beacon_report_get_endpoint.call_with_http_info(**kwargs)

    def beacon_report_list(
        self,
        beacon_report_list_request,
        **kwargs
    ):
        """List Beacon Reports for a Beacon User  # noqa: E501

        Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_report_list(beacon_report_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_report_list_request (BeaconReportListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconReportListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_report_list_request'] = \
            beacon_report_list_request
        return self.beacon_report_list_endpoint.call_with_http_info(**kwargs)

    def beacon_report_syndication_get(
        self,
        beacon_report_syndication_get_request,
        **kwargs
    ):
        """Get a Beacon Report Syndication  # noqa: E501

        Returns a Beacon Report Syndication for a given Beacon Report Syndication id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_report_syndication_get(beacon_report_syndication_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_report_syndication_get_request (BeaconReportSyndicationGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconReportSyndicationGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_report_syndication_get_request'] = \
            beacon_report_syndication_get_request
        return self.beacon_report_syndication_get_endpoint.call_with_http_info(**kwargs)

    def beacon_report_syndication_list(
        self,
        beacon_report_syndication_list_request,
        **kwargs
    ):
        """List Beacon Report Syndications for a Beacon User  # noqa: E501

        Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_report_syndication_list(beacon_report_syndication_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_report_syndication_list_request (BeaconReportSyndicationListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconReportSyndicationListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_report_syndication_list_request'] = \
            beacon_report_syndication_list_request
        return self.beacon_report_syndication_list_endpoint.call_with_http_info(**kwargs)

    def beacon_user_create(
        self,
        beacon_user_create_request,
        **kwargs
    ):
        """Create a Beacon User  # noqa: E501

        Create and scan a Beacon User against your Beacon Program, according to your program's settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user's PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program's \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user's PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user's data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user's PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_user_create(beacon_user_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_user_create_request (BeaconUserCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconUserCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_user_create_request'] = \
            beacon_user_create_request
        return self.beacon_user_create_endpoint.call_with_http_info(**kwargs)

    def beacon_user_get(
        self,
        beacon_user_get_request,
        **kwargs
    ):
        """Get a Beacon User  # noqa: E501

        Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_user_get(beacon_user_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_user_get_request (BeaconUserGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconUserGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_user_get_request'] = \
            beacon_user_get_request
        return self.beacon_user_get_endpoint.call_with_http_info(**kwargs)

    def beacon_user_history_list(
        self,
        beacon_user_history_list_request,
        **kwargs
    ):
        """List a Beacon User's history  # noqa: E501

        List all changes to the Beacon User in reverse-chronological order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_user_history_list(beacon_user_history_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_user_history_list_request (BeaconUserHistoryListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconUserHistoryListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_user_history_list_request'] = \
            beacon_user_history_list_request
        return self.beacon_user_history_list_endpoint.call_with_http_info(**kwargs)

    def beacon_user_review(
        self,
        beacon_user_review_request,
        **kwargs
    ):
        """Review a Beacon User  # noqa: E501

        Update the status of a Beacon User.  When updating a Beacon User's status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User's status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User's status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User's status to \"cleared\". There are no restrictions on updating a Beacon User's status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_user_review(beacon_user_review_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_user_review_request (BeaconUserReviewRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconUserGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_user_review_request'] = \
            beacon_user_review_request
        return self.beacon_user_review_endpoint.call_with_http_info(**kwargs)

    def beacon_user_update(
        self,
        beacon_user_update_request,
        **kwargs
    ):
        """Update the identity data of a Beacon User  # noqa: E501

        Update the identity data for a Beacon User in your Beacon Program.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit a change to `/beacon/user/update`:    - The user's updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program's \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user's updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user's data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user's PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User's identity data before and after the update is retained as separate versions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beacon_user_update(beacon_user_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            beacon_user_update_request (BeaconUserUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BeaconUserUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['beacon_user_update_request'] = \
            beacon_user_update_request
        return self.beacon_user_update_endpoint.call_with_http_info(**kwargs)

    def categories_get(
        self,
        body,
        **kwargs
    ):
        """Get categories  # noqa: E501

        Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categories_get(body, async_req=True)
        >>> result = thread.get()

        Args:
            body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CategoriesGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.categories_get_endpoint.call_with_http_info(**kwargs)

    def consumer_report_pdf_get(
        self,
        consumer_report_pdf_get_request,
        **kwargs
    ):
        """Retrieve a PDF Reports  # noqa: E501

        Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.consumer_report_pdf_get(consumer_report_pdf_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            consumer_report_pdf_get_request (ConsumerReportPDFGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['consumer_report_pdf_get_request'] = \
            consumer_report_pdf_get_request
        return self.consumer_report_pdf_get_endpoint.call_with_http_info(**kwargs)

    def cra_bank_income_create(
        self,
        cra_bank_income_create_request,
        **kwargs
    ):
        """Create a CRA report for income verification  # noqa: E501

        `/cra/bank_income/create` creates a CRA report for income verification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cra_bank_income_create(cra_bank_income_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            cra_bank_income_create_request (CraBankIncomeCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CraBankIncomeCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cra_bank_income_create_request'] = \
            cra_bank_income_create_request
        return self.cra_bank_income_create_endpoint.call_with_http_info(**kwargs)

    def cra_bank_income_get(
        self,
        cra_bank_income_get_request,
        **kwargs
    ):
        """Retrieve information from the bank accounts used for income verification  # noqa: E501

        `/cra/bank_income/get` returns the bank income report(s) for a specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cra_bank_income_get(cra_bank_income_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            cra_bank_income_get_request (CraBankIncomeGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CraBankIncomeGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cra_bank_income_get_request'] = \
            cra_bank_income_get_request
        return self.cra_bank_income_get_endpoint.call_with_http_info(**kwargs)

    def cra_loans_applications_register(
        self,
        cra_loans_applications_register_request,
        **kwargs
    ):
        """Register loan applications and decisions.  # noqa: E501

        `/cra/loans/applications/register` registers loan applications and decisions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cra_loans_applications_register(cra_loans_applications_register_request, async_req=True)
        >>> result = thread.get()

        Args:
            cra_loans_applications_register_request (CraLoansApplicationsRegisterRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CraLoansApplicationsRegisterResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cra_loans_applications_register_request'] = \
            cra_loans_applications_register_request
        return self.cra_loans_applications_register_endpoint.call_with_http_info(**kwargs)

    def cra_loans_register(
        self,
        cra_loans_register_request,
        **kwargs
    ):
        """Register a list of loans to their applicants.  # noqa: E501

        `/cra/loans/register` registers a list of loans to their applicants.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cra_loans_register(cra_loans_register_request, async_req=True)
        >>> result = thread.get()

        Args:
            cra_loans_register_request (CRALoansRegisterRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CraLoansRegisterResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cra_loans_register_request'] = \
            cra_loans_register_request
        return self.cra_loans_register_endpoint.call_with_http_info(**kwargs)

    def cra_loans_unregister(
        self,
        cra_loans_unregister_request,
        **kwargs
    ):
        """Unregister a list of loans.  # noqa: E501

        `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cra_loans_unregister(cra_loans_unregister_request, async_req=True)
        >>> result = thread.get()

        Args:
            cra_loans_unregister_request (CraLoansUnregisterRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CraLoanUnregisterResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cra_loans_unregister_request'] = \
            cra_loans_unregister_request
        return self.cra_loans_unregister_endpoint.call_with_http_info(**kwargs)

    def cra_loans_update(
        self,
        cra_loans_update_request,
        **kwargs
    ):
        """Updates loan data.  # noqa: E501

        `/cra/loans/update` updates loan information such as the status and payment history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cra_loans_update(cra_loans_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            cra_loans_update_request (CraLoansUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CraLoansUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cra_loans_update_request'] = \
            cra_loans_update_request
        return self.cra_loans_update_endpoint.call_with_http_info(**kwargs)

    def cra_partner_insights_get(
        self,
        cra_partner_insights_get_request,
        **kwargs
    ):
        """Retrieve cash flow insights from the bank accounts used for income verification  # noqa: E501

        `/cra/partner_insights/get` returns cash flow insights for a specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cra_partner_insights_get(cra_partner_insights_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            cra_partner_insights_get_request (CraPartnerInsightsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CraPartnerInsightsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['cra_partner_insights_get_request'] = \
            cra_partner_insights_get_request
        return self.cra_partner_insights_get_endpoint.call_with_http_info(**kwargs)

    def create_payment_token(
        self,
        payment_initiation_payment_token_create_request,
        **kwargs
    ):
        """Create payment token  # noqa: E501

        The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment_token(payment_initiation_payment_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_payment_token_create_request (PaymentInitiationPaymentTokenCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationPaymentTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_payment_token_create_request'] = \
            payment_initiation_payment_token_create_request
        return self.create_payment_token_endpoint.call_with_http_info(**kwargs)

    def credit_asset_report_freddie_mac_get(
        self,
        asset_report_freddie_get_request,
        **kwargs
    ):
        """Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.  # noqa: E501

        The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac's JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_asset_report_freddie_mac_get(asset_report_freddie_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            asset_report_freddie_get_request (AssetReportFreddieGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportFreddieGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asset_report_freddie_get_request'] = \
            asset_report_freddie_get_request
        return self.credit_asset_report_freddie_mac_get_endpoint.call_with_http_info(**kwargs)

    def credit_audit_copy_token_create(
        self,
        credit_audit_copy_token_create_request,
        **kwargs
    ):
        """Create Asset or Income Report Audit Copy Token  # noqa: E501

        Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_audit_copy_token_create(credit_audit_copy_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_audit_copy_token_create_request (CreditAuditCopyTokenCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditAuditCopyTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_audit_copy_token_create_request'] = \
            credit_audit_copy_token_create_request
        return self.credit_audit_copy_token_create_endpoint.call_with_http_info(**kwargs)

    def credit_audit_copy_token_update(
        self,
        credit_audit_copy_token_update_request,
        **kwargs
    ):
        """Update an Audit Copy Token  # noqa: E501

        The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_audit_copy_token_update(credit_audit_copy_token_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_audit_copy_token_update_request (CreditAuditCopyTokenUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditAuditCopyTokenUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_audit_copy_token_update_request'] = \
            credit_audit_copy_token_update_request
        return self.credit_audit_copy_token_update_endpoint.call_with_http_info(**kwargs)

    def credit_bank_employment_get(
        self,
        credit_bank_employment_get_request,
        **kwargs
    ):
        """Retrieve information from the bank accounts used for employment verification  # noqa: E501

        `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_bank_employment_get(credit_bank_employment_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_bank_employment_get_request (CreditBankEmploymentGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditBankEmploymentGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_bank_employment_get_request'] = \
            credit_bank_employment_get_request
        return self.credit_bank_employment_get_endpoint.call_with_http_info(**kwargs)

    def credit_bank_income_get(
        self,
        credit_bank_income_get_request,
        **kwargs
    ):
        """Retrieve information from the bank accounts used for income verification  # noqa: E501

        `/credit/bank_income/get` returns the bank income report(s) for a specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_bank_income_get(credit_bank_income_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_bank_income_get_request (CreditBankIncomeGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditBankIncomeGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_bank_income_get_request'] = \
            credit_bank_income_get_request
        return self.credit_bank_income_get_endpoint.call_with_http_info(**kwargs)

    def credit_bank_income_pdf_get(
        self,
        credit_bank_income_pdf_get_request,
        **kwargs
    ):
        """Retrieve information from the bank accounts used for income verification in PDF format  # noqa: E501

        `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_bank_income_pdf_get(credit_bank_income_pdf_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_bank_income_pdf_get_request (CreditBankIncomePDFGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_bank_income_pdf_get_request'] = \
            credit_bank_income_pdf_get_request
        return self.credit_bank_income_pdf_get_endpoint.call_with_http_info(**kwargs)

    def credit_bank_income_refresh(
        self,
        credit_bank_income_refresh_request,
        **kwargs
    ):
        """Refresh a user's bank income information  # noqa: E501

        `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_bank_income_refresh(credit_bank_income_refresh_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_bank_income_refresh_request (CreditBankIncomeRefreshRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditBankIncomeRefreshResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_bank_income_refresh_request'] = \
            credit_bank_income_refresh_request
        return self.credit_bank_income_refresh_endpoint.call_with_http_info(**kwargs)

    def credit_bank_income_webhook_update(
        self,
        credit_bank_income_webhook_update_request,
        **kwargs
    ):
        """Subscribe and unsubscribe to proactive notifications for a user's income profile  # noqa: E501

        `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user's income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_bank_income_webhook_update(credit_bank_income_webhook_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_bank_income_webhook_update_request (CreditBankIncomeWebhookUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditBankIncomeWebhookUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_bank_income_webhook_update_request'] = \
            credit_bank_income_webhook_update_request
        return self.credit_bank_income_webhook_update_endpoint.call_with_http_info(**kwargs)

    def credit_bank_statements_uploads_get(
        self,
        credit_bank_statements_uploads_get_request,
        **kwargs
    ):
        """Retrieve data for a user's uploaded bank statements  # noqa: E501

        `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_bank_statements_uploads_get(credit_bank_statements_uploads_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_bank_statements_uploads_get_request (CreditBankStatementsUploadsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditBankStatementsUploadsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_bank_statements_uploads_get_request'] = \
            credit_bank_statements_uploads_get_request
        return self.credit_bank_statements_uploads_get_endpoint.call_with_http_info(**kwargs)

    def credit_employment_get(
        self,
        credit_employment_get_request,
        **kwargs
    ):
        """Retrieve a summary of an individual's employment information  # noqa: E501

        `/credit/employment/get` returns a list of items with employment information from a user's payroll provider that was verified by an end user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_employment_get(credit_employment_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_employment_get_request (CreditEmploymentGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditEmploymentGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_employment_get_request'] = \
            credit_employment_get_request
        return self.credit_employment_get_endpoint.call_with_http_info(**kwargs)

    def credit_freddie_mac_reports_get(
        self,
        credit_freddie_mac_reports_get_request,
        **kwargs
    ):
        """Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.  # noqa: E501

        The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_freddie_mac_reports_get(credit_freddie_mac_reports_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_freddie_mac_reports_get_request (CreditFreddieMacReportsGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditFreddieMacReportsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_freddie_mac_reports_get_request'] = \
            credit_freddie_mac_reports_get_request
        return self.credit_freddie_mac_reports_get_endpoint.call_with_http_info(**kwargs)

    def credit_payroll_income_get(
        self,
        credit_payroll_income_get_request,
        **kwargs
    ):
        """Retrieve a user's payroll information  # noqa: E501

        This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_payroll_income_get(credit_payroll_income_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_payroll_income_get_request (CreditPayrollIncomeGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditPayrollIncomeGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_payroll_income_get_request'] = \
            credit_payroll_income_get_request
        return self.credit_payroll_income_get_endpoint.call_with_http_info(**kwargs)

    def credit_payroll_income_parsing_config_update(
        self,
        credit_payroll_income_parsing_config_update_request,
        **kwargs
    ):
        """Update the parsing configuration for a document income verification  # noqa: E501

        `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_payroll_income_parsing_config_update(credit_payroll_income_parsing_config_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_payroll_income_parsing_config_update_request (CreditPayrollIncomeParsingConfigUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditPayrollIncomeParsingConfigUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_payroll_income_parsing_config_update_request'] = \
            credit_payroll_income_parsing_config_update_request
        return self.credit_payroll_income_parsing_config_update_endpoint.call_with_http_info(**kwargs)

    def credit_payroll_income_precheck(
        self,
        credit_payroll_income_precheck_request,
        **kwargs
    ):
        """Check income verification eligibility and optimize conversion  # noqa: E501

        `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_payroll_income_precheck(credit_payroll_income_precheck_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_payroll_income_precheck_request (CreditPayrollIncomePrecheckRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditPayrollIncomePrecheckResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_payroll_income_precheck_request'] = \
            credit_payroll_income_precheck_request
        return self.credit_payroll_income_precheck_endpoint.call_with_http_info(**kwargs)

    def credit_payroll_income_refresh(
        self,
        credit_payroll_income_refresh_request,
        **kwargs
    ):
        """Refresh a digital payroll income verification  # noqa: E501

        `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_payroll_income_refresh(credit_payroll_income_refresh_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_payroll_income_refresh_request (CreditPayrollIncomeRefreshRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditPayrollIncomeRefreshResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_payroll_income_refresh_request'] = \
            credit_payroll_income_refresh_request
        return self.credit_payroll_income_refresh_endpoint.call_with_http_info(**kwargs)

    def credit_payroll_income_risk_signals_get(
        self,
        credit_payroll_income_risk_signals_get_request,
        **kwargs
    ):
        """Retrieve fraud insights for a user's manually uploaded document(s).  # noqa: E501

        `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_payroll_income_risk_signals_get(credit_payroll_income_risk_signals_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_payroll_income_risk_signals_get_request (CreditPayrollIncomeRiskSignalsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditPayrollIncomeRiskSignalsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_payroll_income_risk_signals_get_request'] = \
            credit_payroll_income_risk_signals_get_request
        return self.credit_payroll_income_risk_signals_get_endpoint.call_with_http_info(**kwargs)

    def credit_relay_create(
        self,
        credit_relay_create_request,
        **kwargs
    ):
        """Create a relay token to share an Asset Report with a partner client  # noqa: E501

        Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You'll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_relay_create(credit_relay_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_relay_create_request (CreditRelayCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditRelayCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_relay_create_request'] = \
            credit_relay_create_request
        return self.credit_relay_create_endpoint.call_with_http_info(**kwargs)

    def credit_relay_get(
        self,
        credit_relay_get_request,
        **kwargs
    ):
        """Retrieve the reports associated with a relay token that was shared with you  # noqa: E501

        `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_relay_get(credit_relay_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_relay_get_request (CreditRelayGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetReportGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_relay_get_request'] = \
            credit_relay_get_request
        return self.credit_relay_get_endpoint.call_with_http_info(**kwargs)

    def credit_relay_pdf_get(
        self,
        credit_relay_pdf_get_request,
        **kwargs
    ):
        """Retrieve the pdf reports associated with a relay token that was shared with you (beta)  # noqa: E501

        `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_relay_pdf_get(credit_relay_pdf_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_relay_pdf_get_request (CreditRelayPDFGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_relay_pdf_get_request'] = \
            credit_relay_pdf_get_request
        return self.credit_relay_pdf_get_endpoint.call_with_http_info(**kwargs)

    def credit_relay_refresh(
        self,
        credit_relay_refresh_request,
        **kwargs
    ):
        """Refresh a report of a relay token  # noqa: E501

        The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_relay_refresh(credit_relay_refresh_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_relay_refresh_request (CreditRelayRefreshRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditRelayRefreshResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_relay_refresh_request'] = \
            credit_relay_refresh_request
        return self.credit_relay_refresh_endpoint.call_with_http_info(**kwargs)

    def credit_relay_remove(
        self,
        credit_relay_remove_request,
        **kwargs
    ):
        """Remove relay token  # noqa: E501

        The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_relay_remove(credit_relay_remove_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_relay_remove_request (CreditRelayRemoveRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditRelayRemoveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_relay_remove_request'] = \
            credit_relay_remove_request
        return self.credit_relay_remove_endpoint.call_with_http_info(**kwargs)

    def credit_report_audit_copy_remove(
        self,
        credit_audit_copy_token_remove_request,
        **kwargs
    ):
        """Remove an Audit Copy token  # noqa: E501

        The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_report_audit_copy_remove(credit_audit_copy_token_remove_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_audit_copy_token_remove_request (CreditAuditCopyTokenRemoveRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditAuditCopyTokenRemoveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_audit_copy_token_remove_request'] = \
            credit_audit_copy_token_remove_request
        return self.credit_report_audit_copy_remove_endpoint.call_with_http_info(**kwargs)

    def credit_sessions_get(
        self,
        credit_sessions_get_request,
        **kwargs
    ):
        """Retrieve Link sessions for your user  # noqa: E501

        This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.credit_sessions_get(credit_sessions_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            credit_sessions_get_request (CreditSessionsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreditSessionsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['credit_sessions_get_request'] = \
            credit_sessions_get_request
        return self.credit_sessions_get_endpoint.call_with_http_info(**kwargs)

    def dashboard_user_get(
        self,
        dashboard_user_get_request,
        **kwargs
    ):
        """Retrieve a dashboard user  # noqa: E501

        Retrieve information about a dashboard user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboard_user_get(dashboard_user_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            dashboard_user_get_request (DashboardUserGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DashboardUserGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dashboard_user_get_request'] = \
            dashboard_user_get_request
        return self.dashboard_user_get_endpoint.call_with_http_info(**kwargs)

    def dashboard_user_list(
        self,
        dashboard_user_list_request,
        **kwargs
    ):
        """List dashboard users  # noqa: E501

        List all dashboard users associated with your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboard_user_list(dashboard_user_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            dashboard_user_list_request (DashboardUserListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DashboardUserListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dashboard_user_list_request'] = \
            dashboard_user_list_request
        return self.dashboard_user_list_endpoint.call_with_http_info(**kwargs)

    def deposit_switch_alt_create(
        self,
        deposit_switch_alt_create_request,
        **kwargs
    ):
        """Create a deposit switch without using Plaid Exchange  # noqa: E501

        This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.deposit_switch_alt_create(deposit_switch_alt_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            deposit_switch_alt_create_request (DepositSwitchAltCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DepositSwitchAltCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deposit_switch_alt_create_request'] = \
            deposit_switch_alt_create_request
        return self.deposit_switch_alt_create_endpoint.call_with_http_info(**kwargs)

    def deposit_switch_create(
        self,
        deposit_switch_create_request,
        **kwargs
    ):
        """Create a deposit switch  # noqa: E501

        This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.deposit_switch_create(deposit_switch_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            deposit_switch_create_request (DepositSwitchCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DepositSwitchCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deposit_switch_create_request'] = \
            deposit_switch_create_request
        return self.deposit_switch_create_endpoint.call_with_http_info(**kwargs)

    def deposit_switch_get(
        self,
        deposit_switch_get_request,
        **kwargs
    ):
        """Retrieve a deposit switch  # noqa: E501

        This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.deposit_switch_get(deposit_switch_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            deposit_switch_get_request (DepositSwitchGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DepositSwitchGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deposit_switch_get_request'] = \
            deposit_switch_get_request
        return self.deposit_switch_get_endpoint.call_with_http_info(**kwargs)

    def deposit_switch_token_create(
        self,
        deposit_switch_token_create_request,
        **kwargs
    ):
        """Create a deposit switch token  # noqa: E501

        In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.deposit_switch_token_create(deposit_switch_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            deposit_switch_token_create_request (DepositSwitchTokenCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DepositSwitchTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['deposit_switch_token_create_request'] = \
            deposit_switch_token_create_request
        return self.deposit_switch_token_create_endpoint.call_with_http_info(**kwargs)

    def employers_search(
        self,
        employers_search_request,
        **kwargs
    ):
        """Search employer database  # noqa: E501

        `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.employers_search(employers_search_request, async_req=True)
        >>> result = thread.get()

        Args:
            employers_search_request (EmployersSearchRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmployersSearchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['employers_search_request'] = \
            employers_search_request
        return self.employers_search_endpoint.call_with_http_info(**kwargs)

    def employment_verification_get(
        self,
        employment_verification_get_request,
        **kwargs
    ):
        """(Deprecated) Retrieve a summary of an individual's employment information  # noqa: E501

        `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.employment_verification_get(employment_verification_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            employment_verification_get_request (EmploymentVerificationGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EmploymentVerificationGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['employment_verification_get_request'] = \
            employment_verification_get_request
        return self.employment_verification_get_endpoint.call_with_http_info(**kwargs)

    def fdx_notifications(
        self,
        fdx_notification,
        **kwargs
    ):
        """Webhook receiver for fdx notifications  # noqa: E501

        A generic webhook receiver endpoint for FDX Event Notifications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fdx_notifications(fdx_notification, async_req=True)
        >>> result = thread.get()

        Args:
            fdx_notification (FDXNotification):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fdx_notification'] = \
            fdx_notification
        return self.fdx_notifications_endpoint.call_with_http_info(**kwargs)

    def identity_documents_uploads_get(
        self,
        identity_documents_uploads_get_request,
        **kwargs
    ):
        """Returns uploaded document identity  # noqa: E501

        Use `/identity/documents/uploads/get` to retrieve document uploaded identity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.identity_documents_uploads_get(identity_documents_uploads_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            identity_documents_uploads_get_request (IdentityDocumentsUploadsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityDocumentsUploadsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['identity_documents_uploads_get_request'] = \
            identity_documents_uploads_get_request
        return self.identity_documents_uploads_get_endpoint.call_with_http_info(**kwargs)

    def identity_get(
        self,
        identity_get_request,
        **kwargs
    ):
        """Retrieve identity data  # noqa: E501

        The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.identity_get(identity_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            identity_get_request (IdentityGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['identity_get_request'] = \
            identity_get_request
        return self.identity_get_endpoint.call_with_http_info(**kwargs)

    def identity_match(
        self,
        identity_match_request,
        **kwargs
    ):
        """Retrieve identity match score  # noqa: E501

        The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.identity_match(identity_match_request, async_req=True)
        >>> result = thread.get()

        Args:
            identity_match_request (IdentityMatchRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityMatchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['identity_match_request'] = \
            identity_match_request
        return self.identity_match_endpoint.call_with_http_info(**kwargs)

    def identity_refresh(
        self,
        identity_refresh_request,
        **kwargs
    ):
        """Refresh identity data  # noqa: E501

        `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.identity_refresh(identity_refresh_request, async_req=True)
        >>> result = thread.get()

        Args:
            identity_refresh_request (IdentityRefreshRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityRefreshResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['identity_refresh_request'] = \
            identity_refresh_request
        return self.identity_refresh_endpoint.call_with_http_info(**kwargs)

    def identity_verification_autofill_create(
        self,
        identity_verification_autofill_create_request,
        **kwargs
    ):
        """Create autofill for an Identity Verification  # noqa: E501

        Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.identity_verification_autofill_create(identity_verification_autofill_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            identity_verification_autofill_create_request (IdentityVerificationAutofillCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityVerificationAutofillCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['identity_verification_autofill_create_request'] = \
            identity_verification_autofill_create_request
        return self.identity_verification_autofill_create_endpoint.call_with_http_info(**kwargs)

    def identity_verification_create(
        self,
        identity_verification_create_request,
        **kwargs
    ):
        """Create a new Identity Verification  # noqa: E501

        Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don't know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.identity_verification_create(identity_verification_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            identity_verification_create_request (IdentityVerificationCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityVerificationCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['identity_verification_create_request'] = \
            identity_verification_create_request
        return self.identity_verification_create_endpoint.call_with_http_info(**kwargs)

    def identity_verification_get(
        self,
        identity_verification_get_request,
        **kwargs
    ):
        """Retrieve Identity Verification  # noqa: E501

        Retrieve a previously created Identity Verification.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.identity_verification_get(identity_verification_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            identity_verification_get_request (IdentityVerificationGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityVerificationGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['identity_verification_get_request'] = \
            identity_verification_get_request
        return self.identity_verification_get_endpoint.call_with_http_info(**kwargs)

    def identity_verification_list(
        self,
        identity_verification_list_request,
        **kwargs
    ):
        """List Identity Verifications  # noqa: E501

        Filter and list Identity Verifications created by your account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.identity_verification_list(identity_verification_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            identity_verification_list_request (IdentityVerificationListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityVerificationListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['identity_verification_list_request'] = \
            identity_verification_list_request
        return self.identity_verification_list_endpoint.call_with_http_info(**kwargs)

    def identity_verification_retry(
        self,
        identity_verification_retry_request,
        **kwargs
    ):
        """Retry an Identity Verification  # noqa: E501

        Allow a customer to retry their Identity Verification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.identity_verification_retry(identity_verification_retry_request, async_req=True)
        >>> result = thread.get()

        Args:
            identity_verification_retry_request (IdentityVerificationRetryRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IdentityVerificationRetryResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['identity_verification_retry_request'] = \
            identity_verification_retry_request
        return self.identity_verification_retry_endpoint.call_with_http_info(**kwargs)

    def income_verification_create(
        self,
        income_verification_create_request,
        **kwargs
    ):
        """(Deprecated) Create an income verification instance  # noqa: E501

        `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.income_verification_create(income_verification_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            income_verification_create_request (IncomeVerificationCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IncomeVerificationCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['income_verification_create_request'] = \
            income_verification_create_request
        return self.income_verification_create_endpoint.call_with_http_info(**kwargs)

    def income_verification_documents_download(
        self,
        income_verification_documents_download_request,
        **kwargs
    ):
        """(Deprecated) Download the original documents used for income verification  # noqa: E501

        `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.income_verification_documents_download(income_verification_documents_download_request, async_req=True)
        >>> result = thread.get()

        Args:
            income_verification_documents_download_request (IncomeVerificationDocumentsDownloadRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['income_verification_documents_download_request'] = \
            income_verification_documents_download_request
        return self.income_verification_documents_download_endpoint.call_with_http_info(**kwargs)

    def income_verification_paystubs_get(
        self,
        income_verification_paystubs_get_request,
        **kwargs
    ):
        """(Deprecated) Retrieve information from the paystubs used for income verification  # noqa: E501

        `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.income_verification_paystubs_get(income_verification_paystubs_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            income_verification_paystubs_get_request (IncomeVerificationPaystubsGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IncomeVerificationPaystubsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['income_verification_paystubs_get_request'] = \
            income_verification_paystubs_get_request
        return self.income_verification_paystubs_get_endpoint.call_with_http_info(**kwargs)

    def income_verification_precheck(
        self,
        income_verification_precheck_request,
        **kwargs
    ):
        """(Deprecated) Check digital income verification eligibility and optimize conversion  # noqa: E501

        `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.income_verification_precheck(income_verification_precheck_request, async_req=True)
        >>> result = thread.get()

        Args:
            income_verification_precheck_request (IncomeVerificationPrecheckRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IncomeVerificationPrecheckResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['income_verification_precheck_request'] = \
            income_verification_precheck_request
        return self.income_verification_precheck_endpoint.call_with_http_info(**kwargs)

    def income_verification_taxforms_get(
        self,
        income_verification_taxforms_get_request,
        **kwargs
    ):
        """(Deprecated) Retrieve information from the tax documents used for income verification  # noqa: E501

        `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user''s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.income_verification_taxforms_get(income_verification_taxforms_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            income_verification_taxforms_get_request (IncomeVerificationTaxformsGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IncomeVerificationTaxformsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['income_verification_taxforms_get_request'] = \
            income_verification_taxforms_get_request
        return self.income_verification_taxforms_get_endpoint.call_with_http_info(**kwargs)

    def institutions_get(
        self,
        institutions_get_request,
        **kwargs
    ):
        """Get details of all supported institutions  # noqa: E501

        Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.institutions_get(institutions_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            institutions_get_request (InstitutionsGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InstitutionsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['institutions_get_request'] = \
            institutions_get_request
        return self.institutions_get_endpoint.call_with_http_info(**kwargs)

    def institutions_get_by_id(
        self,
        institutions_get_by_id_request,
        **kwargs
    ):
        """Get details of an institution  # noqa: E501

        Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.institutions_get_by_id(institutions_get_by_id_request, async_req=True)
        >>> result = thread.get()

        Args:
            institutions_get_by_id_request (InstitutionsGetByIdRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InstitutionsGetByIdResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['institutions_get_by_id_request'] = \
            institutions_get_by_id_request
        return self.institutions_get_by_id_endpoint.call_with_http_info(**kwargs)

    def institutions_search(
        self,
        institutions_search_request,
        **kwargs
    ):
        """Search institutions  # noqa: E501

        Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.institutions_search(institutions_search_request, async_req=True)
        >>> result = thread.get()

        Args:
            institutions_search_request (InstitutionsSearchRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InstitutionsSearchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['institutions_search_request'] = \
            institutions_search_request
        return self.institutions_search_endpoint.call_with_http_info(**kwargs)

    def investments_auth_get(
        self,
        investments_auth_get_request,
        **kwargs
    ):
        """Get data needed to authorize an investments transfer  # noqa: E501

        The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investments_auth_get(investments_auth_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            investments_auth_get_request (InvestmentsAuthGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InvestmentsAuthGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['investments_auth_get_request'] = \
            investments_auth_get_request
        return self.investments_auth_get_endpoint.call_with_http_info(**kwargs)

    def investments_holdings_get(
        self,
        investments_holdings_get_request,
        **kwargs
    ):
        """Get Investment holdings  # noqa: E501

        The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investments_holdings_get(investments_holdings_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            investments_holdings_get_request (InvestmentsHoldingsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InvestmentsHoldingsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['investments_holdings_get_request'] = \
            investments_holdings_get_request
        return self.investments_holdings_get_endpoint.call_with_http_info(**kwargs)

    def investments_refresh(
        self,
        investments_refresh_request,
        **kwargs
    ):
        """Refresh investment data  # noqa: E501

        `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. \"Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investments_refresh(investments_refresh_request, async_req=True)
        >>> result = thread.get()

        Args:
            investments_refresh_request (InvestmentsRefreshRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InvestmentsRefreshResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['investments_refresh_request'] = \
            investments_refresh_request
        return self.investments_refresh_endpoint.call_with_http_info(**kwargs)

    def investments_transactions_get(
        self,
        investments_transactions_get_request,
        **kwargs
    ):
        """Get investment transactions  # noqa: E501

        The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investments_transactions_get(investments_transactions_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            investments_transactions_get_request (InvestmentsTransactionsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InvestmentsTransactionsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['investments_transactions_get_request'] = \
            investments_transactions_get_request
        return self.investments_transactions_get_endpoint.call_with_http_info(**kwargs)

    def item_access_token_invalidate(
        self,
        item_access_token_invalidate_request,
        **kwargs
    ):
        """Invalidate access_token  # noqa: E501

        By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_access_token_invalidate(item_access_token_invalidate_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_access_token_invalidate_request (ItemAccessTokenInvalidateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemAccessTokenInvalidateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_access_token_invalidate_request'] = \
            item_access_token_invalidate_request
        return self.item_access_token_invalidate_endpoint.call_with_http_info(**kwargs)

    def item_activity_list(
        self,
        item_activity_list_request,
        **kwargs
    ):
        """List a historical log of user consent events  # noqa: E501

        List a historical log of user consent events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_activity_list(item_activity_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_activity_list_request (ItemActivityListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemActivityListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_activity_list_request'] = \
            item_activity_list_request
        return self.item_activity_list_endpoint.call_with_http_info(**kwargs)

    def item_application_list(
        self,
        item_application_list_request,
        **kwargs
    ):
        """List a user’s connected applications  # noqa: E501

        List a user’s connected applications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_application_list(item_application_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_application_list_request (ItemApplicationListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemApplicationListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_application_list_request'] = \
            item_application_list_request
        return self.item_application_list_endpoint.call_with_http_info(**kwargs)

    def item_application_scopes_update(
        self,
        item_application_scopes_update_request,
        **kwargs
    ):
        """Update the scopes of access for a particular application  # noqa: E501

        Enable consumers to update product access on selected accounts for an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_application_scopes_update(item_application_scopes_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_application_scopes_update_request (ItemApplicationScopesUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemApplicationScopesUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_application_scopes_update_request'] = \
            item_application_scopes_update_request
        return self.item_application_scopes_update_endpoint.call_with_http_info(**kwargs)

    def item_application_unlink(
        self,
        item_application_unlink_request,
        **kwargs
    ):
        """Unlink a user’s connected application  # noqa: E501

        Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_application_unlink(item_application_unlink_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_application_unlink_request (ItemApplicationUnlinkRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemApplicationUnlinkResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_application_unlink_request'] = \
            item_application_unlink_request
        return self.item_application_unlink_endpoint.call_with_http_info(**kwargs)

    def item_create_public_token(
        self,
        item_public_token_create_request,
        **kwargs
    ):
        """Create public token  # noqa: E501

        Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_create_public_token(item_public_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_public_token_create_request (ItemPublicTokenCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemPublicTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_public_token_create_request'] = \
            item_public_token_create_request
        return self.item_create_public_token_endpoint.call_with_http_info(**kwargs)

    def item_get(
        self,
        item_get_request,
        **kwargs
    ):
        """Retrieve an Item  # noqa: E501

        Returns information about the status of an Item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_get(item_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_get_request (ItemGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_get_request'] = \
            item_get_request
        return self.item_get_endpoint.call_with_http_info(**kwargs)

    def item_import(
        self,
        item_import_request,
        **kwargs
    ):
        """Import Item  # noqa: E501

        `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_import(item_import_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_import_request (ItemImportRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemImportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_import_request'] = \
            item_import_request
        return self.item_import_endpoint.call_with_http_info(**kwargs)

    def item_public_token_exchange(
        self,
        item_public_token_exchange_request,
        **kwargs
    ):
        """Exchange public token for an access token  # noqa: E501

        Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_public_token_exchange(item_public_token_exchange_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_public_token_exchange_request (ItemPublicTokenExchangeRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemPublicTokenExchangeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_public_token_exchange_request'] = \
            item_public_token_exchange_request
        return self.item_public_token_exchange_endpoint.call_with_http_info(**kwargs)

    def item_remove(
        self,
        item_remove_request,
        **kwargs
    ):
        """Remove an Item  # noqa: E501

        The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution's OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_remove(item_remove_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_remove_request (ItemRemoveRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemRemoveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_remove_request'] = \
            item_remove_request
        return self.item_remove_endpoint.call_with_http_info(**kwargs)

    def item_webhook_update(
        self,
        item_webhook_update_request,
        **kwargs
    ):
        """Update Webhook URL  # noqa: E501

        The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.item_webhook_update(item_webhook_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            item_webhook_update_request (ItemWebhookUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemWebhookUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_webhook_update_request'] = \
            item_webhook_update_request
        return self.item_webhook_update_endpoint.call_with_http_info(**kwargs)

    def liabilities_get(
        self,
        liabilities_get_request,
        **kwargs
    ):
        """Retrieve Liabilities data  # noqa: E501

        The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.liabilities_get(liabilities_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            liabilities_get_request (LiabilitiesGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LiabilitiesGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['liabilities_get_request'] = \
            liabilities_get_request
        return self.liabilities_get_endpoint.call_with_http_info(**kwargs)

    def link_delivery_create(
        self,
        link_delivery_create_request,
        **kwargs
    ):
        """Create Hosted Link session  # noqa: E501

        Use the `/link_delivery/create` endpoint to create a Hosted Link session.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.link_delivery_create(link_delivery_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            link_delivery_create_request (LinkDeliveryCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LinkDeliveryCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['link_delivery_create_request'] = \
            link_delivery_create_request
        return self.link_delivery_create_endpoint.call_with_http_info(**kwargs)

    def link_delivery_get(
        self,
        link_delivery_get_request,
        **kwargs
    ):
        """Get Hosted Link session  # noqa: E501

        Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.link_delivery_get(link_delivery_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            link_delivery_get_request (LinkDeliveryGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LinkDeliveryGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['link_delivery_get_request'] = \
            link_delivery_get_request
        return self.link_delivery_get_endpoint.call_with_http_info(**kwargs)

    def link_oauth_correlation_id_exchange(
        self,
        link_o_auth_correlation_id_exchange_request,
        **kwargs
    ):
        """Exchange the Link Correlation Id for a Link Token  # noqa: E501

        Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for 'payment_initiation' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the 'link_token'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.link_oauth_correlation_id_exchange(link_o_auth_correlation_id_exchange_request, async_req=True)
        >>> result = thread.get()

        Args:
            link_o_auth_correlation_id_exchange_request (LinkOAuthCorrelationIdExchangeRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LinkOAuthCorrelationIdExchangeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['link_o_auth_correlation_id_exchange_request'] = \
            link_o_auth_correlation_id_exchange_request
        return self.link_oauth_correlation_id_exchange_endpoint.call_with_http_info(**kwargs)

    def link_profile_eligibility_check(
        self,
        link_profile_eligibility_check_request,
        **kwargs
    ):
        """Check profile eligibility  # noqa: E501

        The `/link/profile/eligibility/check` endpoint can be used to check whether a user with the supplied phone number has a saved profile that satisfies customer-defined eligibility requirements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.link_profile_eligibility_check(link_profile_eligibility_check_request, async_req=True)
        >>> result = thread.get()

        Args:
            link_profile_eligibility_check_request (LinkProfileEligibilityCheckRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LinkProfileEligibilityCheckResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['link_profile_eligibility_check_request'] = \
            link_profile_eligibility_check_request
        return self.link_profile_eligibility_check_endpoint.call_with_http_info(**kwargs)

    def link_token_create(
        self,
        link_token_create_request,
        **kwargs
    ):
        """Create Link Token  # noqa: E501

        The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.link_token_create(link_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            link_token_create_request (LinkTokenCreateRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LinkTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['link_token_create_request'] = \
            link_token_create_request
        return self.link_token_create_endpoint.call_with_http_info(**kwargs)

    def link_token_get(
        self,
        link_token_get_request,
        **kwargs
    ):
        """Get Link Token  # noqa: E501

        The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.link_token_get(link_token_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            link_token_get_request (LinkTokenGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LinkTokenGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['link_token_get_request'] = \
            link_token_get_request
        return self.link_token_get_endpoint.call_with_http_info(**kwargs)

    def partner_customer_create(
        self,
        partner_customer_create_request,
        **kwargs
    ):
        """Creates a new end customer for a Plaid reseller.  # noqa: E501

        The `/partner/customer/create` endpoint is used by reseller partners to create end customers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partner_customer_create(partner_customer_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            partner_customer_create_request (PartnerCustomerCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartnerCustomerCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['partner_customer_create_request'] = \
            partner_customer_create_request
        return self.partner_customer_create_endpoint.call_with_http_info(**kwargs)

    def partner_customer_enable(
        self,
        partner_customer_enable_request,
        **kwargs
    ):
        """Enables a Plaid reseller's end customer in the Production environment.  # noqa: E501

        The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partner_customer_enable(partner_customer_enable_request, async_req=True)
        >>> result = thread.get()

        Args:
            partner_customer_enable_request (PartnerCustomerEnableRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartnerCustomerEnableResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['partner_customer_enable_request'] = \
            partner_customer_enable_request
        return self.partner_customer_enable_endpoint.call_with_http_info(**kwargs)

    def partner_customer_get(
        self,
        partner_customer_get_request,
        **kwargs
    ):
        """Returns a Plaid reseller's end customer.  # noqa: E501

        The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partner_customer_get(partner_customer_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            partner_customer_get_request (PartnerCustomerGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartnerCustomerGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['partner_customer_get_request'] = \
            partner_customer_get_request
        return self.partner_customer_get_endpoint.call_with_http_info(**kwargs)

    def partner_customer_oauth_institutions_get(
        self,
        partner_customer_o_auth_institutions_get_request,
        **kwargs
    ):
        """Returns OAuth-institution registration information for a given end customer.  # noqa: E501

        The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partner_customer_oauth_institutions_get(partner_customer_o_auth_institutions_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            partner_customer_o_auth_institutions_get_request (PartnerCustomerOAuthInstitutionsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartnerCustomerOAuthInstitutionsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['partner_customer_o_auth_institutions_get_request'] = \
            partner_customer_o_auth_institutions_get_request
        return self.partner_customer_oauth_institutions_get_endpoint.call_with_http_info(**kwargs)

    def partner_customer_remove(
        self,
        partner_customer_remove_request,
        **kwargs
    ):
        """Removes a Plaid reseller's end customer.  # noqa: E501

        The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.partner_customer_remove(partner_customer_remove_request, async_req=True)
        >>> result = thread.get()

        Args:
            partner_customer_remove_request (PartnerCustomerRemoveRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartnerCustomerRemoveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['partner_customer_remove_request'] = \
            partner_customer_remove_request
        return self.partner_customer_remove_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_consent_create(
        self,
        payment_initiation_consent_create_request,
        **kwargs
    ):
        """Create payment consent  # noqa: E501

        The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_consent_create(payment_initiation_consent_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_consent_create_request (PaymentInitiationConsentCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationConsentCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_consent_create_request'] = \
            payment_initiation_consent_create_request
        return self.payment_initiation_consent_create_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_consent_get(
        self,
        payment_initiation_consent_get_request,
        **kwargs
    ):
        """Get payment consent  # noqa: E501

        The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_consent_get(payment_initiation_consent_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_consent_get_request (PaymentInitiationConsentGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationConsentGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_consent_get_request'] = \
            payment_initiation_consent_get_request
        return self.payment_initiation_consent_get_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_consent_payment_execute(
        self,
        payment_initiation_consent_payment_execute_request,
        **kwargs
    ):
        """Execute a single payment using consent  # noqa: E501

        The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_consent_payment_execute(payment_initiation_consent_payment_execute_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_consent_payment_execute_request (PaymentInitiationConsentPaymentExecuteRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationConsentPaymentExecuteResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_consent_payment_execute_request'] = \
            payment_initiation_consent_payment_execute_request
        return self.payment_initiation_consent_payment_execute_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_consent_revoke(
        self,
        payment_initiation_consent_revoke_request,
        **kwargs
    ):
        """Revoke payment consent  # noqa: E501

        The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_consent_revoke(payment_initiation_consent_revoke_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_consent_revoke_request (PaymentInitiationConsentRevokeRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationConsentRevokeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_consent_revoke_request'] = \
            payment_initiation_consent_revoke_request
        return self.payment_initiation_consent_revoke_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_payment_create(
        self,
        payment_initiation_payment_create_request,
        **kwargs
    ):
        """Create a payment  # noqa: E501

        After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_payment_create(payment_initiation_payment_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_payment_create_request (PaymentInitiationPaymentCreateRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationPaymentCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_payment_create_request'] = \
            payment_initiation_payment_create_request
        return self.payment_initiation_payment_create_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_payment_get(
        self,
        payment_initiation_payment_get_request,
        **kwargs
    ):
        """Get payment details  # noqa: E501

        The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_payment_get(payment_initiation_payment_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_payment_get_request (PaymentInitiationPaymentGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationPaymentGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_payment_get_request'] = \
            payment_initiation_payment_get_request
        return self.payment_initiation_payment_get_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_payment_list(
        self,
        payment_initiation_payment_list_request,
        **kwargs
    ):
        """List payments  # noqa: E501

        The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_payment_list(payment_initiation_payment_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_payment_list_request (PaymentInitiationPaymentListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationPaymentListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_payment_list_request'] = \
            payment_initiation_payment_list_request
        return self.payment_initiation_payment_list_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_payment_reverse(
        self,
        payment_initiation_payment_reverse_request,
        **kwargs
    ):
        """Reverse an existing payment  # noqa: E501

        Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_payment_reverse(payment_initiation_payment_reverse_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_payment_reverse_request (PaymentInitiationPaymentReverseRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationPaymentReverseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_payment_reverse_request'] = \
            payment_initiation_payment_reverse_request
        return self.payment_initiation_payment_reverse_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_recipient_create(
        self,
        payment_initiation_recipient_create_request,
        **kwargs
    ):
        """Create payment recipient  # noqa: E501

        Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_recipient_create(payment_initiation_recipient_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_recipient_create_request (PaymentInitiationRecipientCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationRecipientCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_recipient_create_request'] = \
            payment_initiation_recipient_create_request
        return self.payment_initiation_recipient_create_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_recipient_get(
        self,
        payment_initiation_recipient_get_request,
        **kwargs
    ):
        """Get payment recipient  # noqa: E501

        Get details about a payment recipient you have previously created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_recipient_get(payment_initiation_recipient_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_recipient_get_request (PaymentInitiationRecipientGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationRecipientGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_recipient_get_request'] = \
            payment_initiation_recipient_get_request
        return self.payment_initiation_recipient_get_endpoint.call_with_http_info(**kwargs)

    def payment_initiation_recipient_list(
        self,
        payment_initiation_recipient_list_request,
        **kwargs
    ):
        """List payment recipients  # noqa: E501

        The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_initiation_recipient_list(payment_initiation_recipient_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_initiation_recipient_list_request (PaymentInitiationRecipientListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentInitiationRecipientListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_initiation_recipient_list_request'] = \
            payment_initiation_recipient_list_request
        return self.payment_initiation_recipient_list_endpoint.call_with_http_info(**kwargs)

    def payment_profile_create(
        self,
        payment_profile_create_request,
        **kwargs
    ):
        """Create payment profile  # noqa: E501

        Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_profile_create(payment_profile_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_profile_create_request (PaymentProfileCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentProfileCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_profile_create_request'] = \
            payment_profile_create_request
        return self.payment_profile_create_endpoint.call_with_http_info(**kwargs)

    def payment_profile_get(
        self,
        payment_profile_get_request,
        **kwargs
    ):
        """Get payment profile  # noqa: E501

        Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_profile_get(payment_profile_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_profile_get_request (PaymentProfileGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentProfileGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_profile_get_request'] = \
            payment_profile_get_request
        return self.payment_profile_get_endpoint.call_with_http_info(**kwargs)

    def payment_profile_remove(
        self,
        payment_profile_remove_request,
        **kwargs
    ):
        """Remove payment profile  # noqa: E501

        Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payment_profile_remove(payment_profile_remove_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_profile_remove_request (PaymentProfileRemoveRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PaymentProfileRemoveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['payment_profile_remove_request'] = \
            payment_profile_remove_request
        return self.payment_profile_remove_endpoint.call_with_http_info(**kwargs)

    def processor_account_get(
        self,
        processor_account_get_request,
        **kwargs
    ):
        """Retrieve the account associated with a processor token  # noqa: E501

        This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_account_get(processor_account_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_account_get_request (ProcessorAccountGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorAccountGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_account_get_request'] = \
            processor_account_get_request
        return self.processor_account_get_endpoint.call_with_http_info(**kwargs)

    def processor_apex_processor_token_create(
        self,
        processor_apex_processor_token_create_request,
        **kwargs
    ):
        """Create Apex bank account token  # noqa: E501

        Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_apex_processor_token_create(processor_apex_processor_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_apex_processor_token_create_request (ProcessorApexProcessorTokenCreateRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_apex_processor_token_create_request'] = \
            processor_apex_processor_token_create_request
        return self.processor_apex_processor_token_create_endpoint.call_with_http_info(**kwargs)

    def processor_auth_get(
        self,
        processor_auth_get_request,
        **kwargs
    ):
        """Retrieve Auth data  # noqa: E501

        The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that''s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_auth_get(processor_auth_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_auth_get_request (ProcessorAuthGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorAuthGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_auth_get_request'] = \
            processor_auth_get_request
        return self.processor_auth_get_endpoint.call_with_http_info(**kwargs)

    def processor_balance_get(
        self,
        processor_balance_get_request,
        **kwargs
    ):
        """Retrieve Balance data  # noqa: E501

        The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_balance_get(processor_balance_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_balance_get_request (ProcessorBalanceGetRequest): The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorBalanceGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_balance_get_request'] = \
            processor_balance_get_request
        return self.processor_balance_get_endpoint.call_with_http_info(**kwargs)

    def processor_bank_transfer_create(
        self,
        processor_bank_transfer_create_request,
        **kwargs
    ):
        """Create a bank transfer as a processor  # noqa: E501

        Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_bank_transfer_create(processor_bank_transfer_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_bank_transfer_create_request (ProcessorBankTransferCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorBankTransferCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_bank_transfer_create_request'] = \
            processor_bank_transfer_create_request
        return self.processor_bank_transfer_create_endpoint.call_with_http_info(**kwargs)

    def processor_identity_get(
        self,
        processor_identity_get_request,
        **kwargs
    ):
        """Retrieve Identity data  # noqa: E501

        The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_identity_get(processor_identity_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_identity_get_request (ProcessorIdentityGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorIdentityGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_identity_get_request'] = \
            processor_identity_get_request
        return self.processor_identity_get_endpoint.call_with_http_info(**kwargs)

    def processor_identity_match(
        self,
        processor_identity_match_request,
        **kwargs
    ):
        """Retrieve identity match score  # noqa: E501

        The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_identity_match(processor_identity_match_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_identity_match_request (ProcessorIdentityMatchRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorIdentityMatchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_identity_match_request'] = \
            processor_identity_match_request
        return self.processor_identity_match_endpoint.call_with_http_info(**kwargs)

    def processor_liabilities_get(
        self,
        processor_liabilities_get_request,
        **kwargs
    ):
        """Retrieve Liabilities data  # noqa: E501

        The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_liabilities_get(processor_liabilities_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_liabilities_get_request (ProcessorLiabilitiesGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorLiabilitiesGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_liabilities_get_request'] = \
            processor_liabilities_get_request
        return self.processor_liabilities_get_endpoint.call_with_http_info(**kwargs)

    def processor_signal_decision_report(
        self,
        processor_signal_decision_report_request,
        **kwargs
    ):
        """Report whether you initiated an ACH transaction  # noqa: E501

        After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_signal_decision_report(processor_signal_decision_report_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_signal_decision_report_request (ProcessorSignalDecisionReportRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorSignalDecisionReportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_signal_decision_report_request'] = \
            processor_signal_decision_report_request
        return self.processor_signal_decision_report_endpoint.call_with_http_info(**kwargs)

    def processor_signal_evaluate(
        self,
        processor_signal_evaluate_request,
        **kwargs
    ):
        """Evaluate a planned ACH transaction  # noqa: E501

        Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_signal_evaluate(processor_signal_evaluate_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_signal_evaluate_request (ProcessorSignalEvaluateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorSignalEvaluateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_signal_evaluate_request'] = \
            processor_signal_evaluate_request
        return self.processor_signal_evaluate_endpoint.call_with_http_info(**kwargs)

    def processor_signal_prepare(
        self,
        processor_signal_prepare_request,
        **kwargs
    ):
        """Opt-in a processor token to Signal  # noqa: E501

        When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_signal_prepare(processor_signal_prepare_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_signal_prepare_request (ProcessorSignalPrepareRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorSignalPrepareResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_signal_prepare_request'] = \
            processor_signal_prepare_request
        return self.processor_signal_prepare_endpoint.call_with_http_info(**kwargs)

    def processor_signal_return_report(
        self,
        processor_signal_return_report_request,
        **kwargs
    ):
        """Report a return for an ACH transaction  # noqa: E501

        Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_signal_return_report(processor_signal_return_report_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_signal_return_report_request (ProcessorSignalReturnReportRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorSignalReturnReportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_signal_return_report_request'] = \
            processor_signal_return_report_request
        return self.processor_signal_return_report_endpoint.call_with_http_info(**kwargs)

    def processor_stripe_bank_account_token_create(
        self,
        processor_stripe_bank_account_token_create_request,
        **kwargs
    ):
        """Create Stripe bank account token  # noqa: E501

         Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user's bank account information changes or they revoke Plaid's permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_stripe_bank_account_token_create(processor_stripe_bank_account_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_stripe_bank_account_token_create_request (ProcessorStripeBankAccountTokenCreateRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorStripeBankAccountTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_stripe_bank_account_token_create_request'] = \
            processor_stripe_bank_account_token_create_request
        return self.processor_stripe_bank_account_token_create_endpoint.call_with_http_info(**kwargs)

    def processor_token_create(
        self,
        processor_token_create_request,
        **kwargs
    ):
        """Create processor token  # noqa: E501

        Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_token_create(processor_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_token_create_request (ProcessorTokenCreateRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_token_create_request'] = \
            processor_token_create_request
        return self.processor_token_create_endpoint.call_with_http_info(**kwargs)

    def processor_token_permissions_get(
        self,
        processor_token_permissions_get_request,
        **kwargs
    ):
        """Get a processor token's product permissions  # noqa: E501

        Used to get a processor token's product permissions. The `products` field will be an empty list if the processor can access all available products.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_token_permissions_get(processor_token_permissions_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_token_permissions_get_request (ProcessorTokenPermissionsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorTokenPermissionsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_token_permissions_get_request'] = \
            processor_token_permissions_get_request
        return self.processor_token_permissions_get_endpoint.call_with_http_info(**kwargs)

    def processor_token_permissions_set(
        self,
        processor_token_permissions_set_request,
        **kwargs
    ):
        """Control a processor's access to products  # noqa: E501

        Used to control a processor's access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor's needs change.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_token_permissions_set(processor_token_permissions_set_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_token_permissions_set_request (ProcessorTokenPermissionsSetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorTokenPermissionsSetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_token_permissions_set_request'] = \
            processor_token_permissions_set_request
        return self.processor_token_permissions_set_endpoint.call_with_http_info(**kwargs)

    def processor_token_webhook_update(
        self,
        processor_token_webhook_update_request,
        **kwargs
    ):
        """Update a processor token's webhook URL  # noqa: E501

        This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_token_webhook_update(processor_token_webhook_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_token_webhook_update_request (ProcessorTokenWebhookUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorTokenWebhookUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_token_webhook_update_request'] = \
            processor_token_webhook_update_request
        return self.processor_token_webhook_update_endpoint.call_with_http_info(**kwargs)

    def processor_transactions_get(
        self,
        processor_transactions_get_request,
        **kwargs
    ):
        """Get transaction data  # noqa: E501

        The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn't. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_transactions_get(processor_transactions_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_transactions_get_request (ProcessorTransactionsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorTransactionsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_transactions_get_request'] = \
            processor_transactions_get_request
        return self.processor_transactions_get_endpoint.call_with_http_info(**kwargs)

    def processor_transactions_recurring_get(
        self,
        processor_transactions_recurring_get_request,
        **kwargs
    ):
        """Fetch recurring transaction streams  # noqa: E501

        The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_transactions_recurring_get(processor_transactions_recurring_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_transactions_recurring_get_request (ProcessorTransactionsRecurringGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorTransactionsRecurringGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_transactions_recurring_get_request'] = \
            processor_transactions_recurring_get_request
        return self.processor_transactions_recurring_get_endpoint.call_with_http_info(**kwargs)

    def processor_transactions_refresh(
        self,
        processor_transactions_refresh_request,
        **kwargs
    ):
        """Refresh transaction data  # noqa: E501

        `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on a processor token from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_transactions_refresh(processor_transactions_refresh_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_transactions_refresh_request (ProcessorTransactionsRefreshRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorTransactionsRefreshResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_transactions_refresh_request'] = \
            processor_transactions_refresh_request
        return self.processor_transactions_refresh_endpoint.call_with_http_info(**kwargs)

    def processor_transactions_sync(
        self,
        processor_transactions_sync_request,
        **kwargs
    ):
        """Get incremental transaction updates on a processor token  # noqa: E501

        This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.  The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.processor_transactions_sync(processor_transactions_sync_request, async_req=True)
        >>> result = thread.get()

        Args:
            processor_transactions_sync_request (ProcessorTransactionsSyncRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorTransactionsSyncResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['processor_transactions_sync_request'] = \
            processor_transactions_sync_request
        return self.processor_transactions_sync_endpoint.call_with_http_info(**kwargs)

    def profile_get(
        self,
        profile_get_request,
        **kwargs
    ):
        """Retrieve a Profile  # noqa: E501

        Returns user permissioned profile data including identity and item access tokens.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.profile_get(profile_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            profile_get_request (ProfileGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProfileGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['profile_get_request'] = \
            profile_get_request
        return self.profile_get_endpoint.call_with_http_info(**kwargs)

    def sandbox_bank_income_fire_webhook(
        self,
        sandbox_bank_income_fire_webhook_request,
        **kwargs
    ):
        """Manually fire a bank income webhook in sandbox  # noqa: E501

        Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_bank_income_fire_webhook(sandbox_bank_income_fire_webhook_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_bank_income_fire_webhook_request (SandboxBankIncomeFireWebhookRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxBankIncomeFireWebhookResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_bank_income_fire_webhook_request'] = \
            sandbox_bank_income_fire_webhook_request
        return self.sandbox_bank_income_fire_webhook_endpoint.call_with_http_info(**kwargs)

    def sandbox_bank_transfer_fire_webhook(
        self,
        sandbox_bank_transfer_fire_webhook_request,
        **kwargs
    ):
        """Manually fire a Bank Transfer webhook  # noqa: E501

        Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_bank_transfer_fire_webhook(sandbox_bank_transfer_fire_webhook_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_bank_transfer_fire_webhook_request (SandboxBankTransferFireWebhookRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxBankTransferFireWebhookResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_bank_transfer_fire_webhook_request'] = \
            sandbox_bank_transfer_fire_webhook_request
        return self.sandbox_bank_transfer_fire_webhook_endpoint.call_with_http_info(**kwargs)

    def sandbox_bank_transfer_simulate(
        self,
        sandbox_bank_transfer_simulate_request,
        **kwargs
    ):
        """Simulate a bank transfer event in Sandbox  # noqa: E501

        Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_bank_transfer_simulate(sandbox_bank_transfer_simulate_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_bank_transfer_simulate_request (SandboxBankTransferSimulateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxBankTransferSimulateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_bank_transfer_simulate_request'] = \
            sandbox_bank_transfer_simulate_request
        return self.sandbox_bank_transfer_simulate_endpoint.call_with_http_info(**kwargs)

    def sandbox_income_fire_webhook(
        self,
        sandbox_income_fire_webhook_request,
        **kwargs
    ):
        """Manually fire an Income webhook  # noqa: E501

        Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_income_fire_webhook(sandbox_income_fire_webhook_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_income_fire_webhook_request (SandboxIncomeFireWebhookRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxIncomeFireWebhookResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_income_fire_webhook_request'] = \
            sandbox_income_fire_webhook_request
        return self.sandbox_income_fire_webhook_endpoint.call_with_http_info(**kwargs)

    def sandbox_item_fire_webhook(
        self,
        sandbox_item_fire_webhook_request,
        **kwargs
    ):
        """Fire a test webhook  # noqa: E501

        The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development (except for webhooks of type `TRANSFER`).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_item_fire_webhook(sandbox_item_fire_webhook_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_item_fire_webhook_request (SandboxItemFireWebhookRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxItemFireWebhookResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_item_fire_webhook_request'] = \
            sandbox_item_fire_webhook_request
        return self.sandbox_item_fire_webhook_endpoint.call_with_http_info(**kwargs)

    def sandbox_item_reset_login(
        self,
        sandbox_item_reset_login_request,
        **kwargs
    ):
        """Force a Sandbox Item into an error state  # noqa: E501

        `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_item_reset_login(sandbox_item_reset_login_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_item_reset_login_request (SandboxItemResetLoginRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxItemResetLoginResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_item_reset_login_request'] = \
            sandbox_item_reset_login_request
        return self.sandbox_item_reset_login_endpoint.call_with_http_info(**kwargs)

    def sandbox_item_set_verification_status(
        self,
        sandbox_item_set_verification_status_request,
        **kwargs
    ):
        """Set verification status for Sandbox account  # noqa: E501

        The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_item_set_verification_status(sandbox_item_set_verification_status_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_item_set_verification_status_request (SandboxItemSetVerificationStatusRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxItemSetVerificationStatusResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_item_set_verification_status_request'] = \
            sandbox_item_set_verification_status_request
        return self.sandbox_item_set_verification_status_endpoint.call_with_http_info(**kwargs)

    def sandbox_oauth_select_accounts(
        self,
        sandbox_oauth_select_accounts_request,
        **kwargs
    ):
        """Save the selected accounts when connecting to the Platypus Oauth institution  # noqa: E501

        Save the selected accounts when connecting to the Platypus Oauth institution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_oauth_select_accounts(sandbox_oauth_select_accounts_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_oauth_select_accounts_request (SandboxOauthSelectAccountsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxOauthSelectAccountsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_oauth_select_accounts_request'] = \
            sandbox_oauth_select_accounts_request
        return self.sandbox_oauth_select_accounts_endpoint.call_with_http_info(**kwargs)

    def sandbox_payment_profile_reset_login(
        self,
        sandbox_payment_profile_reset_login_request,
        **kwargs
    ):
        """Reset the login of a Payment Profile  # noqa: E501

        `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_payment_profile_reset_login(sandbox_payment_profile_reset_login_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_payment_profile_reset_login_request (SandboxPaymentProfileResetLoginRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxPaymentProfileResetLoginResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_payment_profile_reset_login_request'] = \
            sandbox_payment_profile_reset_login_request
        return self.sandbox_payment_profile_reset_login_endpoint.call_with_http_info(**kwargs)

    def sandbox_processor_token_create(
        self,
        sandbox_processor_token_create_request,
        **kwargs
    ):
        """Create a test Item and processor token  # noqa: E501

        Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_processor_token_create(sandbox_processor_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_processor_token_create_request (SandboxProcessorTokenCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxProcessorTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_processor_token_create_request'] = \
            sandbox_processor_token_create_request
        return self.sandbox_processor_token_create_endpoint.call_with_http_info(**kwargs)

    def sandbox_public_token_create(
        self,
        sandbox_public_token_create_request,
        **kwargs
    ):
        """Create a test Item  # noqa: E501

        Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_public_token_create(sandbox_public_token_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_public_token_create_request (SandboxPublicTokenCreateRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxPublicTokenCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_public_token_create_request'] = \
            sandbox_public_token_create_request
        return self.sandbox_public_token_create_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_fire_webhook(
        self,
        sandbox_transfer_fire_webhook_request,
        **kwargs
    ):
        """Manually fire a Transfer webhook  # noqa: E501

        Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_fire_webhook(sandbox_transfer_fire_webhook_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_fire_webhook_request (SandboxTransferFireWebhookRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferFireWebhookResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_fire_webhook_request'] = \
            sandbox_transfer_fire_webhook_request
        return self.sandbox_transfer_fire_webhook_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_ledger_deposit_simulate(
        self,
        sandbox_transfer_ledger_deposit_simulate_request,
        **kwargs
    ):
        """Simulate a ledger deposit event in Sandbox  # noqa: E501

        Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_ledger_deposit_simulate(sandbox_transfer_ledger_deposit_simulate_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_ledger_deposit_simulate_request (SandboxTransferLedgerDepositSimulateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferLedgerDepositSimulateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_ledger_deposit_simulate_request'] = \
            sandbox_transfer_ledger_deposit_simulate_request
        return self.sandbox_transfer_ledger_deposit_simulate_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_ledger_simulate_available(
        self,
        sandbox_transfer_ledger_simulate_available_request,
        **kwargs
    ):
        """Simulate converting pending balance to available balance  # noqa: E501

        Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_ledger_simulate_available(sandbox_transfer_ledger_simulate_available_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_ledger_simulate_available_request (SandboxTransferLedgerSimulateAvailableRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferLedgerSimulateAvailableResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_ledger_simulate_available_request'] = \
            sandbox_transfer_ledger_simulate_available_request
        return self.sandbox_transfer_ledger_simulate_available_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_ledger_withdraw_simulate(
        self,
        sandbox_transfer_ledger_withdraw_simulate_request,
        **kwargs
    ):
        """Simulate a ledger withdraw event in Sandbox  # noqa: E501

        Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_ledger_withdraw_simulate(sandbox_transfer_ledger_withdraw_simulate_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_ledger_withdraw_simulate_request (SandboxTransferLedgerWithdrawSimulateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferLedgerWithdrawSimulateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_ledger_withdraw_simulate_request'] = \
            sandbox_transfer_ledger_withdraw_simulate_request
        return self.sandbox_transfer_ledger_withdraw_simulate_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_refund_simulate(
        self,
        sandbox_transfer_refund_simulate_request,
        **kwargs
    ):
        """Simulate a refund event in Sandbox  # noqa: E501

        Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_refund_simulate(sandbox_transfer_refund_simulate_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_refund_simulate_request (SandboxTransferRefundSimulateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferRefundSimulateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_refund_simulate_request'] = \
            sandbox_transfer_refund_simulate_request
        return self.sandbox_transfer_refund_simulate_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_repayment_simulate(
        self,
        sandbox_transfer_repayment_simulate_request,
        **kwargs
    ):
        """Trigger the creation of a repayment  # noqa: E501

        Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_repayment_simulate(sandbox_transfer_repayment_simulate_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_repayment_simulate_request (SandboxTransferRepaymentSimulateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferRepaymentSimulateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_repayment_simulate_request'] = \
            sandbox_transfer_repayment_simulate_request
        return self.sandbox_transfer_repayment_simulate_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_simulate(
        self,
        sandbox_transfer_simulate_request,
        **kwargs
    ):
        """Simulate a transfer event in Sandbox  # noqa: E501

        Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_simulate(sandbox_transfer_simulate_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_simulate_request (SandboxTransferSimulateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferSimulateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_simulate_request'] = \
            sandbox_transfer_simulate_request
        return self.sandbox_transfer_simulate_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_sweep_simulate(
        self,
        sandbox_transfer_sweep_simulate_request,
        **kwargs
    ):
        """Simulate creating a sweep  # noqa: E501

        Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_sweep_simulate(sandbox_transfer_sweep_simulate_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_sweep_simulate_request (SandboxTransferSweepSimulateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferSweepSimulateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_sweep_simulate_request'] = \
            sandbox_transfer_sweep_simulate_request
        return self.sandbox_transfer_sweep_simulate_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_test_clock_advance(
        self,
        sandbox_transfer_test_clock_advance_request,
        **kwargs
    ):
        """Advance a test clock  # noqa: E501

        Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_test_clock_advance(sandbox_transfer_test_clock_advance_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_test_clock_advance_request (SandboxTransferTestClockAdvanceRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferTestClockAdvanceResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_test_clock_advance_request'] = \
            sandbox_transfer_test_clock_advance_request
        return self.sandbox_transfer_test_clock_advance_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_test_clock_create(
        self,
        sandbox_transfer_test_clock_create_request,
        **kwargs
    ):
        """Create a test clock  # noqa: E501

        Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_test_clock_create(sandbox_transfer_test_clock_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_test_clock_create_request (SandboxTransferTestClockCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferTestClockCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_test_clock_create_request'] = \
            sandbox_transfer_test_clock_create_request
        return self.sandbox_transfer_test_clock_create_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_test_clock_get(
        self,
        sandbox_transfer_test_clock_get_request,
        **kwargs
    ):
        """Get a test clock  # noqa: E501

        Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_test_clock_get(sandbox_transfer_test_clock_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_test_clock_get_request (SandboxTransferTestClockGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferTestClockGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_test_clock_get_request'] = \
            sandbox_transfer_test_clock_get_request
        return self.sandbox_transfer_test_clock_get_endpoint.call_with_http_info(**kwargs)

    def sandbox_transfer_test_clock_list(
        self,
        sandbox_transfer_test_clock_list_request,
        **kwargs
    ):
        """List test clocks  # noqa: E501

        Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sandbox_transfer_test_clock_list(sandbox_transfer_test_clock_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            sandbox_transfer_test_clock_list_request (SandboxTransferTestClockListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SandboxTransferTestClockListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['sandbox_transfer_test_clock_list_request'] = \
            sandbox_transfer_test_clock_list_request
        return self.sandbox_transfer_test_clock_list_endpoint.call_with_http_info(**kwargs)

    def signal_decision_report(
        self,
        signal_decision_report_request,
        **kwargs
    ):
        """Report whether you initiated an ACH transaction  # noqa: E501

        After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.signal_decision_report(signal_decision_report_request, async_req=True)
        >>> result = thread.get()

        Args:
            signal_decision_report_request (SignalDecisionReportRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SignalDecisionReportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['signal_decision_report_request'] = \
            signal_decision_report_request
        return self.signal_decision_report_endpoint.call_with_http_info(**kwargs)

    def signal_evaluate(
        self,
        signal_evaluate_request,
        **kwargs
    ):
        """Evaluate a planned ACH transaction  # noqa: E501

        Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.signal_evaluate(signal_evaluate_request, async_req=True)
        >>> result = thread.get()

        Args:
            signal_evaluate_request (SignalEvaluateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SignalEvaluateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['signal_evaluate_request'] = \
            signal_evaluate_request
        return self.signal_evaluate_endpoint.call_with_http_info(**kwargs)

    def signal_prepare(
        self,
        signal_prepare_request,
        **kwargs
    ):
        """Opt-in an Item to Signal  # noqa: E501

        When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.signal_prepare(signal_prepare_request, async_req=True)
        >>> result = thread.get()

        Args:
            signal_prepare_request (SignalPrepareRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SignalPrepareResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['signal_prepare_request'] = \
            signal_prepare_request
        return self.signal_prepare_endpoint.call_with_http_info(**kwargs)

    def signal_return_report(
        self,
        signal_return_report_request,
        **kwargs
    ):
        """Report a return for an ACH transaction  # noqa: E501

        Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.signal_return_report(signal_return_report_request, async_req=True)
        >>> result = thread.get()

        Args:
            signal_return_report_request (SignalReturnReportRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SignalReturnReportResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['signal_return_report_request'] = \
            signal_return_report_request
        return self.signal_return_report_endpoint.call_with_http_info(**kwargs)

    def statements_download(
        self,
        statements_download_request,
        **kwargs
    ):
        """Retrieve a single statement.  # noqa: E501

        The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statements_download(statements_download_request, async_req=True)
        >>> result = thread.get()

        Args:
            statements_download_request (StatementsDownloadRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['statements_download_request'] = \
            statements_download_request
        return self.statements_download_endpoint.call_with_http_info(**kwargs)

    def statements_list(
        self,
        statements_list_request,
        **kwargs
    ):
        """Retrieve a list of all statements associated with an item.  # noqa: E501

        The `/statements/list` endpoint retrieves a list of all statements associated with an item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statements_list(statements_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            statements_list_request (StatementsListRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            StatementsListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['statements_list_request'] = \
            statements_list_request
        return self.statements_list_endpoint.call_with_http_info(**kwargs)

    def statements_refresh(
        self,
        statements_refresh_request,
        **kwargs
    ):
        """Refresh statements data.  # noqa: E501

        `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.statements_refresh(statements_refresh_request, async_req=True)
        >>> result = thread.get()

        Args:
            statements_refresh_request (StatementsRefreshRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            StatementsRefreshResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['statements_refresh_request'] = \
            statements_refresh_request
        return self.statements_refresh_endpoint.call_with_http_info(**kwargs)

    def transactions_enhance(
        self,
        transactions_enhance_get_request,
        **kwargs
    ):
        """enhance locally-held transaction data  # noqa: E501

        The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_enhance(transactions_enhance_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_enhance_get_request (TransactionsEnhanceGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsEnhanceGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_enhance_get_request'] = \
            transactions_enhance_get_request
        return self.transactions_enhance_endpoint.call_with_http_info(**kwargs)

    def transactions_enrich(
        self,
        transactions_enrich_request,
        **kwargs
    ):
        """Enrich locally-held transaction data  # noqa: E501

        The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_enrich(transactions_enrich_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_enrich_request (TransactionsEnrichRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsEnrichResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_enrich_request'] = \
            transactions_enrich_request
        return self.transactions_enrich_endpoint.call_with_http_info(**kwargs)

    def transactions_get(
        self,
        transactions_get_request,
        **kwargs
    ):
        """Get transaction data  # noqa: E501

        Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_get(transactions_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_get_request (TransactionsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_get_request'] = \
            transactions_get_request
        return self.transactions_get_endpoint.call_with_http_info(**kwargs)

    def transactions_recurring_get(
        self,
        transactions_recurring_get_request,
        **kwargs
    ):
        """Fetch recurring transaction streams  # noqa: E501

        The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). For optimal results, we strongly recommend customers using Recurring Transactions to request at least 180 days of history when initializing items with Transactions (using the [`days_requested`](https://plaid.com/docs/api/tokens/#link-token-create-request-transactions-days-requested) option). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_recurring_get(transactions_recurring_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_recurring_get_request (TransactionsRecurringGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsRecurringGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_recurring_get_request'] = \
            transactions_recurring_get_request
        return self.transactions_recurring_get_endpoint.call_with_http_info(**kwargs)

    def transactions_refresh(
        self,
        transactions_refresh_request,
        **kwargs
    ):
        """Refresh transaction data  # noqa: E501

        `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_refresh(transactions_refresh_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_refresh_request (TransactionsRefreshRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsRefreshResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_refresh_request'] = \
            transactions_refresh_request
        return self.transactions_refresh_endpoint.call_with_http_info(**kwargs)

    def transactions_rules_create(
        self,
        transactions_rules_create_request,
        **kwargs
    ):
        """Create transaction category rule  # noqa: E501

        The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item's transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_rules_create(transactions_rules_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_rules_create_request (TransactionsRulesCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsRulesCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_rules_create_request'] = \
            transactions_rules_create_request
        return self.transactions_rules_create_endpoint.call_with_http_info(**kwargs)

    def transactions_rules_list(
        self,
        transactions_rules_list_request,
        **kwargs
    ):
        """Return a list of rules created for the Item associated with the access token.  # noqa: E501

        The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_rules_list(transactions_rules_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_rules_list_request (TransactionsRulesListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsRulesListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_rules_list_request'] = \
            transactions_rules_list_request
        return self.transactions_rules_list_endpoint.call_with_http_info(**kwargs)

    def transactions_rules_remove(
        self,
        transactions_rules_remove_request,
        **kwargs
    ):
        """Remove transaction rule  # noqa: E501

        The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_rules_remove(transactions_rules_remove_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_rules_remove_request (TransactionsRulesRemoveRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsRulesRemoveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_rules_remove_request'] = \
            transactions_rules_remove_request
        return self.transactions_rules_remove_endpoint.call_with_http_info(**kwargs)

    def transactions_sync(
        self,
        transactions_sync_request,
        **kwargs
    ):
        """Get incremental transaction updates on an Item  # noqa: E501

        The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.  `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_sync(transactions_sync_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_sync_request (TransactionsSyncRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsSyncResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_sync_request'] = \
            transactions_sync_request
        return self.transactions_sync_endpoint.call_with_http_info(**kwargs)

    def transactions_user_insights_get(
        self,
        transactions_user_insights_get_request,
        **kwargs
    ):
        """Obtain user insights based on transactions sent through /transactions/enrich  # noqa: E501

        The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_user_insights_get(transactions_user_insights_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transactions_user_insights_get_request (TransactionsUserInsightsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsUserInsightsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transactions_user_insights_get_request'] = \
            transactions_user_insights_get_request
        return self.transactions_user_insights_get_endpoint.call_with_http_info(**kwargs)

    def transfer_authorization_cancel(
        self,
        transfer_authorization_cancel_request,
        **kwargs
    ):
        """Cancel a transfer authorization  # noqa: E501

        Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_authorization_cancel(transfer_authorization_cancel_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_authorization_cancel_request (TransferAuthorizationCancelRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferAuthorizationCancelResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_authorization_cancel_request'] = \
            transfer_authorization_cancel_request
        return self.transfer_authorization_cancel_endpoint.call_with_http_info(**kwargs)

    def transfer_authorization_create(
        self,
        transfer_authorization_create_request,
        **kwargs
    ):
        """Create a transfer authorization  # noqa: E501

        Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`.  There are three possible outcomes to calling this endpoint: If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer. If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid's Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_authorization_create(transfer_authorization_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_authorization_create_request (TransferAuthorizationCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferAuthorizationCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_authorization_create_request'] = \
            transfer_authorization_create_request
        return self.transfer_authorization_create_endpoint.call_with_http_info(**kwargs)

    def transfer_balance_get(
        self,
        transfer_balance_get_request,
        **kwargs
    ):
        """(Deprecated) Retrieve a balance held with Plaid  # noqa: E501

        (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_balance_get(transfer_balance_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_balance_get_request (TransferBalanceGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferBalanceGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_balance_get_request'] = \
            transfer_balance_get_request
        return self.transfer_balance_get_endpoint.call_with_http_info(**kwargs)

    def transfer_cancel(
        self,
        transfer_cancel_request,
        **kwargs
    ):
        """Cancel a transfer  # noqa: E501

        Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_cancel(transfer_cancel_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_cancel_request (TransferCancelRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferCancelResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_cancel_request'] = \
            transfer_cancel_request
        return self.transfer_cancel_endpoint.call_with_http_info(**kwargs)

    def transfer_capabilities_get(
        self,
        transfer_capabilities_get_request,
        **kwargs
    ):
        """Get RTP eligibility information of a transfer  # noqa: E501

        Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_capabilities_get(transfer_capabilities_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_capabilities_get_request (TransferCapabilitiesGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferCapabilitiesGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_capabilities_get_request'] = \
            transfer_capabilities_get_request
        return self.transfer_capabilities_get_endpoint.call_with_http_info(**kwargs)

    def transfer_configuration_get(
        self,
        transfer_configuration_get_request,
        **kwargs
    ):
        """Get transfer product configuration  # noqa: E501

        Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_configuration_get(transfer_configuration_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_configuration_get_request (TransferConfigurationGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferConfigurationGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_configuration_get_request'] = \
            transfer_configuration_get_request
        return self.transfer_configuration_get_endpoint.call_with_http_info(**kwargs)

    def transfer_create(
        self,
        transfer_create_request,
        **kwargs
    ):
        """Create a transfer  # noqa: E501

        Use the `/transfer/create` endpoint to initiate a new transfer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_create(transfer_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_create_request (TransferCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_create_request'] = \
            transfer_create_request
        return self.transfer_create_endpoint.call_with_http_info(**kwargs)

    def transfer_diligence_document_upload(
        self,
        transfer_diligence_document_upload_request,
        **kwargs
    ):
        """Upload transfer diligence document on behalf of the originator  # noqa: E501

        Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_diligence_document_upload(transfer_diligence_document_upload_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_diligence_document_upload_request (TransferDiligenceDocumentUploadRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferDiligenceDocumentUploadResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_diligence_document_upload_request'] = \
            transfer_diligence_document_upload_request
        return self.transfer_diligence_document_upload_endpoint.call_with_http_info(**kwargs)

    def transfer_diligence_submit(
        self,
        transfer_diligence_submit_request,
        **kwargs
    ):
        """Submit transfer diligence on behalf of the originator  # noqa: E501

        Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_diligence_submit(transfer_diligence_submit_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_diligence_submit_request (TransferDiligenceSubmitRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferDiligenceSubmitResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_diligence_submit_request'] = \
            transfer_diligence_submit_request
        return self.transfer_diligence_submit_endpoint.call_with_http_info(**kwargs)

    def transfer_event_list(
        self,
        transfer_event_list_request,
        **kwargs
    ):
        """List transfer events  # noqa: E501

        Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_event_list(transfer_event_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_event_list_request (TransferEventListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferEventListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_event_list_request'] = \
            transfer_event_list_request
        return self.transfer_event_list_endpoint.call_with_http_info(**kwargs)

    def transfer_event_sync(
        self,
        transfer_event_sync_request,
        **kwargs
    ):
        """Sync transfer events  # noqa: E501

        `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_event_sync(transfer_event_sync_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_event_sync_request (TransferEventSyncRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferEventSyncResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_event_sync_request'] = \
            transfer_event_sync_request
        return self.transfer_event_sync_endpoint.call_with_http_info(**kwargs)

    def transfer_get(
        self,
        transfer_get_request,
        **kwargs
    ):
        """Retrieve a transfer  # noqa: E501

        The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_get(transfer_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_get_request (TransferGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_get_request'] = \
            transfer_get_request
        return self.transfer_get_endpoint.call_with_http_info(**kwargs)

    def transfer_intent_create(
        self,
        transfer_intent_create_request,
        **kwargs
    ):
        """Create a transfer intent object to invoke the Transfer UI  # noqa: E501

        Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_intent_create(transfer_intent_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_intent_create_request (TransferIntentCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferIntentCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_intent_create_request'] = \
            transfer_intent_create_request
        return self.transfer_intent_create_endpoint.call_with_http_info(**kwargs)

    def transfer_intent_get(
        self,
        transfer_intent_get_request,
        **kwargs
    ):
        """Retrieve more information about a transfer intent  # noqa: E501

        Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_intent_get(transfer_intent_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_intent_get_request (TransferIntentGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferIntentGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_intent_get_request'] = \
            transfer_intent_get_request
        return self.transfer_intent_get_endpoint.call_with_http_info(**kwargs)

    def transfer_ledger_deposit(
        self,
        transfer_ledger_deposit_request,
        **kwargs
    ):
        """Deposit funds into a Plaid Ledger balance  # noqa: E501

        Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_ledger_deposit(transfer_ledger_deposit_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_ledger_deposit_request (TransferLedgerDepositRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferLedgerDepositResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_ledger_deposit_request'] = \
            transfer_ledger_deposit_request
        return self.transfer_ledger_deposit_endpoint.call_with_http_info(**kwargs)

    def transfer_ledger_distribute(
        self,
        transfer_ledger_distribute_request,
        **kwargs
    ):
        """Move available balance between the ledgers of the platform and one of its originators  # noqa: E501

        Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_ledger_distribute(transfer_ledger_distribute_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_ledger_distribute_request (TransferLedgerDistributeRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferLedgerDistributeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_ledger_distribute_request'] = \
            transfer_ledger_distribute_request
        return self.transfer_ledger_distribute_endpoint.call_with_http_info(**kwargs)

    def transfer_ledger_get(
        self,
        transfer_ledger_get_request,
        **kwargs
    ):
        """Retrieve Plaid Ledger balance  # noqa: E501

        Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_ledger_get(transfer_ledger_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_ledger_get_request (TransferLedgerGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferLedgerGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_ledger_get_request'] = \
            transfer_ledger_get_request
        return self.transfer_ledger_get_endpoint.call_with_http_info(**kwargs)

    def transfer_ledger_withdraw(
        self,
        transfer_ledger_withdraw_request,
        **kwargs
    ):
        """Withdraw funds from a Plaid Ledger balance  # noqa: E501

        Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_ledger_withdraw(transfer_ledger_withdraw_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_ledger_withdraw_request (TransferLedgerWithdrawRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferLedgerWithdrawResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_ledger_withdraw_request'] = \
            transfer_ledger_withdraw_request
        return self.transfer_ledger_withdraw_endpoint.call_with_http_info(**kwargs)

    def transfer_list(
        self,
        transfer_list_request,
        **kwargs
    ):
        """List transfers  # noqa: E501

        Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_list(transfer_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_list_request (TransferListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_list_request'] = \
            transfer_list_request
        return self.transfer_list_endpoint.call_with_http_info(**kwargs)

    def transfer_metrics_get(
        self,
        transfer_metrics_get_request,
        **kwargs
    ):
        """Get transfer product usage metrics  # noqa: E501

        Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_metrics_get(transfer_metrics_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_metrics_get_request (TransferMetricsGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferMetricsGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_metrics_get_request'] = \
            transfer_metrics_get_request
        return self.transfer_metrics_get_endpoint.call_with_http_info(**kwargs)

    def transfer_migrate_account(
        self,
        transfer_migrate_account_request,
        **kwargs
    ):
        """Migrate account into Transfers  # noqa: E501

        As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. If you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_migrate_account(transfer_migrate_account_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_migrate_account_request (TransferMigrateAccountRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferMigrateAccountResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_migrate_account_request'] = \
            transfer_migrate_account_request
        return self.transfer_migrate_account_endpoint.call_with_http_info(**kwargs)

    def transfer_originator_create(
        self,
        transfer_originator_create_request,
        **kwargs
    ):
        """Create a new originator  # noqa: E501

        Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_originator_create(transfer_originator_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_originator_create_request (TransferOriginatorCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferOriginatorCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_originator_create_request'] = \
            transfer_originator_create_request
        return self.transfer_originator_create_endpoint.call_with_http_info(**kwargs)

    def transfer_originator_funding_account_update(
        self,
        transfer_originator_funding_account_update_request,
        **kwargs
    ):
        """Update the funding account associated with the originator  # noqa: E501

        Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_originator_funding_account_update(transfer_originator_funding_account_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_originator_funding_account_update_request (TransferOriginatorFundingAccountUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferOriginatorFundingAccountUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_originator_funding_account_update_request'] = \
            transfer_originator_funding_account_update_request
        return self.transfer_originator_funding_account_update_endpoint.call_with_http_info(**kwargs)

    def transfer_originator_get(
        self,
        transfer_originator_get_request,
        **kwargs
    ):
        """Get status of an originator's onboarding  # noqa: E501

        The `/transfer/originator/get` endpoint gets status updates for an originator's onboarding process. This information is also available via the Transfer page on the Plaid dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_originator_get(transfer_originator_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_originator_get_request (TransferOriginatorGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferOriginatorGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_originator_get_request'] = \
            transfer_originator_get_request
        return self.transfer_originator_get_endpoint.call_with_http_info(**kwargs)

    def transfer_originator_list(
        self,
        transfer_originator_list_request,
        **kwargs
    ):
        """Get status of all originators' onboarding  # noqa: E501

        The `/transfer/originator/list` endpoint gets status updates for all of your originators' onboarding. This information is also available via the Plaid dashboard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_originator_list(transfer_originator_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_originator_list_request (TransferOriginatorListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferOriginatorListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_originator_list_request'] = \
            transfer_originator_list_request
        return self.transfer_originator_list_endpoint.call_with_http_info(**kwargs)

    def transfer_questionnaire_create(
        self,
        transfer_questionnaire_create_request,
        **kwargs
    ):
        """Generate a Plaid-hosted onboarding UI URL.  # noqa: E501

        The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_questionnaire_create(transfer_questionnaire_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_questionnaire_create_request (TransferQuestionnaireCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferQuestionnaireCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_questionnaire_create_request'] = \
            transfer_questionnaire_create_request
        return self.transfer_questionnaire_create_endpoint.call_with_http_info(**kwargs)

    def transfer_recurring_cancel(
        self,
        transfer_recurring_cancel_request,
        **kwargs
    ):
        """Cancel a recurring transfer.  # noqa: E501

        Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn't been submitted to bank will be cancelled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_recurring_cancel(transfer_recurring_cancel_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_recurring_cancel_request (TransferRecurringCancelRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferRecurringCancelResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_recurring_cancel_request'] = \
            transfer_recurring_cancel_request
        return self.transfer_recurring_cancel_endpoint.call_with_http_info(**kwargs)

    def transfer_recurring_create(
        self,
        transfer_recurring_create_request,
        **kwargs
    ):
        """Create a recurring transfer  # noqa: E501

        Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_recurring_create(transfer_recurring_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_recurring_create_request (TransferRecurringCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferRecurringCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_recurring_create_request'] = \
            transfer_recurring_create_request
        return self.transfer_recurring_create_endpoint.call_with_http_info(**kwargs)

    def transfer_recurring_get(
        self,
        transfer_recurring_get_request,
        **kwargs
    ):
        """Retrieve a recurring transfer  # noqa: E501

        The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_recurring_get(transfer_recurring_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_recurring_get_request (TransferRecurringGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferRecurringGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_recurring_get_request'] = \
            transfer_recurring_get_request
        return self.transfer_recurring_get_endpoint.call_with_http_info(**kwargs)

    def transfer_recurring_list(
        self,
        transfer_recurring_list_request,
        **kwargs
    ):
        """List recurring transfers  # noqa: E501

        Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_recurring_list(transfer_recurring_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_recurring_list_request (TransferRecurringListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferRecurringListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_recurring_list_request'] = \
            transfer_recurring_list_request
        return self.transfer_recurring_list_endpoint.call_with_http_info(**kwargs)

    def transfer_refund_cancel(
        self,
        transfer_refund_cancel_request,
        **kwargs
    ):
        """Cancel a refund  # noqa: E501

        Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_refund_cancel(transfer_refund_cancel_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_refund_cancel_request (TransferRefundCancelRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferRefundCancelResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_refund_cancel_request'] = \
            transfer_refund_cancel_request
        return self.transfer_refund_cancel_endpoint.call_with_http_info(**kwargs)

    def transfer_refund_create(
        self,
        transfer_refund_create_request,
        **kwargs
    ):
        """Create a refund  # noqa: E501

        Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 4 business days following the transfer's settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_refund_create(transfer_refund_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_refund_create_request (TransferRefundCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferRefundCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_refund_create_request'] = \
            transfer_refund_create_request
        return self.transfer_refund_create_endpoint.call_with_http_info(**kwargs)

    def transfer_refund_get(
        self,
        transfer_refund_get_request,
        **kwargs
    ):
        """Retrieve a refund  # noqa: E501

        The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_refund_get(transfer_refund_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_refund_get_request (TransferRefundGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferRefundGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_refund_get_request'] = \
            transfer_refund_get_request
        return self.transfer_refund_get_endpoint.call_with_http_info(**kwargs)

    def transfer_repayment_list(
        self,
        transfer_repayment_list_request,
        **kwargs
    ):
        """Lists historical repayments  # noqa: E501

        The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_repayment_list(transfer_repayment_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_repayment_list_request (TransferRepaymentListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferRepaymentListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_repayment_list_request'] = \
            transfer_repayment_list_request
        return self.transfer_repayment_list_endpoint.call_with_http_info(**kwargs)

    def transfer_repayment_return_list(
        self,
        transfer_repayment_return_list_request,
        **kwargs
    ):
        """List the returns included in a repayment  # noqa: E501

        The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_repayment_return_list(transfer_repayment_return_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_repayment_return_list_request (TransferRepaymentReturnListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferRepaymentReturnListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_repayment_return_list_request'] = \
            transfer_repayment_return_list_request
        return self.transfer_repayment_return_list_endpoint.call_with_http_info(**kwargs)

    def transfer_sweep_get(
        self,
        transfer_sweep_get_request,
        **kwargs
    ):
        """Retrieve a sweep  # noqa: E501

        The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_sweep_get(transfer_sweep_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_sweep_get_request (TransferSweepGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferSweepGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_sweep_get_request'] = \
            transfer_sweep_get_request
        return self.transfer_sweep_get_endpoint.call_with_http_info(**kwargs)

    def transfer_sweep_list(
        self,
        transfer_sweep_list_request,
        **kwargs
    ):
        """List sweeps  # noqa: E501

        The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transfer_sweep_list(transfer_sweep_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            transfer_sweep_list_request (TransferSweepListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TransferSweepListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transfer_sweep_list_request'] = \
            transfer_sweep_list_request
        return self.transfer_sweep_list_endpoint.call_with_http_info(**kwargs)

    def user_create(
        self,
        user_create_request,
        **kwargs
    ):
        """Create user  # noqa: E501

        This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user's identifier in your database, as it is not possible to retrieve a previously created `user_token`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_create(user_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            user_create_request (UserCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UserCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['user_create_request'] = \
            user_create_request
        return self.user_create_endpoint.call_with_http_info(**kwargs)

    def user_update(
        self,
        user_update_request,
        **kwargs
    ):
        """Update user information  # noqa: E501

        This endpoint is used to update user information associated with an existing `user_token`. The `user_token` should be in the response of `/user/create` call  If you call the endpoint with a non-exist `user_token`, the call will fail with an error message indicating that the user token is not found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.user_update(user_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            user_update_request (UserUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UserUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['user_update_request'] = \
            user_update_request
        return self.user_update_endpoint.call_with_http_info(**kwargs)

    def wallet_create(
        self,
        wallet_create_request,
        **kwargs
    ):
        """Create an e-wallet  # noqa: E501

        Create an e-wallet. The response is the newly created e-wallet object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.wallet_create(wallet_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            wallet_create_request (WalletCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WalletCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['wallet_create_request'] = \
            wallet_create_request
        return self.wallet_create_endpoint.call_with_http_info(**kwargs)

    def wallet_get(
        self,
        wallet_get_request,
        **kwargs
    ):
        """Fetch an e-wallet  # noqa: E501

        Fetch an e-wallet. The response includes the current balance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.wallet_get(wallet_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            wallet_get_request (WalletGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WalletGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['wallet_get_request'] = \
            wallet_get_request
        return self.wallet_get_endpoint.call_with_http_info(**kwargs)

    def wallet_list(
        self,
        wallet_list_request,
        **kwargs
    ):
        """Fetch a list of e-wallets  # noqa: E501

        This endpoint lists all e-wallets in descending order of creation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.wallet_list(wallet_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            wallet_list_request (WalletListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WalletListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['wallet_list_request'] = \
            wallet_list_request
        return self.wallet_list_endpoint.call_with_http_info(**kwargs)

    def wallet_transaction_execute(
        self,
        wallet_transaction_execute_request,
        **kwargs
    ):
        """Execute a transaction using an e-wallet  # noqa: E501

        Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.wallet_transaction_execute(wallet_transaction_execute_request, async_req=True)
        >>> result = thread.get()

        Args:
            wallet_transaction_execute_request (WalletTransactionExecuteRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WalletTransactionExecuteResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['wallet_transaction_execute_request'] = \
            wallet_transaction_execute_request
        return self.wallet_transaction_execute_endpoint.call_with_http_info(**kwargs)

    def wallet_transaction_get(
        self,
        wallet_transaction_get_request,
        **kwargs
    ):
        """Fetch an e-wallet transaction  # noqa: E501

        Fetch a specific e-wallet transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.wallet_transaction_get(wallet_transaction_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            wallet_transaction_get_request (WalletTransactionGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WalletTransactionGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['wallet_transaction_get_request'] = \
            wallet_transaction_get_request
        return self.wallet_transaction_get_endpoint.call_with_http_info(**kwargs)

    def wallet_transaction_list(
        self,
        wallet_transaction_list_request,
        **kwargs
    ):
        """List e-wallet transactions  # noqa: E501

        This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.wallet_transaction_list(wallet_transaction_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            wallet_transaction_list_request (WalletTransactionListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WalletTransactionListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['wallet_transaction_list_request'] = \
            wallet_transaction_list_request
        return self.wallet_transaction_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_create(
        self,
        watchlist_screening_entity_create_request,
        **kwargs
    ):
        """Create a watchlist screening for an entity  # noqa: E501

        Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_create(watchlist_screening_entity_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_create_request (WatchlistScreeningEntityCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_create_request'] = \
            watchlist_screening_entity_create_request
        return self.watchlist_screening_entity_create_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_get(
        self,
        watchlist_screening_entity_get_request,
        **kwargs
    ):
        """Get an entity screening  # noqa: E501

        Retrieve an entity watchlist screening.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_get(watchlist_screening_entity_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_get_request (WatchlistScreeningEntityGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_get_request'] = \
            watchlist_screening_entity_get_request
        return self.watchlist_screening_entity_get_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_history_list(
        self,
        watchlist_screening_entity_history_list_request,
        **kwargs
    ):
        """List history for entity watchlist screenings  # noqa: E501

        List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_history_list(watchlist_screening_entity_history_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_history_list_request (WatchlistScreeningEntityHistoryListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityHistoryListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_history_list_request'] = \
            watchlist_screening_entity_history_list_request
        return self.watchlist_screening_entity_history_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_hit_list(
        self,
        watchlist_screening_entity_hit_list_request,
        **kwargs
    ):
        """List hits for entity watchlist screenings  # noqa: E501

        List all hits for the entity watchlist screening.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_hit_list(watchlist_screening_entity_hit_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_hit_list_request (WatchlistScreeningEntityHitListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityHitListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_hit_list_request'] = \
            watchlist_screening_entity_hit_list_request
        return self.watchlist_screening_entity_hit_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_list(
        self,
        watchlist_screening_entity_list_request,
        **kwargs
    ):
        """List entity watchlist screenings  # noqa: E501

        List all entity screenings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_list(watchlist_screening_entity_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_list_request (WatchlistScreeningEntityListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_list_request'] = \
            watchlist_screening_entity_list_request
        return self.watchlist_screening_entity_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_program_get(
        self,
        watchlist_screening_entity_program_get_request,
        **kwargs
    ):
        """Get entity watchlist screening program  # noqa: E501

        Get an entity watchlist screening program  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_program_get(watchlist_screening_entity_program_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_program_get_request (WatchlistScreeningEntityProgramGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityProgramGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_program_get_request'] = \
            watchlist_screening_entity_program_get_request
        return self.watchlist_screening_entity_program_get_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_program_list(
        self,
        watchlist_screening_entity_program_list_request,
        **kwargs
    ):
        """List entity watchlist screening programs  # noqa: E501

        List all entity watchlist screening programs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_program_list(watchlist_screening_entity_program_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_program_list_request (WatchlistScreeningEntityProgramListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityProgramListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_program_list_request'] = \
            watchlist_screening_entity_program_list_request
        return self.watchlist_screening_entity_program_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_review_create(
        self,
        watchlist_screening_entity_review_create_request,
        **kwargs
    ):
        """Create a review for an entity watchlist screening  # noqa: E501

        Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_review_create(watchlist_screening_entity_review_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_review_create_request (WatchlistScreeningEntityReviewCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityReviewCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_review_create_request'] = \
            watchlist_screening_entity_review_create_request
        return self.watchlist_screening_entity_review_create_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_review_list(
        self,
        watchlist_screening_entity_review_list_request,
        **kwargs
    ):
        """List reviews for entity watchlist screenings  # noqa: E501

        List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_review_list(watchlist_screening_entity_review_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_review_list_request (WatchlistScreeningEntityReviewListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityReviewListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_review_list_request'] = \
            watchlist_screening_entity_review_list_request
        return self.watchlist_screening_entity_review_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_entity_update(
        self,
        watchlist_screening_entity_update_request,
        **kwargs
    ):
        """Update an entity screening  # noqa: E501

        Update an entity watchlist screening.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_entity_update(watchlist_screening_entity_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_entity_update_request (WatchlistScreeningEntityUpdateRequest): The entity screening was successfully updated.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningEntityUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_entity_update_request'] = \
            watchlist_screening_entity_update_request
        return self.watchlist_screening_entity_update_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_create(
        self,
        watchlist_screening_individual_create_request,
        **kwargs
    ):
        """Create a watchlist screening for a person  # noqa: E501

        Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_create(watchlist_screening_individual_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_create_request (WatchlistScreeningIndividualCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_create_request'] = \
            watchlist_screening_individual_create_request
        return self.watchlist_screening_individual_create_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_get(
        self,
        watchlist_screening_individual_get_request,
        **kwargs
    ):
        """Retrieve an individual watchlist screening  # noqa: E501

        Retrieve a previously created individual watchlist screening  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_get(watchlist_screening_individual_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_get_request (WatchlistScreeningIndividualGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_get_request'] = \
            watchlist_screening_individual_get_request
        return self.watchlist_screening_individual_get_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_history_list(
        self,
        watchlist_screening_individual_history_list_request,
        **kwargs
    ):
        """List history for individual watchlist screenings  # noqa: E501

        List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_history_list(watchlist_screening_individual_history_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_history_list_request (WatchlistScreeningIndividualHistoryListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualHistoryListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_history_list_request'] = \
            watchlist_screening_individual_history_list_request
        return self.watchlist_screening_individual_history_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_hit_list(
        self,
        watchlist_screening_individual_hit_list_request,
        **kwargs
    ):
        """List hits for individual watchlist screening  # noqa: E501

        List all hits found by Plaid for a particular individual watchlist screening.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_hit_list(watchlist_screening_individual_hit_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_hit_list_request (WatchlistScreeningIndividualHitListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualHitListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_hit_list_request'] = \
            watchlist_screening_individual_hit_list_request
        return self.watchlist_screening_individual_hit_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_list(
        self,
        watchlist_screening_individual_list_request,
        **kwargs
    ):
        """List Individual Watchlist Screenings  # noqa: E501

        List previously created watchlist screenings for individuals  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_list(watchlist_screening_individual_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_list_request (WatchlistScreeningIndividualListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_list_request'] = \
            watchlist_screening_individual_list_request
        return self.watchlist_screening_individual_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_program_get(
        self,
        watchlist_screening_individual_program_get_request,
        **kwargs
    ):
        """Get individual watchlist screening program  # noqa: E501

        Get an individual watchlist screening program  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_program_get(watchlist_screening_individual_program_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_program_get_request (WatchlistScreeningIndividualProgramGetRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualProgramGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_program_get_request'] = \
            watchlist_screening_individual_program_get_request
        return self.watchlist_screening_individual_program_get_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_program_list(
        self,
        watchlist_screening_individual_program_list_request,
        **kwargs
    ):
        """List individual watchlist screening programs  # noqa: E501

        List all individual watchlist screening programs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_program_list(watchlist_screening_individual_program_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_program_list_request (WatchlistScreeningIndividualProgramListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualProgramListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_program_list_request'] = \
            watchlist_screening_individual_program_list_request
        return self.watchlist_screening_individual_program_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_review_create(
        self,
        watchlist_screening_individual_review_create_request,
        **kwargs
    ):
        """Create a review for an individual watchlist screening  # noqa: E501

        Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_review_create(watchlist_screening_individual_review_create_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_review_create_request (WatchlistScreeningIndividualReviewCreateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualReviewCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_review_create_request'] = \
            watchlist_screening_individual_review_create_request
        return self.watchlist_screening_individual_review_create_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_review_list(
        self,
        watchlist_screening_individual_review_list_request,
        **kwargs
    ):
        """List reviews for individual watchlist screenings  # noqa: E501

        List all reviews for the individual watchlist screening.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_review_list(watchlist_screening_individual_review_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_review_list_request (WatchlistScreeningIndividualReviewListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualReviewListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_review_list_request'] = \
            watchlist_screening_individual_review_list_request
        return self.watchlist_screening_individual_review_list_endpoint.call_with_http_info(**kwargs)

    def watchlist_screening_individual_update(
        self,
        watchlist_screening_individual_update_request,
        **kwargs
    ):
        """Update individual watchlist screening  # noqa: E501

        Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.watchlist_screening_individual_update(watchlist_screening_individual_update_request, async_req=True)
        >>> result = thread.get()

        Args:
            watchlist_screening_individual_update_request (WatchlistScreeningIndividualUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WatchlistScreeningIndividualUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['watchlist_screening_individual_update_request'] = \
            watchlist_screening_individual_update_request
        return self.watchlist_screening_individual_update_endpoint.call_with_http_info(**kwargs)

    def webhook_verification_key_get(
        self,
        webhook_verification_key_get_request,
        **kwargs
    ):
        """Get webhook verification key  # noqa: E501

        Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.webhook_verification_key_get(webhook_verification_key_get_request, async_req=True)
        >>> result = thread.get()

        Args:
            webhook_verification_key_get_request (WebhookVerificationKeyGetRequest): 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WebhookVerificationKeyGetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['webhook_verification_key_get_request'] = \
            webhook_verification_key_get_request
        return self.webhook_verification_key_get_endpoint.call_with_http_info(**kwargs)

